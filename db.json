{"meta":{"version":1,"warehouse":"5.0.0"},"models":{"Asset":[{"_id":"themes/freemind.386/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/freemind.386/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/freemind.386/source/css/bootstrap-responsive.css","path":"css/bootstrap-responsive.css","modified":0,"renderable":1},{"_id":"themes/freemind.386/source/css/bootstrap.css.map","path":"css/bootstrap.css.map","modified":0,"renderable":1},{"_id":"themes/freemind.386/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/freemind.386/source/css/font-awesome.css","path":"css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/freemind.386/source/css/google-fonts.css","path":"css/google-fonts.css","modified":0,"renderable":1},{"_id":"themes/freemind.386/source/css/highlight.css","path":"css/highlight.css","modified":0,"renderable":1},{"_id":"themes/freemind.386/source/css/responsive.css","path":"css/responsive.css","modified":0,"renderable":1},{"_id":"themes/freemind.386/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/freemind.386/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/freemind.386/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/freemind.386/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/freemind.386/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/freemind.386/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/freemind.386/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/freemind.386/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/freemind.386/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/freemind.386/source/fonts/FontAwesome.otf","path":"fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/freemind.386/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/freemind.386/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/freemind.386/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/freemind.386/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/freemind.386/source/img/github-sprite.png","path":"img/github-sprite.png","modified":0,"renderable":1},{"_id":"themes/freemind.386/source/img/glyphicons-halflings-white.png","path":"img/glyphicons-halflings-white.png","modified":0,"renderable":1},{"_id":"themes/freemind.386/source/img/glyphicons-halflings.png","path":"img/glyphicons-halflings.png","modified":0,"renderable":1},{"_id":"themes/freemind.386/source/img/grid-18px-masked.png","path":"img/grid-18px-masked.png","modified":0,"renderable":1},{"_id":"themes/freemind.386/source/img/grid-baseline-20px.png","path":"img/grid-baseline-20px.png","modified":0,"renderable":1},{"_id":"themes/freemind.386/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":0,"renderable":1},{"_id":"themes/freemind.386/source/js/gallery.js","path":"js/gallery.js","modified":0,"renderable":1},{"_id":"themes/freemind.386/source/js/jquery-2.0.3.min.js","path":"js/jquery-2.0.3.min.js","modified":0,"renderable":1},{"_id":"themes/freemind.386/source/js/jquery.imagesloaded.min.js","path":"js/jquery.imagesloaded.min.js","modified":0,"renderable":1},{"_id":"themes/freemind.386/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/freemind.386/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/freemind.386/source/css/fonts/Fixedsys500c.eot","path":"css/fonts/Fixedsys500c.eot","modified":0,"renderable":1},{"_id":"themes/freemind.386/source/css/fonts/Fixedsys500c.otf","path":"css/fonts/Fixedsys500c.otf","modified":0,"renderable":1},{"_id":"themes/freemind.386/source/css/fonts/Fixedsys500c.ttf","path":"css/fonts/Fixedsys500c.ttf","modified":0,"renderable":1},{"_id":"themes/freemind.386/source/css/fonts/Fixedsys500c.woff","path":"css/fonts/Fixedsys500c.woff","modified":0,"renderable":1},{"_id":"themes/freemind.386/source/fonts/google-fonts/0AKsP294HTD-nvJgucYTaIbN6UDyHWBl620a-IRfuBk.woff","path":"fonts/google-fonts/0AKsP294HTD-nvJgucYTaIbN6UDyHWBl620a-IRfuBk.woff","modified":0,"renderable":1},{"_id":"themes/freemind.386/source/css/fonts/ipix.ttf","path":"css/fonts/ipix.ttf","modified":0,"renderable":1},{"_id":"themes/freemind.386/source/fonts/google-fonts/0XxGQsSc1g4rdRdjJKZrNBsxEYwM7FgeyaSgU71cLG0.woff","path":"fonts/google-fonts/0XxGQsSc1g4rdRdjJKZrNBsxEYwM7FgeyaSgU71cLG0.woff","modified":0,"renderable":1},{"_id":"themes/freemind.386/source/fonts/google-fonts/2UX7WLTfW3W8TclTUvlFyQ.woff","path":"fonts/google-fonts/2UX7WLTfW3W8TclTUvlFyQ.woff","modified":0,"renderable":1},{"_id":"themes/freemind.386/source/fonts/google-fonts/LKf8nhXsWg5ybwEGXk8UBQ.woff","path":"fonts/google-fonts/LKf8nhXsWg5ybwEGXk8UBQ.woff","modified":0,"renderable":1},{"_id":"themes/freemind.386/source/fonts/google-fonts/PIPMHY90P7jtyjpXuZ2cLD8E0i7KZn-EPnyo3HZu7kw.woff","path":"fonts/google-fonts/PIPMHY90P7jtyjpXuZ2cLD8E0i7KZn-EPnyo3HZu7kw.woff","modified":0,"renderable":1},{"_id":"themes/freemind.386/source/fonts/google-fonts/UyYrYy3ltEffJV9QueSi4RdbPw3QSf9R-kE0EsQUn2A.woff","path":"fonts/google-fonts/UyYrYy3ltEffJV9QueSi4RdbPw3QSf9R-kE0EsQUn2A.woff","modified":0,"renderable":1},{"_id":"themes/freemind.386/source/fonts/google-fonts/cj2hUnSRBhwmSPr9kS5899kZXW4sYc4BjuAIFc1SXII.woff","path":"fonts/google-fonts/cj2hUnSRBhwmSPr9kS5899kZXW4sYc4BjuAIFc1SXII.woff","modified":0,"renderable":1},{"_id":"themes/freemind.386/source/fonts/google-fonts/lILlYDvubYemzYzN7GbLkHhCUOGz7vYGh680lGh-uXM.woff","path":"fonts/google-fonts/lILlYDvubYemzYzN7GbLkHhCUOGz7vYGh680lGh-uXM.woff","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/unix-philosophy.md","hash":"24384153971a6f84c2cdb285ca06f6f508a2c1c6","modified":1703048166913},{"_id":"source/_posts/startup.md","hash":"a7d76450e8cd6313623042dcaab9f267989cc748","modified":1703047408710},{"_id":"source/_posts/mac-install.md","hash":"c0961ab06c02dded3768252479ddedd5f26af14f","modified":1703049678406},{"_id":"source/_drafts/xx.md","hash":"f133cd365301fbe30b317206f244a9bdebfa0a9a","modified":1703047590253},{"_id":"source/about/index.md","hash":"f0cde96cc9620cef9d11e42aee0917469c88b407","modified":1703046647870},{"_id":"source/_posts/frontend-engineer-tech-qa.md","hash":"932a6a6786b5ee486a7d6e29585b5abb608d30b1","modified":1703048184773},{"_id":"source/tags/index.md","hash":"80a15f1b5daff22b04849109e976bc91a410b83e","modified":1703047480823},{"_id":"themes/freemind.386/languages/default.yml","hash":"155f627b68439b096421516fe742b885a6983c1f","modified":1703045916045},{"_id":"themes/freemind.386/_config.yml","hash":"60d13049fd75c94032b87a48bc9fbeb23ce2130d","modified":1703049696041},{"_id":"themes/freemind.386/languages/pt-BR.yml","hash":"fa8333f571440de5562918728ff2d206f7960269","modified":1703045916045},{"_id":"themes/freemind.386/languages/zh-CN.yml","hash":"8d4b269767b25d1271805de714844cefc344fd1b","modified":1703045916045},{"_id":"themes/freemind.386/layout/archive.ejs","hash":"c97be36b33bb44957778587f00c978f2d28016f8","modified":1703045916051},{"_id":"themes/freemind.386/languages/zh-TW.yml","hash":"34bbbd2b2f88414a25956764cccded339c7bd5a0","modified":1703048571984},{"_id":"themes/freemind.386/layout/index.ejs","hash":"34656bff868d0e8afed13ca722d138bac0b01da9","modified":1703045916052},{"_id":"themes/freemind.386/layout/categories.ejs","hash":"9ea0e589b02de6ae6ddbd5ca699b52471901a7b9","modified":1703045916051},{"_id":"themes/freemind.386/layout/page.ejs","hash":"21612a42b29cb20f106bc2716c598e69db142750","modified":1703045916052},{"_id":"themes/freemind.386/layout/layout.ejs","hash":"288577e8d379364126679ae8466bee90b62bbda8","modified":1703045916052},{"_id":"themes/freemind.386/layout/tags.ejs","hash":"039b99abfedabe5646f6d7a2ce275e0d5afd42f2","modified":1703045916052},{"_id":"themes/freemind.386/source/favicon.ico","hash":"77de8c46b9b94587cd716e8953a2beb329e38b05","modified":1703049941702},{"_id":"themes/freemind.386/layout/_partial/archive.ejs","hash":"a691c9d3a2ca1ca040c25073d8202a51859b6289","modified":1703045916046},{"_id":"themes/freemind.386/layout/_partial/after_footer.ejs","hash":"cc2b3e840551930a178bac4ff5061a4b14302ea9","modified":1703045916046},{"_id":"themes/freemind.386/layout/post.ejs","hash":"dd2ad444d8a916a4f3fbcfb6e1b5f19890429ec4","modified":1703045916052},{"_id":"themes/freemind.386/source/favicon.png","hash":"2aa1b04814037edbbdb98189d030358326f32fa7","modified":1703049947608},{"_id":"themes/freemind.386/layout/_partial/article.ejs","hash":"130c2ddf9092aceec740c691cffd74abfabfcee8","modified":1703045916046},{"_id":"themes/freemind.386/layout/_partial/footer.ejs","hash":"9eb23eefa081e36cf18f9d5332545fe4cbee1388","modified":1703045916046},{"_id":"themes/freemind.386/layout/_partial/head.ejs","hash":"3e184a2293cbd45ad43b0f65592b21c090c626e4","modified":1703045916047},{"_id":"themes/freemind.386/layout/_partial/search.ejs","hash":"a7c526c07a8af040ba285dc63f267004ce211dce","modified":1703045916049},{"_id":"themes/freemind.386/layout/_partial/index.ejs","hash":"6cb906da2b19e4abad02a321313b7fb76ae2bb8b","modified":1703045916047},{"_id":"themes/freemind.386/layout/_partial/index_pagination.ejs","hash":"fe70eeb0f11d918f230baadeadedbce3c847392d","modified":1703045916047},{"_id":"themes/freemind.386/layout/_partial/navigation.ejs","hash":"b4d28b4948e2c7f06ef1eca1a81ade5a58749eac","modified":1703045916047},{"_id":"themes/freemind.386/layout/_partial/sidebar.ejs","hash":"862ff700568ec5a00f222131b353475d0a3f2a9c","modified":1703045916049},{"_id":"themes/freemind.386/layout/_widget/category.ejs","hash":"9582012806de184f419a2230aa52ca20915a4115","modified":1703045916050},{"_id":"themes/freemind.386/layout/_widget/links.ejs","hash":"371cba21cbb8bba8a61e4a36055000b992b0dd9d","modified":1703045916050},{"_id":"themes/freemind.386/layout/_widget/tagcloud.ejs","hash":"2bb6f4c3b2c10bc107f2d216bda34339ca045338","modified":1703045916051},{"_id":"themes/freemind.386/layout/_widget/search.ejs","hash":"620dd8a93a9f0fca63f6f0b520cf192ce7b5a645","modified":1703045916050},{"_id":"themes/freemind.386/layout/_widget/recent_posts.ejs","hash":"8d1018d6b4b9c83a58efc11a2ceef86a2bbbeb17","modified":1703045916050},{"_id":"themes/freemind.386/source/css/.emacs.desktop","hash":"3155b8ebc9cd3895cf9d0934ecc230dc0601489e","modified":1703045916053},{"_id":"themes/freemind.386/source/css/bootstrap-responsive.css","hash":"ea29a73addac5004ba4e7e4860e895cf15a5aa31","modified":1703045916053},{"_id":"themes/freemind.386/source/css/google-fonts.css","hash":"06db66e315b47f844fb208b50e5710606360b142","modified":1703045916073},{"_id":"themes/freemind.386/source/css/font-awesome.css","hash":"180959029f82028c2100b7eeec7665412a49e588","modified":1703045916056},{"_id":"themes/freemind.386/source/css/highlight.css","hash":"77c38f70b3f3e0a10ae24126f4561f7f2e4f025b","modified":1703045916074},{"_id":"themes/freemind.386/source/css/style.css","hash":"ceb4c2106076554fa61f5a9b8c0e0b9d58fa1938","modified":1703045916074},{"_id":"themes/freemind.386/source/css/responsive.css","hash":"30f6a26aa0a5368d24a68575eb3fe254de7b92d2","modified":1703045916074},{"_id":"themes/freemind.386/source/fancybox/blank.gif","hash":"4ffebfc1255c0da73aab342450a9ee09fcaccb86","modified":1703045916075},{"_id":"themes/freemind.386/source/fancybox/fancybox_overlay.png","hash":"beb714da455e5dbdbf7b2ed466ff4308c103addb","modified":1703045916076},{"_id":"themes/freemind.386/source/fancybox/fancybox_sprite.png","hash":"0657b6b574bafc4c819c7d6c3bc5dd7205c8eee7","modified":1703045916076},{"_id":"themes/freemind.386/source/fancybox/fancybox_loading.gif","hash":"4fbaf63664f65a42bef60289c887cd61a925ce4c","modified":1703045916075},{"_id":"themes/freemind.386/source/fancybox/jquery.fancybox.css","hash":"cbb69ef9748bf92edc3eb4b269b77ad25465d049","modified":1703045916076},{"_id":"themes/freemind.386/source/fancybox/fancybox_sprite@2x.png","hash":"ecf1523aefe416a4cc901ab4cda5d488e3d9cd76","modified":1703045916076},{"_id":"themes/freemind.386/source/fancybox/fancybox_loading@2x.gif","hash":"381e91e67e85bfda09ce8b88205d93d9a7d20d4d","modified":1703045916075},{"_id":"themes/freemind.386/source/fancybox/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1703045916077},{"_id":"themes/freemind.386/source/fonts/fontawesome-webfont.eot","hash":"0183979056f0b87616cd99d5c54a48f3b771eee6","modified":1703045916079},{"_id":"themes/freemind.386/source/img/github-sprite.png","hash":"7e3ba97164323840fbe3a175b8535087ece93711","modified":1703045916086},{"_id":"themes/freemind.386/source/img/glyphicons-halflings-white.png","hash":"3f6acfb147851b261f24b030a840b758c4667e26","modified":1703045916086},{"_id":"themes/freemind.386/source/fonts/fontawesome-webfont.woff","hash":"7d65e0227d0d7cdc1718119cd2a7dce0638f151c","modified":1703045916082},{"_id":"themes/freemind.386/source/img/grid-18px-masked.png","hash":"2a5b89bc935f2a53870f8788b573971dc3ac7358","modified":1703045916086},{"_id":"themes/freemind.386/source/img/grid-baseline-20px.png","hash":"f51efa3d9ee45c6053bb76244fdf7dd8967b7b6b","modified":1703045916086},{"_id":"themes/freemind.386/source/js/gallery.js","hash":"10cad81731825178f3d30b80a2694a377c1fb7a6","modified":1703045916087},{"_id":"themes/freemind.386/source/js/main.js","hash":"e3fcd795564533a3984b0ce327bd8dff44145f89","modified":1703045916088},{"_id":"themes/freemind.386/source/img/glyphicons-halflings.png","hash":"0b92d4a64699af327eff00b727f1aa46361debfa","modified":1703045916086},{"_id":"themes/freemind.386/source/js/jquery.imagesloaded.min.js","hash":"3eb6381d2ed4b706020e4be5aff024aab4bcabc5","modified":1703045916088},{"_id":"themes/freemind.386/source/js/bootstrap.min.js","hash":"5814e91bb6276f4de8b7951c965f2f190a03978d","modified":1703045916087},{"_id":"themes/freemind.386/source/js/search.js","hash":"a882244488031de498176fc6af35cea2a13c7a18","modified":1703045916088},{"_id":"themes/freemind.386/layout/_partial/post/category.ejs","hash":"54c22e9df09949f59298b21bb2fd55b01fa68845","modified":1703045916048},{"_id":"themes/freemind.386/layout/_partial/post/analytics.ejs","hash":"342f7c1fb59c1c8c77cec5ff62e015b8325c589d","modified":1703045916047},{"_id":"themes/freemind.386/layout/_partial/post/comment_footer.ejs","hash":"fefc355eb4d61d08ffca7f6439fecb146696265e","modified":1703045916048},{"_id":"themes/freemind.386/layout/_partial/post/comment.ejs","hash":"56ed478bcc0820dcbb5c40942079124a7af5f3bf","modified":1703045916048},{"_id":"themes/freemind.386/layout/_partial/post/share.ejs","hash":"24c04b319f1b19e887c42db961b90a7e0ab26fdc","modified":1703045916049},{"_id":"themes/freemind.386/layout/_partial/post/pagination.ejs","hash":"7dbeff1fbb48f8a1f180db2671b28bf89bb7fe16","modified":1703045916048},{"_id":"themes/freemind.386/layout/_partial/post/meta.ejs","hash":"a9660d5c12204ae80d75443ebdc513184320c98d","modified":1703045916048},{"_id":"themes/freemind.386/layout/_partial/post/entry.ejs","hash":"af003040bc93a1f0f710ab6a81db22a512f03646","modified":1703045916048},{"_id":"themes/freemind.386/layout/_partial/post/slogan.ejs","hash":"9499f9d781ebe91ac479a7937622832c5a70396d","modified":1703045916049},{"_id":"themes/freemind.386/layout/_partial/post/tag.ejs","hash":"ca231a24b4d17206991da3468842dd8610d94080","modified":1703045916049},{"_id":"themes/freemind.386/layout/_partial/post/title.ejs","hash":"10d243104cae400291040cf167a8338da5ad49b4","modified":1703045916049},{"_id":"themes/freemind.386/source/css/fonts/Fixedsys500c.eot","hash":"49611cf2e4d7e5c489c191f994ba7ac315bcce5c","modified":1703045916057},{"_id":"themes/freemind.386/source/css/fonts/Fixedsys500c.ttf","hash":"19a8e49df8611dd0d90133a2eb0e410c23932db4","modified":1703045916058},{"_id":"themes/freemind.386/source/css/fonts/Fixedsys500c.otf","hash":"e1fede43e072a990b9cd9899cdd26b78b30d305d","modified":1703045916057},{"_id":"themes/freemind.386/source/css/fonts/Fixedsys500c.woff","hash":"21f8e34c5e252a54710c5f6b0e363b9c43f979b2","modified":1703045916059},{"_id":"themes/freemind.386/source/fonts/google-fonts/0AKsP294HTD-nvJgucYTaIbN6UDyHWBl620a-IRfuBk.woff","hash":"1d9bb14c006d39d7eb0812a85567c7431f899b8d","modified":1703045916083},{"_id":"themes/freemind.386/source/fonts/google-fonts/0XxGQsSc1g4rdRdjJKZrNBsxEYwM7FgeyaSgU71cLG0.woff","hash":"33225e85c33279e7b4f0c5c65ff93bec740dd59c","modified":1703045916083},{"_id":"themes/freemind.386/source/fonts/google-fonts/2UX7WLTfW3W8TclTUvlFyQ.woff","hash":"87deb174af2e2beebb9f09d618a5159ca299a3d0","modified":1703045916083},{"_id":"themes/freemind.386/source/fonts/google-fonts/PIPMHY90P7jtyjpXuZ2cLD8E0i7KZn-EPnyo3HZu7kw.woff","hash":"18dc51e642b4df958098d3bbc6d3ba0237ef6150","modified":1703045916084},{"_id":"themes/freemind.386/source/fonts/google-fonts/LKf8nhXsWg5ybwEGXk8UBQ.woff","hash":"f401d51152681048c06187c5d3919b1407b899c5","modified":1703045916084},{"_id":"themes/freemind.386/source/fonts/google-fonts/cj2hUnSRBhwmSPr9kS5899kZXW4sYc4BjuAIFc1SXII.woff","hash":"17a484b92c0dacc8e8b4f0d38ccc1db400819d1d","modified":1703045916085},{"_id":"themes/freemind.386/source/fonts/google-fonts/UyYrYy3ltEffJV9QueSi4RdbPw3QSf9R-kE0EsQUn2A.woff","hash":"d9f913d09bb3c25749daf8e7ab829c850a842929","modified":1703045916085},{"_id":"themes/freemind.386/source/fonts/google-fonts/lILlYDvubYemzYzN7GbLkHhCUOGz7vYGh680lGh-uXM.woff","hash":"e6c9f1e5a6a966a8f7250201356f351890a48921","modified":1703045916085},{"_id":"themes/freemind.386/source/css/bootstrap.min.css","hash":"0b0aef64196e9c5a81411995a897837bd0b313d3","modified":1703045916056},{"_id":"themes/freemind.386/source/fonts/FontAwesome.otf","hash":"6270a4a561a69fef5f5cc18cdf9efc256ec2ccbe","modified":1703045916079},{"_id":"themes/freemind.386/source/fonts/fontawesome-webfont.ttf","hash":"6225ccc4ec94d060f19efab97ca42d842845b949","modified":1703045916082},{"_id":"themes/freemind.386/source/js/jquery-2.0.3.min.js","hash":"28daf1b2a995cc4de81154a9a9ebdbb98f7c9997","modified":1703045916087},{"_id":"themes/freemind.386/source/css/fonts/Fixedsys500c.svg","hash":"5ee7dd37d045bc147d73acc8a4825cf7ad35b4af","modified":1703045916058},{"_id":"themes/freemind.386/source/css/bootstrap.css.map","hash":"9e7b7a530a95cbc5ab2da1f59d1c323ec3907c3c","modified":1703045916055},{"_id":"themes/freemind.386/source/fonts/fontawesome-webfont.svg","hash":"cd980eab6db5fa57db670cb2e4278e67e1a4d6c9","modified":1703045916081},{"_id":"themes/freemind.386/source/css/fonts/ipix.ttf","hash":"ecfca979a91947b3908710753bbbf971e8f87d05","modified":1703045916073},{"_id":"public/search.xml","hash":"85f68acee71150eb3ebdcd1ac19a0198c6ae822f","modified":1703050097152},{"_id":"public/about/index.html","hash":"011c7e7ead69fd9e55844e04cbffc94294013bf7","modified":1703050097152},{"_id":"public/tags/index.html","hash":"5f330b420e0bf5ca2c825c0825d71fc5eb3cd7c0","modified":1703050097152},{"_id":"public/2023/03/10/startup/index.html","hash":"5f8f14fc7b5ee320fbcda78f1beae923efeed9b5","modified":1703050097152},{"_id":"public/2021/02/20/unix-philosophy/index.html","hash":"73ad2c4b4cc175931bbd6fb68114dd3cd32f9796","modified":1703050097152},{"_id":"public/archives/index.html","hash":"90116acef8bc14bf26c9eecdff6427b8d6bc8ce6","modified":1703050097152},{"_id":"public/archives/2021/index.html","hash":"6630b0ab7a11d48ddc258668a14d34fc5c7bf738","modified":1703050097152},{"_id":"public/archives/2021/02/index.html","hash":"10989d429f5a78e057e791be9c1f4b9ef18b91a6","modified":1703050097152},{"_id":"public/archives/2021/11/index.html","hash":"51c43a9c6f9299598046b36a2184b8e4c356f157","modified":1703050097152},{"_id":"public/archives/2022/index.html","hash":"14a71abebadddbae1589cf7788f3f810bbba7828","modified":1703050097152},{"_id":"public/archives/2022/02/index.html","hash":"fbf5cddef72cad5e02e018a3258479bcafb2eda8","modified":1703050097152},{"_id":"public/archives/2023/index.html","hash":"d75a6bccfc0392d80c465cfc608b1cd655678d8a","modified":1703050097152},{"_id":"public/archives/2023/03/index.html","hash":"e276a2934aa83d584c75fb7e605ad4b23d885d9e","modified":1703050097152},{"_id":"public/tags/article/index.html","hash":"bfba3396c24ce410276d8c4139320a534a47ae55","modified":1703050097152},{"_id":"public/tags/frontend/index.html","hash":"87382972ca3fdafec0d866aa1c099c152b64f343","modified":1703050097152},{"_id":"public/tags/os/index.html","hash":"424536bc9623e1894202e1960d4af93ac1935d1f","modified":1703050097152},{"_id":"public/tags/startup/index.html","hash":"50b3ffd8ee987fc0cb473e44251987b2fac0dec3","modified":1703050097152},{"_id":"public/tags/oneoverzero/index.html","hash":"4eba8ce2d9d4d3096831f5d8da2fad34bcdb16b5","modified":1703050097152},{"_id":"public/tags/jinet/index.html","hash":"15e4056743951d76701fae21d135088eebbf39dc","modified":1703050097152},{"_id":"public/2022/02/20/mac-install/index.html","hash":"63358a12f6cabd2971cac17e597942bf6bd3ffcc","modified":1703050097152},{"_id":"public/2021/11/22/frontend-engineer-tech-qa/index.html","hash":"b41afd5c4cc8eeaae46e2bb95db1c277aaf26c68","modified":1703050097152},{"_id":"public/index.html","hash":"7a5a4d0566d1f212eedf3f10b4284c2672259ea5","modified":1703050097152},{"_id":"public/fancybox/blank.gif","hash":"4ffebfc1255c0da73aab342450a9ee09fcaccb86","modified":1703050097152},{"_id":"public/fancybox/fancybox_overlay.png","hash":"beb714da455e5dbdbf7b2ed466ff4308c103addb","modified":1703050097152},{"_id":"public/fancybox/fancybox_loading.gif","hash":"4fbaf63664f65a42bef60289c887cd61a925ce4c","modified":1703050097152},{"_id":"public/fancybox/fancybox_sprite.png","hash":"0657b6b574bafc4c819c7d6c3bc5dd7205c8eee7","modified":1703050097152},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"ecf1523aefe416a4cc901ab4cda5d488e3d9cd76","modified":1703050097152},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"381e91e67e85bfda09ce8b88205d93d9a7d20d4d","modified":1703050097152},{"_id":"public/fonts/fontawesome-webfont.woff","hash":"7d65e0227d0d7cdc1718119cd2a7dce0638f151c","modified":1703050097152},{"_id":"public/fonts/fontawesome-webfont.eot","hash":"0183979056f0b87616cd99d5c54a48f3b771eee6","modified":1703050097152},{"_id":"public/img/github-sprite.png","hash":"7e3ba97164323840fbe3a175b8535087ece93711","modified":1703050097152},{"_id":"public/img/grid-18px-masked.png","hash":"2a5b89bc935f2a53870f8788b573971dc3ac7358","modified":1703050097152},{"_id":"public/img/glyphicons-halflings-white.png","hash":"3f6acfb147851b261f24b030a840b758c4667e26","modified":1703050097152},{"_id":"public/img/grid-baseline-20px.png","hash":"f51efa3d9ee45c6053bb76244fdf7dd8967b7b6b","modified":1703050097152},{"_id":"public/img/glyphicons-halflings.png","hash":"0b92d4a64699af327eff00b727f1aa46361debfa","modified":1703050097152},{"_id":"public/css/fonts/Fixedsys500c.woff","hash":"21f8e34c5e252a54710c5f6b0e363b9c43f979b2","modified":1703050097152},{"_id":"public/css/fonts/Fixedsys500c.otf","hash":"e1fede43e072a990b9cd9899cdd26b78b30d305d","modified":1703050097152},{"_id":"public/css/fonts/Fixedsys500c.ttf","hash":"19a8e49df8611dd0d90133a2eb0e410c23932db4","modified":1703050097152},{"_id":"public/css/fonts/Fixedsys500c.eot","hash":"49611cf2e4d7e5c489c191f994ba7ac315bcce5c","modified":1703050097152},{"_id":"public/fonts/google-fonts/0AKsP294HTD-nvJgucYTaIbN6UDyHWBl620a-IRfuBk.woff","hash":"1d9bb14c006d39d7eb0812a85567c7431f899b8d","modified":1703050097152},{"_id":"public/fonts/google-fonts/2UX7WLTfW3W8TclTUvlFyQ.woff","hash":"87deb174af2e2beebb9f09d618a5159ca299a3d0","modified":1703050097152},{"_id":"public/fonts/google-fonts/0XxGQsSc1g4rdRdjJKZrNBsxEYwM7FgeyaSgU71cLG0.woff","hash":"33225e85c33279e7b4f0c5c65ff93bec740dd59c","modified":1703050097152},{"_id":"public/fonts/google-fonts/PIPMHY90P7jtyjpXuZ2cLD8E0i7KZn-EPnyo3HZu7kw.woff","hash":"18dc51e642b4df958098d3bbc6d3ba0237ef6150","modified":1703050097152},{"_id":"public/fonts/google-fonts/LKf8nhXsWg5ybwEGXk8UBQ.woff","hash":"f401d51152681048c06187c5d3919b1407b899c5","modified":1703050097152},{"_id":"public/fonts/google-fonts/cj2hUnSRBhwmSPr9kS5899kZXW4sYc4BjuAIFc1SXII.woff","hash":"17a484b92c0dacc8e8b4f0d38ccc1db400819d1d","modified":1703050097152},{"_id":"public/fonts/google-fonts/UyYrYy3ltEffJV9QueSi4RdbPw3QSf9R-kE0EsQUn2A.woff","hash":"d9f913d09bb3c25749daf8e7ab829c850a842929","modified":1703050097152},{"_id":"public/fonts/google-fonts/lILlYDvubYemzYzN7GbLkHhCUOGz7vYGh680lGh-uXM.woff","hash":"e6c9f1e5a6a966a8f7250201356f351890a48921","modified":1703050097152},{"_id":"public/favicon.ico","hash":"77de8c46b9b94587cd716e8953a2beb329e38b05","modified":1703050097152},{"_id":"public/fonts/FontAwesome.otf","hash":"6270a4a561a69fef5f5cc18cdf9efc256ec2ccbe","modified":1703050097152},{"_id":"public/fonts/fontawesome-webfont.ttf","hash":"6225ccc4ec94d060f19efab97ca42d842845b949","modified":1703050097152},{"_id":"public/css/responsive.css","hash":"30f6a26aa0a5368d24a68575eb3fe254de7b92d2","modified":1703050097152},{"_id":"public/css/google-fonts.css","hash":"06db66e315b47f844fb208b50e5710606360b142","modified":1703050097152},{"_id":"public/fancybox/jquery.fancybox.css","hash":"cbb69ef9748bf92edc3eb4b269b77ad25465d049","modified":1703050097152},{"_id":"public/css/highlight.css","hash":"77c38f70b3f3e0a10ae24126f4561f7f2e4f025b","modified":1703050097152},{"_id":"public/css/style.css","hash":"6e0e1f7ce6c332fb326d8fe4118c30a7e1ebfc9d","modified":1703050097152},{"_id":"public/js/gallery.js","hash":"10cad81731825178f3d30b80a2694a377c1fb7a6","modified":1703050097152},{"_id":"public/js/main.js","hash":"e3fcd795564533a3984b0ce327bd8dff44145f89","modified":1703050097152},{"_id":"public/js/jquery.imagesloaded.min.js","hash":"3eb6381d2ed4b706020e4be5aff024aab4bcabc5","modified":1703050097152},{"_id":"public/js/search.js","hash":"a882244488031de498176fc6af35cea2a13c7a18","modified":1703050097152},{"_id":"public/css/bootstrap-responsive.css","hash":"ea29a73addac5004ba4e7e4860e895cf15a5aa31","modified":1703050097152},{"_id":"public/css/bootstrap.min.css","hash":"0b0aef64196e9c5a81411995a897837bd0b313d3","modified":1703050097152},{"_id":"public/css/font-awesome.css","hash":"180959029f82028c2100b7eeec7665412a49e588","modified":1703050097152},{"_id":"public/js/jquery-2.0.3.min.js","hash":"28daf1b2a995cc4de81154a9a9ebdbb98f7c9997","modified":1703050097152},{"_id":"public/js/bootstrap.min.js","hash":"5814e91bb6276f4de8b7951c965f2f190a03978d","modified":1703050097152},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1703050097152},{"_id":"public/favicon.png","hash":"2aa1b04814037edbbdb98189d030358326f32fa7","modified":1703050097152},{"_id":"public/css/bootstrap.css.map","hash":"9e7b7a530a95cbc5ab2da1f59d1c323ec3907c3c","modified":1703050097152},{"_id":"public/fonts/fontawesome-webfont.svg","hash":"cd980eab6db5fa57db670cb2e4278e67e1a4d6c9","modified":1703050097152},{"_id":"public/css/fonts/ipix.ttf","hash":"ecfca979a91947b3908710753bbbf971e8f87d05","modified":1703050097152}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2023-12-20T04:17:40.000Z","_content":"\n# About Yalda.cn\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2023-12-20 12:17:40\n---\n\n# About Yalda.cn\n","updated":"2023-12-20T04:30:47.870Z","path":"about/index.html","comments":1,"layout":"page","_id":"clqdb6f3t0000ixw08ejhfvvo","content":"<h1 id=\"About-Yalda-cn\"><a href=\"#About-Yalda-cn\" class=\"headerlink\" title=\"About Yalda.cn\"></a>About Yalda.cn</h1>","excerpt":"","more":"<h1 id=\"About-Yalda-cn\"><a href=\"#About-Yalda-cn\" class=\"headerlink\" title=\"About Yalda.cn\"></a>About Yalda.cn</h1>"},{"title":"Tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: Tags\nlayout: tags\n---\n","date":"2023-12-20T04:44:40.823Z","updated":"2023-12-20T04:44:40.823Z","path":"tags/index.html","comments":1,"_id":"clqdb6f3z0002ixw03ki5bgcz","content":"","excerpt":"","more":""}],"Post":[{"layout":"post","title":"前端工程师 Tech Q&A","date":"2021-11-21T16:00:00.000Z","_content":"\n# 前端工程师 Tech Q&A\n\n## 级别标准\n\n- P3：实习开发、功能开发\n- P4：主要开发、功能模块独立开发\n- P5：项目负责人、核心开发、技术问题总结者、技术分享、人员培养\n- P6：团队负责人、问题终结者、跨组沟通&协调资源、团队培养提升\n\n## References\n\n> 如下所列前端工程师所涉及**领域**；\n> 领域（子领域）设置**题目**若干；\n> 题中包含**标签**（涉及深度、提问触发词）& **答题点**（必知 **M**ust know、应知 **S**hould to know、可知 **P**osibility）\n\n- 语言：JavaScript、ECMAScript、TypeScript、HTML、CSS\n- 框架&环境：浏览器、研发工具、容器、框架通识\n- 类库&库生态：React、Libs Ecosystem、数据流、SSR & SSG、BFF\n- 跨端技术：微信小程序、多端统一、Node、Electron、Native、Hybrid\n- 研发链路：初始化、包管理、规范标准、调试、编译、构建、测试、发布、监控\n- 性能&安全：性能指标、性能评估、性能优化、源码安全、Web 安全\n- 工程化：工程体系、微前端、低代码、Bundleless、CI\\CD、综合能力\n\n## 语言（Lang & DSL）\n\n### JavaScript\n\n- 简单聊聊 JavaScript 这门语言？\n  - `#了解#`\n  1. 「M」在实现层面：分为语言标准（ECMAScript 是语言标准，JavaScript 只是标准的实现）+ 语言宿主环境（对象模型、WebAPI、N\u001dode Api、WX）；\n  2. 「S」语言标准提供语法、词法、基本类型、表达式、语句等；宿主环境提供内置对象、标准模块；\n  3. 「P」语法借鉴 C & Java、数据结构借鉴 Java、原型借鉴 Self、函数用法借鉴 Schema、正则借鉴 Perl ；\n- JavaScript 中有那些常见的内置对象，由谁提供?\n  - `#了解#`\n  1. 「M」值：NaN、undefined、null、Infinity；函数：eval、parseInt、parseFloat；对象：Object、Function、Boolean、Symbol、Error；数字和日期：Math、Date、Number；字符串：String、RegExp；集合：Array、Map、WeakMap、Set、WeakSet；控制对象：Promise、Generator；反射：Proxy、Reflect；\n  2. [S] 内置对象是在程序执行时存在全局作用域的一些 JS 定义的值、函数、对象；\n- JavaScript 代码在运行时，有那些常见的执行上下文？\n  - `#熟练#`\n  1. 「M」函数执行上下文；\n  2. [S] 全局执行上下文、eval 执行上下文；\n- JavaScript 通用模块规范，并描述其基本的区别？\n  - `#熟练#` `#模块化#`\n  1. 「M」CommonJS、AMD、CMD、UMD、ESM；\n  2. 「M」CommonJS 通过 require 引入模块、module.export 输出对象和接口。运行时加载，输出值的拷贝；\n  3. 「M」ESM 通过 import 引入模块，export 输出模块；编译期输出接口，输出值的引用；浏览器支持原生 ESM ，但只能在 `<script type=\"module\" />` 内使用；\n  4. [S] AMD 和 CMD 均为异步加载模块，分别由 require.js 和 sea.js 提供实现；AMD 依赖前置，CMD 就近依赖；\n  5. [S] UMD 是对 CommonJS、AMD 的整合；\n- JavaScript 这门语言是否有反射能力？ES6 为了增强这种能力又推出那些新特性？\n  - `#精通#` `#编程范式#` `#元编程#` `#反射#` `#Proxy#` `#Reflect#` `#数据劫持#`\n  1. [S] 反射是实现元编程的一种方式；JS 诞生之初就有反射能力；eval、Object.{create|defineProperties|defineProperty}、Function.{apply|bind} 均属于反射的一些实现；\n  2. [S] ES6 Proxy & Reflect 作为反射的两个分支（Self-Modification & Intercession）实现；defineProperty 数据劫持有缺陷；规范语言，对之前 Object & Function 原型链上的方法进行规范化；\n  3. [S] 为 JS 之后更多的反射行为提供良好支撑；\n  4. [P] ES7 推出了 Reflect MetaData 提案，增强了反射覆盖场景；\n- 简单描述闭包及其使用场景？\n  - `#熟练#` `#语言特性#` `#模块化#`\n  1. [M] 指有权限访问另外一个函数作用域中变量的函数；其本质是作用域链的特殊应用；\n  2. [S] 创建私有变量；通过闭包对上下文中变量的引用，防止其被 GC 回收（易引发内存溢出）；\n\n### ECMAScript\n\n- ECMAScript2017（ES8） 中新增的 Symbol 有何用处？\n  - `#熟练#`\n  1. [M] 用来表示一个独一无二的变量防止命名冲突\n- ECMAScript2015（ES6） 之后的版本有那些新特性？\n  - `#熟练#` `#语言特性#` `#ESNext#`\n  1. [S] ES7：Reflect MetaData（提案）、Array includes、`**`运算符；\n  2. [S] ES8：async&await、Object values|entries、String padding、Object.getOwnPropertyDescriptors、SharedArrayBuffer；\n  3. [S] ES9：异步迭代、Promise.finally、正则；\n  4. [S] ES10：Array flat、String trim 函数、Symbol Description、catch 绑定、Function toString 支撑转注释、BigInt；\n  5. [M] ES11：Option Chaining(`?.`)、Nullish Coalescing(`??`)、Private Fields(`#`)、Top Level Await、Dynamic Import、globalThis；\n  6. [S] ES12：String replaceAll、Promise.any、`??= ||= &&=`、WeakRefs、`123_456_789` 数字分隔符；\n- ECMAScript Next（ESNext）中的新特性？\n  - `#精通#` `#ECMA#` `#ESNext#` `#前沿#` `#语言新特性#`\n  1. [S] Class instance fields、Static class fields、Private instance methods、Private instance fields、Private static methods、Private static fields、Ergonomic brand checks、Import assertions、Class static blocks\n  2. [P] Hashbang grammar、Top-level await、Arbitrary module namespace identifiers、\n- 简单列出目前 ECMAScript 处于 Stage（4 & 3 & 2） 阶段的提案？\n  - `#精通#` `#ECMA#`\n  1. [P] Error Cause（首个由中国团队”阿里淘宝”提出并进入 state-4 阶段的提案）\n  2. [P] ESNext：Record、Tuple\n\n### TypeScript\n\n- 简单描述下 TypeScript 在项目中的作用？\n  - `#了解#`\n  1. [M] 是 JS 的超集，可以提前体验 ES Next 提案中的语法糖和特性\n  2. [M] 为 JS 添加类型支撑、JS 的语言超集、利于团队协作；极其强大的类型系统\n- 简单描述下 TypeScript 中常用的工具类型？\n  - `#了解#`\n  1. [S] `Partial<T>` `Required<T>` `Readonly<T>` `Pick<T, K>` `Omit<T, K>`\n- 简单描述下 tsconfig.json 中常用的配置项？\n  - `#熟练#`\n  1. [M] `compilerOptions.targer` `module` `lib` `outDir` `types` `paths` `sourceMap` `include` `exclude`\n- TypeScript 是名义类型还是结构类型？\n  - `#熟练#`\n  1. [S] 结构类型\n- 简单描述下 TypeScript 中 Interface 和 Type 的区别？\n  - `#熟练#`\n  1. [M] 均支持拓展（extends），interface 使用 `extends` 而 type 使用 `&` 类型合并；支持互相拓展；\n  2. [S] type 支持类型别名，联合类型，元组；interface 支持声明合并；在使用过程中尽可能先使用 interface；\n\n### HTML\n\n- 简单列出项目中 HTML 常用的 Meta 标签？\n  - `#了解#` `#浏览器#` `#HTML#`\n  1. [M] `<meta charset=\"utf-8\" />`\n  2. [S] SEO 优化 `<meta name=“description\" contents=“xx,xx”/>`\n  3. [S] SEO 优化 `<meta name=“keywords\" contents=“xx,xx”/>`\n  4.\n- 简单列出项目中 HTML 常用的 Link 标签？\n  - `#了解#` `#浏览器#` `#HTML#`\n  2. [M] `<link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"..\">`\n  3. [M] CSS 外链 `<link rel=\"stylesheet\" href=\"...\">`\n  4. [S] 域名 DNS 预请求 `<link rel=\"dns-prefetch\" href=\"...\" />`\n- 简单描述下 DOM 和 BOM 对象？\n  - `#了解#` `#浏览器#` `#宿主对象#`\n  1. [M] DOM 是文档对象模型，把文档当做为一个对象，定义和处理文档内容的方法和接口；比如 `document`\n  2. [M] BOM 对浏览器对象模型，将浏览器作为一个对象，定义和处理与浏览器交互的方法和接口；比如 `window` `location` `navigator` `screen`\n- 简单描述下事件委托，及其优势和运用场景？\n  - `#熟练#` `#浏览器原理#` `#事件#`\n  1. [M] 利用浏览器事件冒泡机制；在父节点定义监听事件，由父节点监听函数统一处理多个子元素冒泡传过来的事件；\n  2. [S] 减少内存消耗，实现事件的动态绑定；常常运用在各种 UI 事件绑定类库和数据埋点；\n\n### CSS\n\n- 常用单位以及其区别？\n\n  - `#了解#`\n\n  [M] px、em、rem、%、vw、vh\n\n2. [M] px 为屏幕的像素点，em 是父元素的 font-size（默认 16px），vw 为视窗宽度的 1%，vh 为视窗高度的 1%；\n\n- 常用的 CSS 预处理库？\n- `#了解#`\n\n1. [M] Less、Sass\n2. [P] PostCSS、Stylus\n\n- Less & Sass(SCSS) 的区别和各自的优缺点？\n- `#了解#`\n\n1. [M] 区别：在与变量的声明、实现方式（语言不同，Less 基于 JS，Sass 基于 Ruby，当然也有 node-sass 的实现）\n2. [S] Less 兼容性好，但是不支持循环判断等；Sass 用户基础大，支持函数对象循环判断等，但是依赖于 Ruby 安装容易报错；\n\n- 常用的 CSS 架构、规范？\n- `#熟练#`\n\n1. [S] BEM、CSS Modules\n\n- 常用的 CSS in JS？\n- `#熟练#`\n\n1. [S] styled-components、TailwindCSS\n\n- 通用的浏览器 CSS 差异标准化方案？\n- `#熟练#` `#兼容性#` `#初始化#`\n\n1. [S] 引入 normalize.css 或者 reset.css\n\n---\n\n## 框架&环境（Frame & VM）\n\n### 浏览器\n\n- 浏览器事件触发时，其传播的阶段？\n  - `#了解#`\n  1. [M] Capturing（捕获） > Target（目标触发） > Bubbling（冒泡）\n- Cookie、localStorage 以及 sessionStorage 之间的区别？\n  - `#了解#`\n  1. [M] Cookie：保存在客户端的数据，记录你在网页的一些行为数据。 sessionStorage：保存在客户端的数据，生命周期是同源同窗口，只要该窗口没有关闭就一直可用共享。 localStorage：保存在客户端的数据，一直有效；\n  2. [S] Cookie size <= 4Kb；Storage size <= 5Mb；\n- 浏览器出于安全提出了同源策略，何种情况下会引发跨域以及通用解决办法？\n  - `#了解#`\n  1. [M] 域名、子域名、端口号、协议不同均不属于一个域；\n  2. [S] jsonp、documents.domain + iframe、CORS、iframe + postMessage、websocket；\n  3. [S] 处于一级域名下的应用可以设置 document.domain 在相同父域，可以获取 cookie；\n- 简单说明 JSONP 的原理，及其局限性？\n  - `#了解#`\n  1. [M] 利用了`<script>`标签没有跨域限制，可以发起 get 请求；\n  2. [S] 兼容性较好，但仅限于 Get 请求；\n- 简单描述下浏览器的渲染机制？\n  - `#熟练#`\n  1. [S] 处理 HTML 文档构建 DOM 树、处理 CSS 文档构建 CSSOM 树、DOM 与 CSSOM 合并为渲染树；\n- 简单描述下浏览器的缓存机制？\n  - `#熟练#`\n  1. [S] 浏览器缓存分为强缓存和协商缓存；\n  2. [P] 强缓存直接从浏览器中获取资源，通过请求头 `Cache-Control` 控制；协商缓存先访问服务缓存是否过期，在决定是否使用本地资源，通过请求头控制；\n\n### 研发工具\n\n- 如何将项目的格式化进行统一？\n  - `#熟练#`\n  1. [S] 使用 .editorconfig 定义代码格式化风格；或者提交 .vscode settings.json 约束项目；\n- 常用的 VS Code Editor 配置？\n  - `#熟练#`\n  1. [S] .vscode 文件下通常使用 extensions.json 声明项目依赖插件；launch.json 配置 Debug 相关的配置；settings.json 用来覆盖本地用户的基本配置（文件隐藏、文件编码、格式化风格）\n\n### 容器\n\n---\n\n## 类库&生态（Libs & Ecosystem）\n\n### React\n\n- React 在 16.x 具体推出那些新特性？\n  - `#熟练#`\n  1. [M] (16.1) render 返回新增支持字符串和数组类型、Error Boundaries、React Dom Portal、Fiber、React.Fragment\n  2. [M] (16.3) createContext、createRef、forwardRef、生命周期函数更新\n  3. [M] (16.6) React.memo、React.lazy、React.Suspense、static getDerivedStateFromError、\n  4. [M] (16.7) React Hooks（useState、useEffect、useMemo、useCallBack、useContext）\n  5. [M] (16.8) React Concurrent Rendering\n- React 在 17.x 推出的新特性？\n  - `#熟练#`\n- React 在目前的 18.x 推出的新特性？\n  - `#熟练#`\n- 简单说明下为何两个不同版本的 React 不能运行在一个全局上下文？\n  - `#熟练#`\n\n### Ecosystem\n\n- React 运行时生态类库？\n  - `#熟练#` `#Ecosystem#` `#初始化#`\n  1. [M] Official：react、react-dom、react-update、react-refresh、react-reconciler\n  2. [M] State & Flow：@reduxjs/toolkit、redux、redux-saga、mobx、iflux2 & plume2、dva\n  3. [M] Hooks：ahooks、react-use、react-query\n  4. [M] UI：antd、rc-\\*(antd core)、antd-mobile、antd-pro\n  5. [M] Styles：styled-components、classnames\n  6. [M] Router：react-router、react-router-dom、redux-router\n  7. [S] Framework：umi\n  8. [S] CLI & Layer：vite、create-react-app\n  9. [S] Analytics：react-ga、@sentry/react\n  10. [S] Draggable：react-dnd、react-draggable\n  11. [S] Charts：echarts、AntV\n  12. [P] SSR & SSG：next.js、gatsby\n  13. [P] I18n：react-intl\n  14. [P] Async Load：react-loadable、react-script\n  15. [P] Long List：react-virtualized、react-windows、react-scroll、react-infinite-scroller\n  16. [P] Docs：storybook、huge\n- Taro 生态类库？\n  1. Official：@tarojs/ taro、@tarojs/ runtime、@tarojs/ react、@tarojs/ components\n  2. [M] Tracing：umtrack-alipay、umtrack-wx\n  3. [M] CLI：@tarojs/ cli、@tarojs/ mini-runner、@tarojs/ plugin-inject、@tarojs/ webpack-runner\n- Electron 生态类库？\n  1. [M] Official：electron、electron-log\n  2. [M] Release & Deploy：electron-builder、electron-packager、electron-updater、electron-reload、electron-notarize\n  3. [M] Development：electron-debug\n  4. [S] Compiler：electron-rebuild、node-gyp\n  5. [M] System：getmac、systeminformation、ip\n  6. [S] Devices：usb、escpos\n  7. [S] Version Manage：semver\n- React Native 生态类库？\n  1. [M] Official：react、react-native\n  2. [M] Navigator：react-navigation、native-navigation\n  3. [M] Data Storage：realm、sqlite3、react-native-storage\n  4. [M] Scrollable：react-native-scrollable-tab-view、\n  5. [M] Devices：react-native-camera\n  6. [M] Logs：\n  7. [M] UI：ant-design-mobile\n  8. [M] Performance：sentry、\n  9. [M] Debugging：chrome-dev-tools、flipper\n  10. [M] Testing：enzyme、detox、jest\n  11. [S] Notification：jpush\n- CSS 类库（CSS Tools）？\n  1. [S] Resets：normalize.css、reset.css、reset-css\n  2. [S] Animate：animate.css\n  3. [S] Charts：charts.css\n  4. [S] Productor：ant.design、semi.design\n- 前端项目运行时生态类库？\n  1. [S] Validator：joi、async-validator、yup\n  2. [S] Testing：mocha、jest、cypress、enzyme\n  3. [S] Assertion：chai\n- 前端项目开发时生态类库？\n  1. [M] Request：axios、isomorphic-fetch\n  2. [M] Polyfill：core-js\n  3. [S] Data：immutable、immer、deepmerge\n  4. [M] Date：moment、day.js\n  5. [S] Testing：jest、mocha、jasmine\n  6. [S] Assertion：chai、assert\n  7. [S] Utils：lodash、underscore\n  8. [S] E2E：cypress、enzyme\n  9. [S] Command：commander\n- 前端项目编译时生态类库？\n  1. [S] Compiler：babel、tsc、esbuild\n  2. [S] Bundled：webpack、rollup、parser\n  3. [S] Unbundled：snowpack、vite\n  4. [S] Mangler & Compressor：terser、javascript-obfuscator、uglify-js、babel-minify\n  5. [S] CLI & Boilerplate：create-react-app、vite\n\n### 数据流\n\n- 简单描述下单向数据流（flux）？\n  - `#熟练#`\n- 如何简单实现一个不可变数据类型？\n  - `#熟练#`\n  1. [M] 采用 ES6 Proxy & Reflect 代理 get | set | apply 行为，以及 DeepCopy\n\n### SSR & SSG\n\n- CSR、SSR、BSR 以及 SSG 之间的区别与优劣？\n  - `#了解#` `#SEO#` `#前后端同构#` `#白屏#` `#性能优化#`\n  1. [M] CSR（Client Side Rendering）客户端渲染；\n  2. [M] SSR（Server Side Rendering）服务端渲染；\n  3. [M] SSG（Static Site Generation）静态站点生成；\n- 有那些常用的 SSR & SSG 框架，如何简单实现 SSR？\n  - `#熟练#`\n  1. [S] Next.js、Gatsby\n\n### Node BFF\n\n- 简单描述下对 Egg 的理解？\n  - `#了解#`\n  1. [M] Egg 是已 Koa 为内核，遵循约定大于配置的 Web 框架；所有功能基于插件形式完成拓展；\n- 简单描述下 Koa 洋葱模型的实现原理？\n  - `#熟练#`\n- 简单描述下 Egg Loader 的加载顺序？\n  - `#熟练#`\n  1. [M] framework > middleware > plugin > app（router > service > controller）\n- NestJS 中 IoC 的实现机制？\n  - `#熟练#`\n  1. [M] 基于 reflect-metadata 的提供的 definedMetadata | getMetadata & Decorator 的能力对类、类的成员、类的方法、类方法参数进行的注释；并在编译器提取了对应 meta 信息并实例化 ；\n\n---\n\n## 跨端技术\n\n### 微信小程序\n\n- 简述一下常用的生命周期\n  - `#了解#`\n  1. [M] onLoad：页面加载，调一次；onShow：页面显示，每次打开页面都调用；onReady：初次渲染完成，调一次；onHide：页面隐藏，当 navigateTo 或底部 tab 切换时调用；onUnload：页面卸载，当 redirectTo 或 navigateBack 时调用；\n- 简单描述下小程序的工作原理？\n  - `#熟练#`\n  1. [S] 小程序分为两个部分 webview 和 appService，webview 用来展现 UI，appService 用来处理业务逻辑、数据及接口调用，它们在两个进程中运行，通过系统层 JSBridge 实现通信，完成 UI 渲染、事件处理。\n- 小程序双线程架构原理？\n  - `#精通#`\n  1. [S] 小程序应用是基于双线程模型的，渲染层通过 Webview 作为渲染载体；逻辑层则通过 JsCore 来作为 JS 运行时；\n\n### 多端统一\n\n- 简单描述下 Taro3.0 原理？\n  - `#熟练#`\n  1. [S] Taro3.0 从编译型转向了运行时架构\n  2. [S] 在运行时模拟实现了 DOM、BOM API，使得前端架构可以运行在小程序运行时环境中\n\n### Node\n\n- require 的模块加载机制？\n  - `#熟练#`\n  1. [M] 先计算模块路径；如果模块在缓存里面，取出缓存；加载模块的输出模块的 exports 属性即可\n- 线上如何排查问题？\n  - `#熟练#`\n  1. [M] Sentry 监控；\n  2. [S] 全链路式日志，需要借助 apm 工具，opentracing，zipkin 等；\n  3. [S] 阿里云 alinode；\n\n### Electron\n\n- 简单描述下对 Electron 的理解？\n  - `#了解#`\n  1. [S] Electron 是一个可以使用 Web 技术（JS、HTML、CSS）来创建跨平台原生桌面应用的框架。借助 Node API 可以使用纯 JS 来调用丰富的原生 API。\n- 简单描述下 Electron 的进程模型和以及各自的职责？\n  - `#了解#`\n  1. [S] Main Process 主进程：进程间通信（IpcMain、webContent）、窗口管理、Node Add-on 暴露、全局事务（应用生命周期、session）；\n  2. [S] Renderer Process 渲染进程：负责 web 页面容器构建渲染、业务处理；\n- 解释下 Electron 构建时为何需要 Rebuild？\n  - `#熟练#`\n  1. [P] Electron 内置了 V8 和 Node，而部分 Node 能力是通过 C++ Add-on 实现的；在构建 Electron 应用时，需要针对这些 Add-on 按 Node 版本、Electron 版本、OS Platform、CPU Arch 重新进行编译；\n\n### Native\n\n### Hybrid Web APP\n\n- 如何解决移动端 Web 点击时间的延迟？\n  - `#了解#`\n  1. [M] `<meta />` 标签禁用网页缩放、FastClick\n\n---\n\n## 研发链路（Lint & Compile & Builder & Package）\n\n### 初始化\n\n- 如何重装 Node 环境（以 Mac 环境为例）？\n  1. [P] 借助 npkill 对本地 node_modules 进行清理\n\n### 包管理\n\n- 简单列出一些常用的 CLI 工具或者 Boilerplate？\n  - `#熟练#`\n  1. [S] create-react-app、vite\n- 简单列出常用的包管理工具？\n  - `#熟练#`\n  1. [M] npm（.npmrc、.npmignore、package.json、package-lock.json）、yarn（.yarnrc、yarn.lock）、pnpm（pnpm-lock.yaml）、tnpm；\n  2. [S] nvm、npx（npm 5.2+ 内置；相当于提供两个 bin）\n- 简单列出常用的 NPM 命令？\n  - `#熟练#` `#工程化#` `#脚手架#` `#命令行#`\n  1. [M] `npm i|install|uninstall` `npm run` `npm help` `npm init` `npm publish|unpublish` `npm start|restart` `npm info` `npm list` `npm view|version`\n  2. [S] `npx` `npm config` `npm link` `npm rebuild` `npm clean` `npm run-script` `npm whoami` `npm login|logout` `npm docs` `npm adduser`\n  3. [S] run-scripts hook `pre & post`\n- 简单描述下 NPM 安装依赖的大致过程？\n  - `#熟练#`\n  1. [S] 检查配置（项目 .npmrc、全局用户 .npmrc）;\n  2. [S] 确定依赖版本，构建依赖树；package.json 优先 package-lock.json；\n  3. [S] 下载包资源；首先查询本地是否存在缓存版本，如没有则下载并添加本地缓存，并将包解压到项目 node_modules 下；\n  4. [S] 生成 lockfile 文件（npm 5.x+）；\n- 简单描述下 NPX 的大致流程？\n  - `#熟练#` `#脚手架#` `#命令行#`\n  1. [M] `npx` 命令是 `npm i xx --global & .bin/xx` 的快捷方式\n- NPM Package Version 遵循了什么协议，并简单说明该协议？\n  - `#熟练#`\n  1. [M] 遵循了 SemVer2.0 协议规范；x.y.z-{pre-release}；\n  2. [S] `{major}.{minor}.{patch}` Major 表示不兼容的修改，Minor 表示向下兼容的新增特性，Patch 表示向下兼容的问题修复；\n  3. [P] NPM 命令在不满足 SemVer2.0 规范的 Package.json 下无法执行；\n- 公共类库如何处理即将弃用的功能（API、组件、模块、依赖）？\n  - `#熟练#` `#组件化#` `#开源项目#`\n  1. [M] 更新说明文档以及类型描述文件让使用者知道这个 Break Change；\n  2. [S] 在某个阶段的 Minor 版本持续进行 Warning 级别提示（一般跨域一整个 Major），然后在下个 Major 版本移除；\n- 封装一个类库时应该遵循哪条基本原则？\n  - `#熟练#` `#开源项目#`\n  1. DRY\n\n### 规范标准\n\n- JavaScript 基本编码规范\n  - `#熟练#` `#代码洁癖#` `#强迫症#`\n  1. [M] `=== !==` 代替 `== !=`；不要在对象原型（`Array.prototype|Date.prototype`）上添加自定义方法；for | if 语句使用大括号；代码中的地址时间等使用常量替代；不使用 `var` 声明变量；\n  2. [M] 使用大驼峰法对组件&类命名，使用小驼峰法来对变量&函数名命名\n\n### 调试\n\n- H5 页面的调试手段？\n  - `#了解#`\n  1. [M] 微信开发者工具\n  2. [S] vsconsole\n\n### 编译&构建\n\n- 前端项目常用构建工具\n  - `#了解#`\n  1. [M] Webpack、Babel；\n  2. [S] Vite、Parcel、Rollup、TSC；\n  3. [P] EsBuild、Snowpack；\n- Webpack 基本原理以及构建流程\n  - `#熟练#` `#实现原理#`\n  1. [M] Webpack 是一个静态模块打包工具；讲所需要的模块组合成一个或多个 bundles 用与浏览器、Node 或者 Electron 使用；\n  2. [S] 代码字符串 > AST > Transform > AST(Low) > 代码字符串；\n- 简单描述下 Vite 的特性原理，为何快？\n  - `#熟练#` `#实现原理#`\n  1. [S] Vite 在开发时采用 Esbuild 作为 模块构建器\n\n### 测试\n\n- 常用的测试框架？\n  - `#了解#`\n  1. [M] UT：Jest、Mocha\n  2. [S] E2E：Selenium、Cypress、Puppeteer\n\n### 发布\n\n- 前端项目如何构建一个标准包？\n  - `#了解#`\n  1. [S] 在配置的依赖均倒置，运行时通过宿主来提供环境注入（global 对象、script 提供 config）；\n\n### 监控\n\n- 简单列出常用的前端数据监控的类库？\n  - `#了解#`\n  1. [S] @sentry/react、fundebug、ARMS、umeng\n- 简单描述下前端数据采集及其基本原理？\n  - `#了解#`\n  1. [S] 数据采集通常分为：环境信息、性能信息、异常信息、业务信息（交互数据、业务异常）\n  2. [S] 事件委托\n\n---\n\n## 性能&安全（Performance & Security）\n\n### 性能指标\n\n- 简单列出常用的前端 Web 应用的性能指标？\n  - `#熟练#`\n  1. [S] First Contentful Paint(FCP) 首次内容绘制、Largest Contentful Paint (LCP) 最大内容绘制、First Input Delay(FID) 首次输入延迟；\n  2. [P] First Paint(FP) 首次绘制、First Meaningful Paint(FMP) 首次有效绘制、Cumulative Layout Shift(CLS) 累积布局偏移、Time to Interactive(TTI) 可交互时间、DOMContentLoaded(DCL)、Load(L)；\n- 简单描述下性能指标的采集原理（exp. FCP、LCP、FID）？\n  - `#精通#` `#性能优化#` `#实现原理#`\n  1. [S] 通过 Performance Observer API 采集；\n  2. [S] 性能监测相关 API：Paint Timing、Event Timing、Navigation Timing、Paint Timing；\n\n### 性能评估\n\n- 简单列出常用的 Web 应用性能评估（采集）工具？\n  - `#了解#`\n  1. [M] Chrome DevTools、React DevTools\n  2. [P] Lighthouse、WebPageTest、Relyzer\n- 如果使用 React 开发的页面响应慢，有那些检测手段？\n  - `#了解#`\n  1. [M] console.time、timeEnd 埋点\n  2. [M] 借助 React DevTools 可以查看每个组件的渲染和重绘耗时\n\n### 性能优化\n\n- 常用的性能优化手段？\n  - `#熟练#`\n  1. [M] 代码压缩：Code Splitting、Tree-Shaking、Gzip\n  2. [M] 修改加载策略\n  3. [M] 执行自定义渲染\n  4. [S] 体验优化（加载动画、骨架图）\n  5. [S] DNS 预获取\n- 常见的 JS 代码压缩工具及其简单原理？\n  - `#熟练#` `#性能优化#` `#页面优化#` `#构建优化#`\n  1. [M] uglifyjs、terser\n- 简单描述下 Tree-Shaking 及其原理和使用建议？\n  - `#熟练#` `#性能优化#` `#页面优化#`\n- 常见的 JS 延迟加载方式？\n  - `#熟练#`\n  1. [M] `<script defer/>` defer 属性、`<script async />` async 属性、动态创建 DOM、使用 setTimeout 延迟、JS 写在 DOM 文档底部\n- 微信小程序常用的优化手段？\n  - `#熟练#`\n  1. [M] 代码包大小优化分包，独立包，分包预下载；\n  2. [M] 首页渲染优化，预加载，骨架图避免白屏；\n  3. [M] 渲染优化，setData 增量更新，延迟加载，避免一个原子操作大量计算阻塞 ui；\n- 如何优化一个前端巨石应用（）；\n  - `#熟练#` `#前端架构#` `#性能优化#`\n  - [M] Code Splitting、Lazy Loader；\n  - [S] 微前端架构；\n\n### 源码安全\n\n- 保护前端 JS 的源码的常见手段？\n  - `#熟练#`\n  1. [M] 代码压缩（uglifyjs）；\n  2. [M] 生产环境不得上传 SourceMap；\n  3. [S] 代码混淆 （Terser）；\n- CSRF / XSRF（跨站请求伪造）\n  - `#熟练#`\n  1. [S] HTTP 协议中使用 Referer 属性来确定请求来源进行过滤（禁止外域）\n  2. [S] 请求地址添加 token ，使黑客无法伪造用户请求\n  3. [S] HTTP 头自定义属性验证（类似上一条）\n  4. [S] 敏感操作显示验证方式：添加验证码、密码等\n\n### Web 安全\n\n---\n\n## 工程化\n\n### 工程体系\n\n- 前后端分离的本质？\n  - `#熟练#`\n  1. [M] 职责分明，将服务端业务逻辑和前端视觉进行分离，互设边界；\n  2. [M] 前端项目越来越复杂，需要规范流程和引入标准的工程体系。\n\n### 微前端\n\n- 业界常用的微前端框架？\n  - `#了解#` `#前端框架#`\n  1. [M] single-spa、蚂蚁 qiankun.js\n  2. [S] 京东 micro-app、字节 garfish\n  3. [P] modern.js、magix、飞冰 icestark、WidgetJS、ara framework、luigi、emp\n- 简单描述下 Qiankun 的工作原理？\n  - `#熟练#`\n  1. [M] single-spa、蚂蚁的 qiankun.js\n- Qiankun 的子应用配置，为何需要构建 UMD 包？\n  - `#熟练#`\n  1. [M] 子应用 webpack entry 提供 `target:umd` 以及\n  2. [S] 子应用\n- 微前端框架常用的 CSS 隔离方式？\n  - `#熟练#`\n  1. [P] 自定义标签，以及标签 name 配合选择器\n\n### 低代码\n\n- 简单描述下对 JSON-Schema 协议的理解？\n- 如何处理表单的关联逻辑？\n\n### Bundleless\n\n### CI\\CD\n\n- 简单列出前端常用的构建平台？\n  - `#了解#`\n  1. [M] Jenkins、Travis CI\n\n### 综合能力\n","source":"_posts/frontend-engineer-tech-qa.md","raw":"---\nlayout: post\ntitle: 前端工程师 Tech Q&A\ndate: 2021-11-22\ntags:\n  - article\n  - frontend\n---\n\n# 前端工程师 Tech Q&A\n\n## 级别标准\n\n- P3：实习开发、功能开发\n- P4：主要开发、功能模块独立开发\n- P5：项目负责人、核心开发、技术问题总结者、技术分享、人员培养\n- P6：团队负责人、问题终结者、跨组沟通&协调资源、团队培养提升\n\n## References\n\n> 如下所列前端工程师所涉及**领域**；\n> 领域（子领域）设置**题目**若干；\n> 题中包含**标签**（涉及深度、提问触发词）& **答题点**（必知 **M**ust know、应知 **S**hould to know、可知 **P**osibility）\n\n- 语言：JavaScript、ECMAScript、TypeScript、HTML、CSS\n- 框架&环境：浏览器、研发工具、容器、框架通识\n- 类库&库生态：React、Libs Ecosystem、数据流、SSR & SSG、BFF\n- 跨端技术：微信小程序、多端统一、Node、Electron、Native、Hybrid\n- 研发链路：初始化、包管理、规范标准、调试、编译、构建、测试、发布、监控\n- 性能&安全：性能指标、性能评估、性能优化、源码安全、Web 安全\n- 工程化：工程体系、微前端、低代码、Bundleless、CI\\CD、综合能力\n\n## 语言（Lang & DSL）\n\n### JavaScript\n\n- 简单聊聊 JavaScript 这门语言？\n  - `#了解#`\n  1. 「M」在实现层面：分为语言标准（ECMAScript 是语言标准，JavaScript 只是标准的实现）+ 语言宿主环境（对象模型、WebAPI、N\u001dode Api、WX）；\n  2. 「S」语言标准提供语法、词法、基本类型、表达式、语句等；宿主环境提供内置对象、标准模块；\n  3. 「P」语法借鉴 C & Java、数据结构借鉴 Java、原型借鉴 Self、函数用法借鉴 Schema、正则借鉴 Perl ；\n- JavaScript 中有那些常见的内置对象，由谁提供?\n  - `#了解#`\n  1. 「M」值：NaN、undefined、null、Infinity；函数：eval、parseInt、parseFloat；对象：Object、Function、Boolean、Symbol、Error；数字和日期：Math、Date、Number；字符串：String、RegExp；集合：Array、Map、WeakMap、Set、WeakSet；控制对象：Promise、Generator；反射：Proxy、Reflect；\n  2. [S] 内置对象是在程序执行时存在全局作用域的一些 JS 定义的值、函数、对象；\n- JavaScript 代码在运行时，有那些常见的执行上下文？\n  - `#熟练#`\n  1. 「M」函数执行上下文；\n  2. [S] 全局执行上下文、eval 执行上下文；\n- JavaScript 通用模块规范，并描述其基本的区别？\n  - `#熟练#` `#模块化#`\n  1. 「M」CommonJS、AMD、CMD、UMD、ESM；\n  2. 「M」CommonJS 通过 require 引入模块、module.export 输出对象和接口。运行时加载，输出值的拷贝；\n  3. 「M」ESM 通过 import 引入模块，export 输出模块；编译期输出接口，输出值的引用；浏览器支持原生 ESM ，但只能在 `<script type=\"module\" />` 内使用；\n  4. [S] AMD 和 CMD 均为异步加载模块，分别由 require.js 和 sea.js 提供实现；AMD 依赖前置，CMD 就近依赖；\n  5. [S] UMD 是对 CommonJS、AMD 的整合；\n- JavaScript 这门语言是否有反射能力？ES6 为了增强这种能力又推出那些新特性？\n  - `#精通#` `#编程范式#` `#元编程#` `#反射#` `#Proxy#` `#Reflect#` `#数据劫持#`\n  1. [S] 反射是实现元编程的一种方式；JS 诞生之初就有反射能力；eval、Object.{create|defineProperties|defineProperty}、Function.{apply|bind} 均属于反射的一些实现；\n  2. [S] ES6 Proxy & Reflect 作为反射的两个分支（Self-Modification & Intercession）实现；defineProperty 数据劫持有缺陷；规范语言，对之前 Object & Function 原型链上的方法进行规范化；\n  3. [S] 为 JS 之后更多的反射行为提供良好支撑；\n  4. [P] ES7 推出了 Reflect MetaData 提案，增强了反射覆盖场景；\n- 简单描述闭包及其使用场景？\n  - `#熟练#` `#语言特性#` `#模块化#`\n  1. [M] 指有权限访问另外一个函数作用域中变量的函数；其本质是作用域链的特殊应用；\n  2. [S] 创建私有变量；通过闭包对上下文中变量的引用，防止其被 GC 回收（易引发内存溢出）；\n\n### ECMAScript\n\n- ECMAScript2017（ES8） 中新增的 Symbol 有何用处？\n  - `#熟练#`\n  1. [M] 用来表示一个独一无二的变量防止命名冲突\n- ECMAScript2015（ES6） 之后的版本有那些新特性？\n  - `#熟练#` `#语言特性#` `#ESNext#`\n  1. [S] ES7：Reflect MetaData（提案）、Array includes、`**`运算符；\n  2. [S] ES8：async&await、Object values|entries、String padding、Object.getOwnPropertyDescriptors、SharedArrayBuffer；\n  3. [S] ES9：异步迭代、Promise.finally、正则；\n  4. [S] ES10：Array flat、String trim 函数、Symbol Description、catch 绑定、Function toString 支撑转注释、BigInt；\n  5. [M] ES11：Option Chaining(`?.`)、Nullish Coalescing(`??`)、Private Fields(`#`)、Top Level Await、Dynamic Import、globalThis；\n  6. [S] ES12：String replaceAll、Promise.any、`??= ||= &&=`、WeakRefs、`123_456_789` 数字分隔符；\n- ECMAScript Next（ESNext）中的新特性？\n  - `#精通#` `#ECMA#` `#ESNext#` `#前沿#` `#语言新特性#`\n  1. [S] Class instance fields、Static class fields、Private instance methods、Private instance fields、Private static methods、Private static fields、Ergonomic brand checks、Import assertions、Class static blocks\n  2. [P] Hashbang grammar、Top-level await、Arbitrary module namespace identifiers、\n- 简单列出目前 ECMAScript 处于 Stage（4 & 3 & 2） 阶段的提案？\n  - `#精通#` `#ECMA#`\n  1. [P] Error Cause（首个由中国团队”阿里淘宝”提出并进入 state-4 阶段的提案）\n  2. [P] ESNext：Record、Tuple\n\n### TypeScript\n\n- 简单描述下 TypeScript 在项目中的作用？\n  - `#了解#`\n  1. [M] 是 JS 的超集，可以提前体验 ES Next 提案中的语法糖和特性\n  2. [M] 为 JS 添加类型支撑、JS 的语言超集、利于团队协作；极其强大的类型系统\n- 简单描述下 TypeScript 中常用的工具类型？\n  - `#了解#`\n  1. [S] `Partial<T>` `Required<T>` `Readonly<T>` `Pick<T, K>` `Omit<T, K>`\n- 简单描述下 tsconfig.json 中常用的配置项？\n  - `#熟练#`\n  1. [M] `compilerOptions.targer` `module` `lib` `outDir` `types` `paths` `sourceMap` `include` `exclude`\n- TypeScript 是名义类型还是结构类型？\n  - `#熟练#`\n  1. [S] 结构类型\n- 简单描述下 TypeScript 中 Interface 和 Type 的区别？\n  - `#熟练#`\n  1. [M] 均支持拓展（extends），interface 使用 `extends` 而 type 使用 `&` 类型合并；支持互相拓展；\n  2. [S] type 支持类型别名，联合类型，元组；interface 支持声明合并；在使用过程中尽可能先使用 interface；\n\n### HTML\n\n- 简单列出项目中 HTML 常用的 Meta 标签？\n  - `#了解#` `#浏览器#` `#HTML#`\n  1. [M] `<meta charset=\"utf-8\" />`\n  2. [S] SEO 优化 `<meta name=“description\" contents=“xx,xx”/>`\n  3. [S] SEO 优化 `<meta name=“keywords\" contents=“xx,xx”/>`\n  4.\n- 简单列出项目中 HTML 常用的 Link 标签？\n  - `#了解#` `#浏览器#` `#HTML#`\n  2. [M] `<link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"..\">`\n  3. [M] CSS 外链 `<link rel=\"stylesheet\" href=\"...\">`\n  4. [S] 域名 DNS 预请求 `<link rel=\"dns-prefetch\" href=\"...\" />`\n- 简单描述下 DOM 和 BOM 对象？\n  - `#了解#` `#浏览器#` `#宿主对象#`\n  1. [M] DOM 是文档对象模型，把文档当做为一个对象，定义和处理文档内容的方法和接口；比如 `document`\n  2. [M] BOM 对浏览器对象模型，将浏览器作为一个对象，定义和处理与浏览器交互的方法和接口；比如 `window` `location` `navigator` `screen`\n- 简单描述下事件委托，及其优势和运用场景？\n  - `#熟练#` `#浏览器原理#` `#事件#`\n  1. [M] 利用浏览器事件冒泡机制；在父节点定义监听事件，由父节点监听函数统一处理多个子元素冒泡传过来的事件；\n  2. [S] 减少内存消耗，实现事件的动态绑定；常常运用在各种 UI 事件绑定类库和数据埋点；\n\n### CSS\n\n- 常用单位以及其区别？\n\n  - `#了解#`\n\n  [M] px、em、rem、%、vw、vh\n\n2. [M] px 为屏幕的像素点，em 是父元素的 font-size（默认 16px），vw 为视窗宽度的 1%，vh 为视窗高度的 1%；\n\n- 常用的 CSS 预处理库？\n- `#了解#`\n\n1. [M] Less、Sass\n2. [P] PostCSS、Stylus\n\n- Less & Sass(SCSS) 的区别和各自的优缺点？\n- `#了解#`\n\n1. [M] 区别：在与变量的声明、实现方式（语言不同，Less 基于 JS，Sass 基于 Ruby，当然也有 node-sass 的实现）\n2. [S] Less 兼容性好，但是不支持循环判断等；Sass 用户基础大，支持函数对象循环判断等，但是依赖于 Ruby 安装容易报错；\n\n- 常用的 CSS 架构、规范？\n- `#熟练#`\n\n1. [S] BEM、CSS Modules\n\n- 常用的 CSS in JS？\n- `#熟练#`\n\n1. [S] styled-components、TailwindCSS\n\n- 通用的浏览器 CSS 差异标准化方案？\n- `#熟练#` `#兼容性#` `#初始化#`\n\n1. [S] 引入 normalize.css 或者 reset.css\n\n---\n\n## 框架&环境（Frame & VM）\n\n### 浏览器\n\n- 浏览器事件触发时，其传播的阶段？\n  - `#了解#`\n  1. [M] Capturing（捕获） > Target（目标触发） > Bubbling（冒泡）\n- Cookie、localStorage 以及 sessionStorage 之间的区别？\n  - `#了解#`\n  1. [M] Cookie：保存在客户端的数据，记录你在网页的一些行为数据。 sessionStorage：保存在客户端的数据，生命周期是同源同窗口，只要该窗口没有关闭就一直可用共享。 localStorage：保存在客户端的数据，一直有效；\n  2. [S] Cookie size <= 4Kb；Storage size <= 5Mb；\n- 浏览器出于安全提出了同源策略，何种情况下会引发跨域以及通用解决办法？\n  - `#了解#`\n  1. [M] 域名、子域名、端口号、协议不同均不属于一个域；\n  2. [S] jsonp、documents.domain + iframe、CORS、iframe + postMessage、websocket；\n  3. [S] 处于一级域名下的应用可以设置 document.domain 在相同父域，可以获取 cookie；\n- 简单说明 JSONP 的原理，及其局限性？\n  - `#了解#`\n  1. [M] 利用了`<script>`标签没有跨域限制，可以发起 get 请求；\n  2. [S] 兼容性较好，但仅限于 Get 请求；\n- 简单描述下浏览器的渲染机制？\n  - `#熟练#`\n  1. [S] 处理 HTML 文档构建 DOM 树、处理 CSS 文档构建 CSSOM 树、DOM 与 CSSOM 合并为渲染树；\n- 简单描述下浏览器的缓存机制？\n  - `#熟练#`\n  1. [S] 浏览器缓存分为强缓存和协商缓存；\n  2. [P] 强缓存直接从浏览器中获取资源，通过请求头 `Cache-Control` 控制；协商缓存先访问服务缓存是否过期，在决定是否使用本地资源，通过请求头控制；\n\n### 研发工具\n\n- 如何将项目的格式化进行统一？\n  - `#熟练#`\n  1. [S] 使用 .editorconfig 定义代码格式化风格；或者提交 .vscode settings.json 约束项目；\n- 常用的 VS Code Editor 配置？\n  - `#熟练#`\n  1. [S] .vscode 文件下通常使用 extensions.json 声明项目依赖插件；launch.json 配置 Debug 相关的配置；settings.json 用来覆盖本地用户的基本配置（文件隐藏、文件编码、格式化风格）\n\n### 容器\n\n---\n\n## 类库&生态（Libs & Ecosystem）\n\n### React\n\n- React 在 16.x 具体推出那些新特性？\n  - `#熟练#`\n  1. [M] (16.1) render 返回新增支持字符串和数组类型、Error Boundaries、React Dom Portal、Fiber、React.Fragment\n  2. [M] (16.3) createContext、createRef、forwardRef、生命周期函数更新\n  3. [M] (16.6) React.memo、React.lazy、React.Suspense、static getDerivedStateFromError、\n  4. [M] (16.7) React Hooks（useState、useEffect、useMemo、useCallBack、useContext）\n  5. [M] (16.8) React Concurrent Rendering\n- React 在 17.x 推出的新特性？\n  - `#熟练#`\n- React 在目前的 18.x 推出的新特性？\n  - `#熟练#`\n- 简单说明下为何两个不同版本的 React 不能运行在一个全局上下文？\n  - `#熟练#`\n\n### Ecosystem\n\n- React 运行时生态类库？\n  - `#熟练#` `#Ecosystem#` `#初始化#`\n  1. [M] Official：react、react-dom、react-update、react-refresh、react-reconciler\n  2. [M] State & Flow：@reduxjs/toolkit、redux、redux-saga、mobx、iflux2 & plume2、dva\n  3. [M] Hooks：ahooks、react-use、react-query\n  4. [M] UI：antd、rc-\\*(antd core)、antd-mobile、antd-pro\n  5. [M] Styles：styled-components、classnames\n  6. [M] Router：react-router、react-router-dom、redux-router\n  7. [S] Framework：umi\n  8. [S] CLI & Layer：vite、create-react-app\n  9. [S] Analytics：react-ga、@sentry/react\n  10. [S] Draggable：react-dnd、react-draggable\n  11. [S] Charts：echarts、AntV\n  12. [P] SSR & SSG：next.js、gatsby\n  13. [P] I18n：react-intl\n  14. [P] Async Load：react-loadable、react-script\n  15. [P] Long List：react-virtualized、react-windows、react-scroll、react-infinite-scroller\n  16. [P] Docs：storybook、huge\n- Taro 生态类库？\n  1. Official：@tarojs/ taro、@tarojs/ runtime、@tarojs/ react、@tarojs/ components\n  2. [M] Tracing：umtrack-alipay、umtrack-wx\n  3. [M] CLI：@tarojs/ cli、@tarojs/ mini-runner、@tarojs/ plugin-inject、@tarojs/ webpack-runner\n- Electron 生态类库？\n  1. [M] Official：electron、electron-log\n  2. [M] Release & Deploy：electron-builder、electron-packager、electron-updater、electron-reload、electron-notarize\n  3. [M] Development：electron-debug\n  4. [S] Compiler：electron-rebuild、node-gyp\n  5. [M] System：getmac、systeminformation、ip\n  6. [S] Devices：usb、escpos\n  7. [S] Version Manage：semver\n- React Native 生态类库？\n  1. [M] Official：react、react-native\n  2. [M] Navigator：react-navigation、native-navigation\n  3. [M] Data Storage：realm、sqlite3、react-native-storage\n  4. [M] Scrollable：react-native-scrollable-tab-view、\n  5. [M] Devices：react-native-camera\n  6. [M] Logs：\n  7. [M] UI：ant-design-mobile\n  8. [M] Performance：sentry、\n  9. [M] Debugging：chrome-dev-tools、flipper\n  10. [M] Testing：enzyme、detox、jest\n  11. [S] Notification：jpush\n- CSS 类库（CSS Tools）？\n  1. [S] Resets：normalize.css、reset.css、reset-css\n  2. [S] Animate：animate.css\n  3. [S] Charts：charts.css\n  4. [S] Productor：ant.design、semi.design\n- 前端项目运行时生态类库？\n  1. [S] Validator：joi、async-validator、yup\n  2. [S] Testing：mocha、jest、cypress、enzyme\n  3. [S] Assertion：chai\n- 前端项目开发时生态类库？\n  1. [M] Request：axios、isomorphic-fetch\n  2. [M] Polyfill：core-js\n  3. [S] Data：immutable、immer、deepmerge\n  4. [M] Date：moment、day.js\n  5. [S] Testing：jest、mocha、jasmine\n  6. [S] Assertion：chai、assert\n  7. [S] Utils：lodash、underscore\n  8. [S] E2E：cypress、enzyme\n  9. [S] Command：commander\n- 前端项目编译时生态类库？\n  1. [S] Compiler：babel、tsc、esbuild\n  2. [S] Bundled：webpack、rollup、parser\n  3. [S] Unbundled：snowpack、vite\n  4. [S] Mangler & Compressor：terser、javascript-obfuscator、uglify-js、babel-minify\n  5. [S] CLI & Boilerplate：create-react-app、vite\n\n### 数据流\n\n- 简单描述下单向数据流（flux）？\n  - `#熟练#`\n- 如何简单实现一个不可变数据类型？\n  - `#熟练#`\n  1. [M] 采用 ES6 Proxy & Reflect 代理 get | set | apply 行为，以及 DeepCopy\n\n### SSR & SSG\n\n- CSR、SSR、BSR 以及 SSG 之间的区别与优劣？\n  - `#了解#` `#SEO#` `#前后端同构#` `#白屏#` `#性能优化#`\n  1. [M] CSR（Client Side Rendering）客户端渲染；\n  2. [M] SSR（Server Side Rendering）服务端渲染；\n  3. [M] SSG（Static Site Generation）静态站点生成；\n- 有那些常用的 SSR & SSG 框架，如何简单实现 SSR？\n  - `#熟练#`\n  1. [S] Next.js、Gatsby\n\n### Node BFF\n\n- 简单描述下对 Egg 的理解？\n  - `#了解#`\n  1. [M] Egg 是已 Koa 为内核，遵循约定大于配置的 Web 框架；所有功能基于插件形式完成拓展；\n- 简单描述下 Koa 洋葱模型的实现原理？\n  - `#熟练#`\n- 简单描述下 Egg Loader 的加载顺序？\n  - `#熟练#`\n  1. [M] framework > middleware > plugin > app（router > service > controller）\n- NestJS 中 IoC 的实现机制？\n  - `#熟练#`\n  1. [M] 基于 reflect-metadata 的提供的 definedMetadata | getMetadata & Decorator 的能力对类、类的成员、类的方法、类方法参数进行的注释；并在编译器提取了对应 meta 信息并实例化 ；\n\n---\n\n## 跨端技术\n\n### 微信小程序\n\n- 简述一下常用的生命周期\n  - `#了解#`\n  1. [M] onLoad：页面加载，调一次；onShow：页面显示，每次打开页面都调用；onReady：初次渲染完成，调一次；onHide：页面隐藏，当 navigateTo 或底部 tab 切换时调用；onUnload：页面卸载，当 redirectTo 或 navigateBack 时调用；\n- 简单描述下小程序的工作原理？\n  - `#熟练#`\n  1. [S] 小程序分为两个部分 webview 和 appService，webview 用来展现 UI，appService 用来处理业务逻辑、数据及接口调用，它们在两个进程中运行，通过系统层 JSBridge 实现通信，完成 UI 渲染、事件处理。\n- 小程序双线程架构原理？\n  - `#精通#`\n  1. [S] 小程序应用是基于双线程模型的，渲染层通过 Webview 作为渲染载体；逻辑层则通过 JsCore 来作为 JS 运行时；\n\n### 多端统一\n\n- 简单描述下 Taro3.0 原理？\n  - `#熟练#`\n  1. [S] Taro3.0 从编译型转向了运行时架构\n  2. [S] 在运行时模拟实现了 DOM、BOM API，使得前端架构可以运行在小程序运行时环境中\n\n### Node\n\n- require 的模块加载机制？\n  - `#熟练#`\n  1. [M] 先计算模块路径；如果模块在缓存里面，取出缓存；加载模块的输出模块的 exports 属性即可\n- 线上如何排查问题？\n  - `#熟练#`\n  1. [M] Sentry 监控；\n  2. [S] 全链路式日志，需要借助 apm 工具，opentracing，zipkin 等；\n  3. [S] 阿里云 alinode；\n\n### Electron\n\n- 简单描述下对 Electron 的理解？\n  - `#了解#`\n  1. [S] Electron 是一个可以使用 Web 技术（JS、HTML、CSS）来创建跨平台原生桌面应用的框架。借助 Node API 可以使用纯 JS 来调用丰富的原生 API。\n- 简单描述下 Electron 的进程模型和以及各自的职责？\n  - `#了解#`\n  1. [S] Main Process 主进程：进程间通信（IpcMain、webContent）、窗口管理、Node Add-on 暴露、全局事务（应用生命周期、session）；\n  2. [S] Renderer Process 渲染进程：负责 web 页面容器构建渲染、业务处理；\n- 解释下 Electron 构建时为何需要 Rebuild？\n  - `#熟练#`\n  1. [P] Electron 内置了 V8 和 Node，而部分 Node 能力是通过 C++ Add-on 实现的；在构建 Electron 应用时，需要针对这些 Add-on 按 Node 版本、Electron 版本、OS Platform、CPU Arch 重新进行编译；\n\n### Native\n\n### Hybrid Web APP\n\n- 如何解决移动端 Web 点击时间的延迟？\n  - `#了解#`\n  1. [M] `<meta />` 标签禁用网页缩放、FastClick\n\n---\n\n## 研发链路（Lint & Compile & Builder & Package）\n\n### 初始化\n\n- 如何重装 Node 环境（以 Mac 环境为例）？\n  1. [P] 借助 npkill 对本地 node_modules 进行清理\n\n### 包管理\n\n- 简单列出一些常用的 CLI 工具或者 Boilerplate？\n  - `#熟练#`\n  1. [S] create-react-app、vite\n- 简单列出常用的包管理工具？\n  - `#熟练#`\n  1. [M] npm（.npmrc、.npmignore、package.json、package-lock.json）、yarn（.yarnrc、yarn.lock）、pnpm（pnpm-lock.yaml）、tnpm；\n  2. [S] nvm、npx（npm 5.2+ 内置；相当于提供两个 bin）\n- 简单列出常用的 NPM 命令？\n  - `#熟练#` `#工程化#` `#脚手架#` `#命令行#`\n  1. [M] `npm i|install|uninstall` `npm run` `npm help` `npm init` `npm publish|unpublish` `npm start|restart` `npm info` `npm list` `npm view|version`\n  2. [S] `npx` `npm config` `npm link` `npm rebuild` `npm clean` `npm run-script` `npm whoami` `npm login|logout` `npm docs` `npm adduser`\n  3. [S] run-scripts hook `pre & post`\n- 简单描述下 NPM 安装依赖的大致过程？\n  - `#熟练#`\n  1. [S] 检查配置（项目 .npmrc、全局用户 .npmrc）;\n  2. [S] 确定依赖版本，构建依赖树；package.json 优先 package-lock.json；\n  3. [S] 下载包资源；首先查询本地是否存在缓存版本，如没有则下载并添加本地缓存，并将包解压到项目 node_modules 下；\n  4. [S] 生成 lockfile 文件（npm 5.x+）；\n- 简单描述下 NPX 的大致流程？\n  - `#熟练#` `#脚手架#` `#命令行#`\n  1. [M] `npx` 命令是 `npm i xx --global & .bin/xx` 的快捷方式\n- NPM Package Version 遵循了什么协议，并简单说明该协议？\n  - `#熟练#`\n  1. [M] 遵循了 SemVer2.0 协议规范；x.y.z-{pre-release}；\n  2. [S] `{major}.{minor}.{patch}` Major 表示不兼容的修改，Minor 表示向下兼容的新增特性，Patch 表示向下兼容的问题修复；\n  3. [P] NPM 命令在不满足 SemVer2.0 规范的 Package.json 下无法执行；\n- 公共类库如何处理即将弃用的功能（API、组件、模块、依赖）？\n  - `#熟练#` `#组件化#` `#开源项目#`\n  1. [M] 更新说明文档以及类型描述文件让使用者知道这个 Break Change；\n  2. [S] 在某个阶段的 Minor 版本持续进行 Warning 级别提示（一般跨域一整个 Major），然后在下个 Major 版本移除；\n- 封装一个类库时应该遵循哪条基本原则？\n  - `#熟练#` `#开源项目#`\n  1. DRY\n\n### 规范标准\n\n- JavaScript 基本编码规范\n  - `#熟练#` `#代码洁癖#` `#强迫症#`\n  1. [M] `=== !==` 代替 `== !=`；不要在对象原型（`Array.prototype|Date.prototype`）上添加自定义方法；for | if 语句使用大括号；代码中的地址时间等使用常量替代；不使用 `var` 声明变量；\n  2. [M] 使用大驼峰法对组件&类命名，使用小驼峰法来对变量&函数名命名\n\n### 调试\n\n- H5 页面的调试手段？\n  - `#了解#`\n  1. [M] 微信开发者工具\n  2. [S] vsconsole\n\n### 编译&构建\n\n- 前端项目常用构建工具\n  - `#了解#`\n  1. [M] Webpack、Babel；\n  2. [S] Vite、Parcel、Rollup、TSC；\n  3. [P] EsBuild、Snowpack；\n- Webpack 基本原理以及构建流程\n  - `#熟练#` `#实现原理#`\n  1. [M] Webpack 是一个静态模块打包工具；讲所需要的模块组合成一个或多个 bundles 用与浏览器、Node 或者 Electron 使用；\n  2. [S] 代码字符串 > AST > Transform > AST(Low) > 代码字符串；\n- 简单描述下 Vite 的特性原理，为何快？\n  - `#熟练#` `#实现原理#`\n  1. [S] Vite 在开发时采用 Esbuild 作为 模块构建器\n\n### 测试\n\n- 常用的测试框架？\n  - `#了解#`\n  1. [M] UT：Jest、Mocha\n  2. [S] E2E：Selenium、Cypress、Puppeteer\n\n### 发布\n\n- 前端项目如何构建一个标准包？\n  - `#了解#`\n  1. [S] 在配置的依赖均倒置，运行时通过宿主来提供环境注入（global 对象、script 提供 config）；\n\n### 监控\n\n- 简单列出常用的前端数据监控的类库？\n  - `#了解#`\n  1. [S] @sentry/react、fundebug、ARMS、umeng\n- 简单描述下前端数据采集及其基本原理？\n  - `#了解#`\n  1. [S] 数据采集通常分为：环境信息、性能信息、异常信息、业务信息（交互数据、业务异常）\n  2. [S] 事件委托\n\n---\n\n## 性能&安全（Performance & Security）\n\n### 性能指标\n\n- 简单列出常用的前端 Web 应用的性能指标？\n  - `#熟练#`\n  1. [S] First Contentful Paint(FCP) 首次内容绘制、Largest Contentful Paint (LCP) 最大内容绘制、First Input Delay(FID) 首次输入延迟；\n  2. [P] First Paint(FP) 首次绘制、First Meaningful Paint(FMP) 首次有效绘制、Cumulative Layout Shift(CLS) 累积布局偏移、Time to Interactive(TTI) 可交互时间、DOMContentLoaded(DCL)、Load(L)；\n- 简单描述下性能指标的采集原理（exp. FCP、LCP、FID）？\n  - `#精通#` `#性能优化#` `#实现原理#`\n  1. [S] 通过 Performance Observer API 采集；\n  2. [S] 性能监测相关 API：Paint Timing、Event Timing、Navigation Timing、Paint Timing；\n\n### 性能评估\n\n- 简单列出常用的 Web 应用性能评估（采集）工具？\n  - `#了解#`\n  1. [M] Chrome DevTools、React DevTools\n  2. [P] Lighthouse、WebPageTest、Relyzer\n- 如果使用 React 开发的页面响应慢，有那些检测手段？\n  - `#了解#`\n  1. [M] console.time、timeEnd 埋点\n  2. [M] 借助 React DevTools 可以查看每个组件的渲染和重绘耗时\n\n### 性能优化\n\n- 常用的性能优化手段？\n  - `#熟练#`\n  1. [M] 代码压缩：Code Splitting、Tree-Shaking、Gzip\n  2. [M] 修改加载策略\n  3. [M] 执行自定义渲染\n  4. [S] 体验优化（加载动画、骨架图）\n  5. [S] DNS 预获取\n- 常见的 JS 代码压缩工具及其简单原理？\n  - `#熟练#` `#性能优化#` `#页面优化#` `#构建优化#`\n  1. [M] uglifyjs、terser\n- 简单描述下 Tree-Shaking 及其原理和使用建议？\n  - `#熟练#` `#性能优化#` `#页面优化#`\n- 常见的 JS 延迟加载方式？\n  - `#熟练#`\n  1. [M] `<script defer/>` defer 属性、`<script async />` async 属性、动态创建 DOM、使用 setTimeout 延迟、JS 写在 DOM 文档底部\n- 微信小程序常用的优化手段？\n  - `#熟练#`\n  1. [M] 代码包大小优化分包，独立包，分包预下载；\n  2. [M] 首页渲染优化，预加载，骨架图避免白屏；\n  3. [M] 渲染优化，setData 增量更新，延迟加载，避免一个原子操作大量计算阻塞 ui；\n- 如何优化一个前端巨石应用（）；\n  - `#熟练#` `#前端架构#` `#性能优化#`\n  - [M] Code Splitting、Lazy Loader；\n  - [S] 微前端架构；\n\n### 源码安全\n\n- 保护前端 JS 的源码的常见手段？\n  - `#熟练#`\n  1. [M] 代码压缩（uglifyjs）；\n  2. [M] 生产环境不得上传 SourceMap；\n  3. [S] 代码混淆 （Terser）；\n- CSRF / XSRF（跨站请求伪造）\n  - `#熟练#`\n  1. [S] HTTP 协议中使用 Referer 属性来确定请求来源进行过滤（禁止外域）\n  2. [S] 请求地址添加 token ，使黑客无法伪造用户请求\n  3. [S] HTTP 头自定义属性验证（类似上一条）\n  4. [S] 敏感操作显示验证方式：添加验证码、密码等\n\n### Web 安全\n\n---\n\n## 工程化\n\n### 工程体系\n\n- 前后端分离的本质？\n  - `#熟练#`\n  1. [M] 职责分明，将服务端业务逻辑和前端视觉进行分离，互设边界；\n  2. [M] 前端项目越来越复杂，需要规范流程和引入标准的工程体系。\n\n### 微前端\n\n- 业界常用的微前端框架？\n  - `#了解#` `#前端框架#`\n  1. [M] single-spa、蚂蚁 qiankun.js\n  2. [S] 京东 micro-app、字节 garfish\n  3. [P] modern.js、magix、飞冰 icestark、WidgetJS、ara framework、luigi、emp\n- 简单描述下 Qiankun 的工作原理？\n  - `#熟练#`\n  1. [M] single-spa、蚂蚁的 qiankun.js\n- Qiankun 的子应用配置，为何需要构建 UMD 包？\n  - `#熟练#`\n  1. [M] 子应用 webpack entry 提供 `target:umd` 以及\n  2. [S] 子应用\n- 微前端框架常用的 CSS 隔离方式？\n  - `#熟练#`\n  1. [P] 自定义标签，以及标签 name 配合选择器\n\n### 低代码\n\n- 简单描述下对 JSON-Schema 协议的理解？\n- 如何处理表单的关联逻辑？\n\n### Bundleless\n\n### CI\\CD\n\n- 简单列出前端常用的构建平台？\n  - `#了解#`\n  1. [M] Jenkins、Travis CI\n\n### 综合能力\n","slug":"frontend-engineer-tech-qa","published":1,"updated":"2023-12-20T04:56:24.773Z","comments":1,"photos":[],"_id":"clqdb6f3w0001ixw0h81vdd1k","content":"<h1 id=\"前端工程师-Tech-Q-A\"><a href=\"#前端工程师-Tech-Q-A\" class=\"headerlink\" title=\"前端工程师 Tech Q&amp;A\"></a>前端工程师 Tech Q&amp;A</h1><h2 id=\"级别标准\"><a href=\"#级别标准\" class=\"headerlink\" title=\"级别标准\"></a>级别标准</h2><ul>\n<li>P3：实习开发、功能开发</li>\n<li>P4：主要开发、功能模块独立开发</li>\n<li>P5：项目负责人、核心开发、技术问题总结者、技术分享、人员培养</li>\n<li>P6：团队负责人、问题终结者、跨组沟通&amp;协调资源、团队培养提升</li>\n</ul>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><blockquote>\n<p>如下所列前端工程师所涉及<strong>领域</strong>；<br>领域（子领域）设置<strong>题目</strong>若干；<br>题中包含<strong>标签</strong>（涉及深度、提问触发词）&amp; <strong>答题点</strong>（必知 <strong>M</strong>ust know、应知 <strong>S</strong>hould to know、可知 <strong>P</strong>osibility）</p>\n</blockquote>\n<ul>\n<li>语言：JavaScript、ECMAScript、TypeScript、HTML、CSS</li>\n<li>框架&amp;环境：浏览器、研发工具、容器、框架通识</li>\n<li>类库&amp;库生态：React、Libs Ecosystem、数据流、SSR &amp; SSG、BFF</li>\n<li>跨端技术：微信小程序、多端统一、Node、Electron、Native、Hybrid</li>\n<li>研发链路：初始化、包管理、规范标准、调试、编译、构建、测试、发布、监控</li>\n<li>性能&amp;安全：性能指标、性能评估、性能优化、源码安全、Web 安全</li>\n<li>工程化：工程体系、微前端、低代码、Bundleless、CI\\CD、综合能力</li>\n</ul>\n<h2 id=\"语言（Lang-DSL）\"><a href=\"#语言（Lang-DSL）\" class=\"headerlink\" title=\"语言（Lang &amp; DSL）\"></a>语言（Lang &amp; DSL）</h2><h3 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h3><ul>\n<li>简单聊聊 JavaScript 这门语言？<ul>\n<li><code>#了解#</code></li>\n</ul>\n<ol>\n<li>「M」在实现层面：分为语言标准（ECMAScript 是语言标准，JavaScript 只是标准的实现）+ 语言宿主环境（对象模型、WebAPI、N\u001dode Api、WX）；</li>\n<li>「S」语言标准提供语法、词法、基本类型、表达式、语句等；宿主环境提供内置对象、标准模块；</li>\n<li>「P」语法借鉴 C &amp; Java、数据结构借鉴 Java、原型借鉴 Self、函数用法借鉴 Schema、正则借鉴 Perl ；</li>\n</ol>\n</li>\n<li>JavaScript 中有那些常见的内置对象，由谁提供?<ul>\n<li><code>#了解#</code></li>\n</ul>\n<ol>\n<li>「M」值：NaN、undefined、null、Infinity；函数：eval、parseInt、parseFloat；对象：Object、Function、Boolean、Symbol、Error；数字和日期：Math、Date、Number；字符串：String、RegExp；集合：Array、Map、WeakMap、Set、WeakSet；控制对象：Promise、Generator；反射：Proxy、Reflect；</li>\n<li>[S] 内置对象是在程序执行时存在全局作用域的一些 JS 定义的值、函数、对象；</li>\n</ol>\n</li>\n<li>JavaScript 代码在运行时，有那些常见的执行上下文？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>「M」函数执行上下文；</li>\n<li>[S] 全局执行上下文、eval 执行上下文；</li>\n</ol>\n</li>\n<li>JavaScript 通用模块规范，并描述其基本的区别？<ul>\n<li><code>#熟练#</code> <code>#模块化#</code></li>\n</ul>\n<ol>\n<li>「M」CommonJS、AMD、CMD、UMD、ESM；</li>\n<li>「M」CommonJS 通过 require 引入模块、module.export 输出对象和接口。运行时加载，输出值的拷贝；</li>\n<li>「M」ESM 通过 import 引入模块，export 输出模块；编译期输出接口，输出值的引用；浏览器支持原生 ESM ，但只能在 <code>&lt;script type=&quot;module&quot; /&gt;</code> 内使用；</li>\n<li>[S] AMD 和 CMD 均为异步加载模块，分别由 require.js 和 sea.js 提供实现；AMD 依赖前置，CMD 就近依赖；</li>\n<li>[S] UMD 是对 CommonJS、AMD 的整合；</li>\n</ol>\n</li>\n<li>JavaScript 这门语言是否有反射能力？ES6 为了增强这种能力又推出那些新特性？<ul>\n<li><code>#精通#</code> <code>#编程范式#</code> <code>#元编程#</code> <code>#反射#</code> <code>#Proxy#</code> <code>#Reflect#</code> <code>#数据劫持#</code></li>\n</ul>\n<ol>\n<li>[S] 反射是实现元编程的一种方式；JS 诞生之初就有反射能力；eval、Object.{create|defineProperties|defineProperty}、Function.{apply|bind} 均属于反射的一些实现；</li>\n<li>[S] ES6 Proxy &amp; Reflect 作为反射的两个分支（Self-Modification &amp; Intercession）实现；defineProperty 数据劫持有缺陷；规范语言，对之前 Object &amp; Function 原型链上的方法进行规范化；</li>\n<li>[S] 为 JS 之后更多的反射行为提供良好支撑；</li>\n<li>[P] ES7 推出了 Reflect MetaData 提案，增强了反射覆盖场景；</li>\n</ol>\n</li>\n<li>简单描述闭包及其使用场景？<ul>\n<li><code>#熟练#</code> <code>#语言特性#</code> <code>#模块化#</code></li>\n</ul>\n<ol>\n<li>[M] 指有权限访问另外一个函数作用域中变量的函数；其本质是作用域链的特殊应用；</li>\n<li>[S] 创建私有变量；通过闭包对上下文中变量的引用，防止其被 GC 回收（易引发内存溢出）；</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"ECMAScript\"><a href=\"#ECMAScript\" class=\"headerlink\" title=\"ECMAScript\"></a>ECMAScript</h3><ul>\n<li>ECMAScript2017（ES8） 中新增的 Symbol 有何用处？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[M] 用来表示一个独一无二的变量防止命名冲突</li>\n</ol>\n</li>\n<li>ECMAScript2015（ES6） 之后的版本有那些新特性？<ul>\n<li><code>#熟练#</code> <code>#语言特性#</code> <code>#ESNext#</code></li>\n</ul>\n<ol>\n<li>[S] ES7：Reflect MetaData（提案）、Array includes、<code>**</code>运算符；</li>\n<li>[S] ES8：async&amp;await、Object values|entries、String padding、Object.getOwnPropertyDescriptors、SharedArrayBuffer；</li>\n<li>[S] ES9：异步迭代、Promise.finally、正则；</li>\n<li>[S] ES10：Array flat、String trim 函数、Symbol Description、catch 绑定、Function toString 支撑转注释、BigInt；</li>\n<li>[M] ES11：Option Chaining(<code>?.</code>)、Nullish Coalescing(<code>??</code>)、Private Fields(<code>#</code>)、Top Level Await、Dynamic Import、globalThis；</li>\n<li>[S] ES12：String replaceAll、Promise.any、<code>??= ||= &amp;&amp;=</code>、WeakRefs、<code>123_456_789</code> 数字分隔符；</li>\n</ol>\n</li>\n<li>ECMAScript Next（ESNext）中的新特性？<ul>\n<li><code>#精通#</code> <code>#ECMA#</code> <code>#ESNext#</code> <code>#前沿#</code> <code>#语言新特性#</code></li>\n</ul>\n<ol>\n<li>[S] Class instance fields、Static class fields、Private instance methods、Private instance fields、Private static methods、Private static fields、Ergonomic brand checks、Import assertions、Class static blocks</li>\n<li>[P] Hashbang grammar、Top-level await、Arbitrary module namespace identifiers、</li>\n</ol>\n</li>\n<li>简单列出目前 ECMAScript 处于 Stage（4 &amp; 3 &amp; 2） 阶段的提案？<ul>\n<li><code>#精通#</code> <code>#ECMA#</code></li>\n</ul>\n<ol>\n<li>[P] Error Cause（首个由中国团队”阿里淘宝”提出并进入 state-4 阶段的提案）</li>\n<li>[P] ESNext：Record、Tuple</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"TypeScript\"><a href=\"#TypeScript\" class=\"headerlink\" title=\"TypeScript\"></a>TypeScript</h3><ul>\n<li>简单描述下 TypeScript 在项目中的作用？<ul>\n<li><code>#了解#</code></li>\n</ul>\n<ol>\n<li>[M] 是 JS 的超集，可以提前体验 ES Next 提案中的语法糖和特性</li>\n<li>[M] 为 JS 添加类型支撑、JS 的语言超集、利于团队协作；极其强大的类型系统</li>\n</ol>\n</li>\n<li>简单描述下 TypeScript 中常用的工具类型？<ul>\n<li><code>#了解#</code></li>\n</ul>\n<ol>\n<li>[S] <code>Partial&lt;T&gt;</code> <code>Required&lt;T&gt;</code> <code>Readonly&lt;T&gt;</code> <code>Pick&lt;T, K&gt;</code> <code>Omit&lt;T, K&gt;</code></li>\n</ol>\n</li>\n<li>简单描述下 tsconfig.json 中常用的配置项？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[M] <code>compilerOptions.targer</code> <code>module</code> <code>lib</code> <code>outDir</code> <code>types</code> <code>paths</code> <code>sourceMap</code> <code>include</code> <code>exclude</code></li>\n</ol>\n</li>\n<li>TypeScript 是名义类型还是结构类型？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[S] 结构类型</li>\n</ol>\n</li>\n<li>简单描述下 TypeScript 中 Interface 和 Type 的区别？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[M] 均支持拓展（extends），interface 使用 <code>extends</code> 而 type 使用 <code>&amp;</code> 类型合并；支持互相拓展；</li>\n<li>[S] type 支持类型别名，联合类型，元组；interface 支持声明合并；在使用过程中尽可能先使用 interface；</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h3><ul>\n<li>简单列出项目中 HTML 常用的 Meta 标签？<ul>\n<li><code>#了解#</code> <code>#浏览器#</code> <code>#HTML#</code></li>\n</ul>\n<ol>\n<li>[M] <code>&lt;meta charset=&quot;utf-8&quot; /&gt;</code></li>\n<li>[S] SEO 优化 <code>&lt;meta name=“description&quot; contents=“xx,xx”/&gt;</code></li>\n<li>[S] SEO 优化 <code>&lt;meta name=“keywords&quot; contents=“xx,xx”/&gt;</code></li>\n<li></li>\n</ol>\n</li>\n<li>简单列出项目中 HTML 常用的 Link 标签？<ul>\n<li><code>#了解#</code> <code>#浏览器#</code> <code>#HTML#</code></li>\n</ul>\n<ol start=\"2\">\n<li>[M] <code>&lt;link rel=&quot;shortcut icon&quot; type=&quot;image/x-icon&quot; href=&quot;..&quot;&gt;</code></li>\n<li>[M] CSS 外链 <code>&lt;link rel=&quot;stylesheet&quot; href=&quot;...&quot;&gt;</code></li>\n<li>[S] 域名 DNS 预请求 <code>&lt;link rel=&quot;dns-prefetch&quot; href=&quot;...&quot; /&gt;</code></li>\n</ol>\n</li>\n<li>简单描述下 DOM 和 BOM 对象？<ul>\n<li><code>#了解#</code> <code>#浏览器#</code> <code>#宿主对象#</code></li>\n</ul>\n<ol>\n<li>[M] DOM 是文档对象模型，把文档当做为一个对象，定义和处理文档内容的方法和接口；比如 <code>document</code></li>\n<li>[M] BOM 对浏览器对象模型，将浏览器作为一个对象，定义和处理与浏览器交互的方法和接口；比如 <code>window</code> <code>location</code> <code>navigator</code> <code>screen</code></li>\n</ol>\n</li>\n<li>简单描述下事件委托，及其优势和运用场景？<ul>\n<li><code>#熟练#</code> <code>#浏览器原理#</code> <code>#事件#</code></li>\n</ul>\n<ol>\n<li>[M] 利用浏览器事件冒泡机制；在父节点定义监听事件，由父节点监听函数统一处理多个子元素冒泡传过来的事件；</li>\n<li>[S] 减少内存消耗，实现事件的动态绑定；常常运用在各种 UI 事件绑定类库和数据埋点；</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h3><ul>\n<li><p>常用单位以及其区别？</p>\n<ul>\n<li><code>#了解#</code></li>\n</ul>\n<p>[M] px、em、rem、%、vw、vh</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li>[M] px 为屏幕的像素点，em 是父元素的 font-size（默认 16px），vw 为视窗宽度的 1%，vh 为视窗高度的 1%；</li>\n</ol>\n<ul>\n<li>常用的 CSS 预处理库？</li>\n<li><code>#了解#</code></li>\n</ul>\n<ol>\n<li>[M] Less、Sass</li>\n<li>[P] PostCSS、Stylus</li>\n</ol>\n<ul>\n<li>Less &amp; Sass(SCSS) 的区别和各自的优缺点？</li>\n<li><code>#了解#</code></li>\n</ul>\n<ol>\n<li>[M] 区别：在与变量的声明、实现方式（语言不同，Less 基于 JS，Sass 基于 Ruby，当然也有 node-sass 的实现）</li>\n<li>[S] Less 兼容性好，但是不支持循环判断等；Sass 用户基础大，支持函数对象循环判断等，但是依赖于 Ruby 安装容易报错；</li>\n</ol>\n<ul>\n<li>常用的 CSS 架构、规范？</li>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[S] BEM、CSS Modules</li>\n</ol>\n<ul>\n<li>常用的 CSS in JS？</li>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[S] styled-components、TailwindCSS</li>\n</ol>\n<ul>\n<li>通用的浏览器 CSS 差异标准化方案？</li>\n<li><code>#熟练#</code> <code>#兼容性#</code> <code>#初始化#</code></li>\n</ul>\n<ol>\n<li>[S] 引入 normalize.css 或者 reset.css</li>\n</ol>\n<hr>\n<h2 id=\"框架-环境（Frame-VM）\"><a href=\"#框架-环境（Frame-VM）\" class=\"headerlink\" title=\"框架&amp;环境（Frame &amp; VM）\"></a>框架&amp;环境（Frame &amp; VM）</h2><h3 id=\"浏览器\"><a href=\"#浏览器\" class=\"headerlink\" title=\"浏览器\"></a>浏览器</h3><ul>\n<li>浏览器事件触发时，其传播的阶段？<ul>\n<li><code>#了解#</code></li>\n</ul>\n<ol>\n<li>[M] Capturing（捕获） &gt; Target（目标触发） &gt; Bubbling（冒泡）</li>\n</ol>\n</li>\n<li>Cookie、localStorage 以及 sessionStorage 之间的区别？<ul>\n<li><code>#了解#</code></li>\n</ul>\n<ol>\n<li>[M] Cookie：保存在客户端的数据，记录你在网页的一些行为数据。 sessionStorage：保存在客户端的数据，生命周期是同源同窗口，只要该窗口没有关闭就一直可用共享。 localStorage：保存在客户端的数据，一直有效；</li>\n<li>[S] Cookie size &lt;&#x3D; 4Kb；Storage size &lt;&#x3D; 5Mb；</li>\n</ol>\n</li>\n<li>浏览器出于安全提出了同源策略，何种情况下会引发跨域以及通用解决办法？<ul>\n<li><code>#了解#</code></li>\n</ul>\n<ol>\n<li>[M] 域名、子域名、端口号、协议不同均不属于一个域；</li>\n<li>[S] jsonp、documents.domain + iframe、CORS、iframe + postMessage、websocket；</li>\n<li>[S] 处于一级域名下的应用可以设置 document.domain 在相同父域，可以获取 cookie；</li>\n</ol>\n</li>\n<li>简单说明 JSONP 的原理，及其局限性？<ul>\n<li><code>#了解#</code></li>\n</ul>\n<ol>\n<li>[M] 利用了<code>&lt;script&gt;</code>标签没有跨域限制，可以发起 get 请求；</li>\n<li>[S] 兼容性较好，但仅限于 Get 请求；</li>\n</ol>\n</li>\n<li>简单描述下浏览器的渲染机制？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[S] 处理 HTML 文档构建 DOM 树、处理 CSS 文档构建 CSSOM 树、DOM 与 CSSOM 合并为渲染树；</li>\n</ol>\n</li>\n<li>简单描述下浏览器的缓存机制？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[S] 浏览器缓存分为强缓存和协商缓存；</li>\n<li>[P] 强缓存直接从浏览器中获取资源，通过请求头 <code>Cache-Control</code> 控制；协商缓存先访问服务缓存是否过期，在决定是否使用本地资源，通过请求头控制；</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"研发工具\"><a href=\"#研发工具\" class=\"headerlink\" title=\"研发工具\"></a>研发工具</h3><ul>\n<li>如何将项目的格式化进行统一？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[S] 使用 .editorconfig 定义代码格式化风格；或者提交 .vscode settings.json 约束项目；</li>\n</ol>\n</li>\n<li>常用的 VS Code Editor 配置？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[S] .vscode 文件下通常使用 extensions.json 声明项目依赖插件；launch.json 配置 Debug 相关的配置；settings.json 用来覆盖本地用户的基本配置（文件隐藏、文件编码、格式化风格）</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"容器\"><a href=\"#容器\" class=\"headerlink\" title=\"容器\"></a>容器</h3><hr>\n<h2 id=\"类库-生态（Libs-Ecosystem）\"><a href=\"#类库-生态（Libs-Ecosystem）\" class=\"headerlink\" title=\"类库&amp;生态（Libs &amp; Ecosystem）\"></a>类库&amp;生态（Libs &amp; Ecosystem）</h2><h3 id=\"React\"><a href=\"#React\" class=\"headerlink\" title=\"React\"></a>React</h3><ul>\n<li>React 在 16.x 具体推出那些新特性？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[M] (16.1) render 返回新增支持字符串和数组类型、Error Boundaries、React Dom Portal、Fiber、React.Fragment</li>\n<li>[M] (16.3) createContext、createRef、forwardRef、生命周期函数更新</li>\n<li>[M] (16.6) React.memo、React.lazy、React.Suspense、static getDerivedStateFromError、</li>\n<li>[M] (16.7) React Hooks（useState、useEffect、useMemo、useCallBack、useContext）</li>\n<li>[M] (16.8) React Concurrent Rendering</li>\n</ol>\n</li>\n<li>React 在 17.x 推出的新特性？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n</li>\n<li>React 在目前的 18.x 推出的新特性？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n</li>\n<li>简单说明下为何两个不同版本的 React 不能运行在一个全局上下文？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Ecosystem\"><a href=\"#Ecosystem\" class=\"headerlink\" title=\"Ecosystem\"></a>Ecosystem</h3><ul>\n<li>React 运行时生态类库？<ul>\n<li><code>#熟练#</code> <code>#Ecosystem#</code> <code>#初始化#</code></li>\n</ul>\n<ol>\n<li>[M] Official：react、react-dom、react-update、react-refresh、react-reconciler</li>\n<li>[M] State &amp; Flow：@reduxjs&#x2F;toolkit、redux、redux-saga、mobx、iflux2 &amp; plume2、dva</li>\n<li>[M] Hooks：ahooks、react-use、react-query</li>\n<li>[M] UI：antd、rc-*(antd core)、antd-mobile、antd-pro</li>\n<li>[M] Styles：styled-components、classnames</li>\n<li>[M] Router：react-router、react-router-dom、redux-router</li>\n<li>[S] Framework：umi</li>\n<li>[S] CLI &amp; Layer：vite、create-react-app</li>\n<li>[S] Analytics：react-ga、@sentry&#x2F;react</li>\n<li>[S] Draggable：react-dnd、react-draggable</li>\n<li>[S] Charts：echarts、AntV</li>\n<li>[P] SSR &amp; SSG：next.js、gatsby</li>\n<li>[P] I18n：react-intl</li>\n<li>[P] Async Load：react-loadable、react-script</li>\n<li>[P] Long List：react-virtualized、react-windows、react-scroll、react-infinite-scroller</li>\n<li>[P] Docs：storybook、huge</li>\n</ol>\n</li>\n<li>Taro 生态类库？<ol>\n<li>Official：@tarojs&#x2F; taro、@tarojs&#x2F; runtime、@tarojs&#x2F; react、@tarojs&#x2F; components</li>\n<li>[M] Tracing：umtrack-alipay、umtrack-wx</li>\n<li>[M] CLI：@tarojs&#x2F; cli、@tarojs&#x2F; mini-runner、@tarojs&#x2F; plugin-inject、@tarojs&#x2F; webpack-runner</li>\n</ol>\n</li>\n<li>Electron 生态类库？<ol>\n<li>[M] Official：electron、electron-log</li>\n<li>[M] Release &amp; Deploy：electron-builder、electron-packager、electron-updater、electron-reload、electron-notarize</li>\n<li>[M] Development：electron-debug</li>\n<li>[S] Compiler：electron-rebuild、node-gyp</li>\n<li>[M] System：getmac、systeminformation、ip</li>\n<li>[S] Devices：usb、escpos</li>\n<li>[S] Version Manage：semver</li>\n</ol>\n</li>\n<li>React Native 生态类库？<ol>\n<li>[M] Official：react、react-native</li>\n<li>[M] Navigator：react-navigation、native-navigation</li>\n<li>[M] Data Storage：realm、sqlite3、react-native-storage</li>\n<li>[M] Scrollable：react-native-scrollable-tab-view、</li>\n<li>[M] Devices：react-native-camera</li>\n<li>[M] Logs：</li>\n<li>[M] UI：ant-design-mobile</li>\n<li>[M] Performance：sentry、</li>\n<li>[M] Debugging：chrome-dev-tools、flipper</li>\n<li>[M] Testing：enzyme、detox、jest</li>\n<li>[S] Notification：jpush</li>\n</ol>\n</li>\n<li>CSS 类库（CSS Tools）？<ol>\n<li>[S] Resets：normalize.css、reset.css、reset-css</li>\n<li>[S] Animate：animate.css</li>\n<li>[S] Charts：charts.css</li>\n<li>[S] Productor：ant.design、semi.design</li>\n</ol>\n</li>\n<li>前端项目运行时生态类库？<ol>\n<li>[S] Validator：joi、async-validator、yup</li>\n<li>[S] Testing：mocha、jest、cypress、enzyme</li>\n<li>[S] Assertion：chai</li>\n</ol>\n</li>\n<li>前端项目开发时生态类库？<ol>\n<li>[M] Request：axios、isomorphic-fetch</li>\n<li>[M] Polyfill：core-js</li>\n<li>[S] Data：immutable、immer、deepmerge</li>\n<li>[M] Date：moment、day.js</li>\n<li>[S] Testing：jest、mocha、jasmine</li>\n<li>[S] Assertion：chai、assert</li>\n<li>[S] Utils：lodash、underscore</li>\n<li>[S] E2E：cypress、enzyme</li>\n<li>[S] Command：commander</li>\n</ol>\n</li>\n<li>前端项目编译时生态类库？<ol>\n<li>[S] Compiler：babel、tsc、esbuild</li>\n<li>[S] Bundled：webpack、rollup、parser</li>\n<li>[S] Unbundled：snowpack、vite</li>\n<li>[S] Mangler &amp; Compressor：terser、javascript-obfuscator、uglify-js、babel-minify</li>\n<li>[S] CLI &amp; Boilerplate：create-react-app、vite</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"数据流\"><a href=\"#数据流\" class=\"headerlink\" title=\"数据流\"></a>数据流</h3><ul>\n<li>简单描述下单向数据流（flux）？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n</li>\n<li>如何简单实现一个不可变数据类型？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[M] 采用 ES6 Proxy &amp; Reflect 代理 get | set | apply 行为，以及 DeepCopy</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"SSR-SSG\"><a href=\"#SSR-SSG\" class=\"headerlink\" title=\"SSR &amp; SSG\"></a>SSR &amp; SSG</h3><ul>\n<li>CSR、SSR、BSR 以及 SSG 之间的区别与优劣？<ul>\n<li><code>#了解#</code> <code>#SEO#</code> <code>#前后端同构#</code> <code>#白屏#</code> <code>#性能优化#</code></li>\n</ul>\n<ol>\n<li>[M] CSR（Client Side Rendering）客户端渲染；</li>\n<li>[M] SSR（Server Side Rendering）服务端渲染；</li>\n<li>[M] SSG（Static Site Generation）静态站点生成；</li>\n</ol>\n</li>\n<li>有那些常用的 SSR &amp; SSG 框架，如何简单实现 SSR？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[S] Next.js、Gatsby</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"Node-BFF\"><a href=\"#Node-BFF\" class=\"headerlink\" title=\"Node BFF\"></a>Node BFF</h3><ul>\n<li>简单描述下对 Egg 的理解？<ul>\n<li><code>#了解#</code></li>\n</ul>\n<ol>\n<li>[M] Egg 是已 Koa 为内核，遵循约定大于配置的 Web 框架；所有功能基于插件形式完成拓展；</li>\n</ol>\n</li>\n<li>简单描述下 Koa 洋葱模型的实现原理？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n</li>\n<li>简单描述下 Egg Loader 的加载顺序？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[M] framework &gt; middleware &gt; plugin &gt; app（router &gt; service &gt; controller）</li>\n</ol>\n</li>\n<li>NestJS 中 IoC 的实现机制？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[M] 基于 reflect-metadata 的提供的 definedMetadata | getMetadata &amp; Decorator 的能力对类、类的成员、类的方法、类方法参数进行的注释；并在编译器提取了对应 meta 信息并实例化 ；</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h2 id=\"跨端技术\"><a href=\"#跨端技术\" class=\"headerlink\" title=\"跨端技术\"></a>跨端技术</h2><h3 id=\"微信小程序\"><a href=\"#微信小程序\" class=\"headerlink\" title=\"微信小程序\"></a>微信小程序</h3><ul>\n<li>简述一下常用的生命周期<ul>\n<li><code>#了解#</code></li>\n</ul>\n<ol>\n<li>[M] onLoad：页面加载，调一次；onShow：页面显示，每次打开页面都调用；onReady：初次渲染完成，调一次；onHide：页面隐藏，当 navigateTo 或底部 tab 切换时调用；onUnload：页面卸载，当 redirectTo 或 navigateBack 时调用；</li>\n</ol>\n</li>\n<li>简单描述下小程序的工作原理？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[S] 小程序分为两个部分 webview 和 appService，webview 用来展现 UI，appService 用来处理业务逻辑、数据及接口调用，它们在两个进程中运行，通过系统层 JSBridge 实现通信，完成 UI 渲染、事件处理。</li>\n</ol>\n</li>\n<li>小程序双线程架构原理？<ul>\n<li><code>#精通#</code></li>\n</ul>\n<ol>\n<li>[S] 小程序应用是基于双线程模型的，渲染层通过 Webview 作为渲染载体；逻辑层则通过 JsCore 来作为 JS 运行时；</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"多端统一\"><a href=\"#多端统一\" class=\"headerlink\" title=\"多端统一\"></a>多端统一</h3><ul>\n<li>简单描述下 Taro3.0 原理？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[S] Taro3.0 从编译型转向了运行时架构</li>\n<li>[S] 在运行时模拟实现了 DOM、BOM API，使得前端架构可以运行在小程序运行时环境中</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"Node\"><a href=\"#Node\" class=\"headerlink\" title=\"Node\"></a>Node</h3><ul>\n<li>require 的模块加载机制？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[M] 先计算模块路径；如果模块在缓存里面，取出缓存；加载模块的输出模块的 exports 属性即可</li>\n</ol>\n</li>\n<li>线上如何排查问题？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[M] Sentry 监控；</li>\n<li>[S] 全链路式日志，需要借助 apm 工具，opentracing，zipkin 等；</li>\n<li>[S] 阿里云 alinode；</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"Electron\"><a href=\"#Electron\" class=\"headerlink\" title=\"Electron\"></a>Electron</h3><ul>\n<li>简单描述下对 Electron 的理解？<ul>\n<li><code>#了解#</code></li>\n</ul>\n<ol>\n<li>[S] Electron 是一个可以使用 Web 技术（JS、HTML、CSS）来创建跨平台原生桌面应用的框架。借助 Node API 可以使用纯 JS 来调用丰富的原生 API。</li>\n</ol>\n</li>\n<li>简单描述下 Electron 的进程模型和以及各自的职责？<ul>\n<li><code>#了解#</code></li>\n</ul>\n<ol>\n<li>[S] Main Process 主进程：进程间通信（IpcMain、webContent）、窗口管理、Node Add-on 暴露、全局事务（应用生命周期、session）；</li>\n<li>[S] Renderer Process 渲染进程：负责 web 页面容器构建渲染、业务处理；</li>\n</ol>\n</li>\n<li>解释下 Electron 构建时为何需要 Rebuild？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[P] Electron 内置了 V8 和 Node，而部分 Node 能力是通过 C++ Add-on 实现的；在构建 Electron 应用时，需要针对这些 Add-on 按 Node 版本、Electron 版本、OS Platform、CPU Arch 重新进行编译；</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"Native\"><a href=\"#Native\" class=\"headerlink\" title=\"Native\"></a>Native</h3><h3 id=\"Hybrid-Web-APP\"><a href=\"#Hybrid-Web-APP\" class=\"headerlink\" title=\"Hybrid Web APP\"></a>Hybrid Web APP</h3><ul>\n<li>如何解决移动端 Web 点击时间的延迟？<ul>\n<li><code>#了解#</code></li>\n</ul>\n<ol>\n<li>[M] <code>&lt;meta /&gt;</code> 标签禁用网页缩放、FastClick</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h2 id=\"研发链路（Lint-Compile-Builder-Package）\"><a href=\"#研发链路（Lint-Compile-Builder-Package）\" class=\"headerlink\" title=\"研发链路（Lint &amp; Compile &amp; Builder &amp; Package）\"></a>研发链路（Lint &amp; Compile &amp; Builder &amp; Package）</h2><h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><ul>\n<li>如何重装 Node 环境（以 Mac 环境为例）？<ol>\n<li>[P] 借助 npkill 对本地 node_modules 进行清理</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"包管理\"><a href=\"#包管理\" class=\"headerlink\" title=\"包管理\"></a>包管理</h3><ul>\n<li>简单列出一些常用的 CLI 工具或者 Boilerplate？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[S] create-react-app、vite</li>\n</ol>\n</li>\n<li>简单列出常用的包管理工具？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[M] npm（.npmrc、.npmignore、package.json、package-lock.json）、yarn（.yarnrc、yarn.lock）、pnpm（pnpm-lock.yaml）、tnpm；</li>\n<li>[S] nvm、npx（npm 5.2+ 内置；相当于提供两个 bin）</li>\n</ol>\n</li>\n<li>简单列出常用的 NPM 命令？<ul>\n<li><code>#熟练#</code> <code>#工程化#</code> <code>#脚手架#</code> <code>#命令行#</code></li>\n</ul>\n<ol>\n<li>[M] <code>npm i|install|uninstall</code> <code>npm run</code> <code>npm help</code> <code>npm init</code> <code>npm publish|unpublish</code> <code>npm start|restart</code> <code>npm info</code> <code>npm list</code> <code>npm view|version</code></li>\n<li>[S] <code>npx</code> <code>npm config</code> <code>npm link</code> <code>npm rebuild</code> <code>npm clean</code> <code>npm run-script</code> <code>npm whoami</code> <code>npm login|logout</code> <code>npm docs</code> <code>npm adduser</code></li>\n<li>[S] run-scripts hook <code>pre &amp; post</code></li>\n</ol>\n</li>\n<li>简单描述下 NPM 安装依赖的大致过程？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[S] 检查配置（项目 .npmrc、全局用户 .npmrc）;</li>\n<li>[S] 确定依赖版本，构建依赖树；package.json 优先 package-lock.json；</li>\n<li>[S] 下载包资源；首先查询本地是否存在缓存版本，如没有则下载并添加本地缓存，并将包解压到项目 node_modules 下；</li>\n<li>[S] 生成 lockfile 文件（npm 5.x+）；</li>\n</ol>\n</li>\n<li>简单描述下 NPX 的大致流程？<ul>\n<li><code>#熟练#</code> <code>#脚手架#</code> <code>#命令行#</code></li>\n</ul>\n<ol>\n<li>[M] <code>npx</code> 命令是 <code>npm i xx --global &amp; .bin/xx</code> 的快捷方式</li>\n</ol>\n</li>\n<li>NPM Package Version 遵循了什么协议，并简单说明该协议？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[M] 遵循了 SemVer2.0 协议规范；x.y.z-{pre-release}；</li>\n<li>[S] <code>&#123;major&#125;.&#123;minor&#125;.&#123;patch&#125;</code> Major 表示不兼容的修改，Minor 表示向下兼容的新增特性，Patch 表示向下兼容的问题修复；</li>\n<li>[P] NPM 命令在不满足 SemVer2.0 规范的 Package.json 下无法执行；</li>\n</ol>\n</li>\n<li>公共类库如何处理即将弃用的功能（API、组件、模块、依赖）？<ul>\n<li><code>#熟练#</code> <code>#组件化#</code> <code>#开源项目#</code></li>\n</ul>\n<ol>\n<li>[M] 更新说明文档以及类型描述文件让使用者知道这个 Break Change；</li>\n<li>[S] 在某个阶段的 Minor 版本持续进行 Warning 级别提示（一般跨域一整个 Major），然后在下个 Major 版本移除；</li>\n</ol>\n</li>\n<li>封装一个类库时应该遵循哪条基本原则？<ul>\n<li><code>#熟练#</code> <code>#开源项目#</code></li>\n</ul>\n<ol>\n<li>DRY</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"规范标准\"><a href=\"#规范标准\" class=\"headerlink\" title=\"规范标准\"></a>规范标准</h3><ul>\n<li>JavaScript 基本编码规范<ul>\n<li><code>#熟练#</code> <code>#代码洁癖#</code> <code>#强迫症#</code></li>\n</ul>\n<ol>\n<li>[M] <code>=== !==</code> 代替 <code>== !=</code>；不要在对象原型（<code>Array.prototype|Date.prototype</code>）上添加自定义方法；for | if 语句使用大括号；代码中的地址时间等使用常量替代；不使用 <code>var</code> 声明变量；</li>\n<li>[M] 使用大驼峰法对组件&amp;类命名，使用小驼峰法来对变量&amp;函数名命名</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h3><ul>\n<li>H5 页面的调试手段？<ul>\n<li><code>#了解#</code></li>\n</ul>\n<ol>\n<li>[M] 微信开发者工具</li>\n<li>[S] vsconsole</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"编译-构建\"><a href=\"#编译-构建\" class=\"headerlink\" title=\"编译&amp;构建\"></a>编译&amp;构建</h3><ul>\n<li>前端项目常用构建工具<ul>\n<li><code>#了解#</code></li>\n</ul>\n<ol>\n<li>[M] Webpack、Babel；</li>\n<li>[S] Vite、Parcel、Rollup、TSC；</li>\n<li>[P] EsBuild、Snowpack；</li>\n</ol>\n</li>\n<li>Webpack 基本原理以及构建流程<ul>\n<li><code>#熟练#</code> <code>#实现原理#</code></li>\n</ul>\n<ol>\n<li>[M] Webpack 是一个静态模块打包工具；讲所需要的模块组合成一个或多个 bundles 用与浏览器、Node 或者 Electron 使用；</li>\n<li>[S] 代码字符串 &gt; AST &gt; Transform &gt; AST(Low) &gt; 代码字符串；</li>\n</ol>\n</li>\n<li>简单描述下 Vite 的特性原理，为何快？<ul>\n<li><code>#熟练#</code> <code>#实现原理#</code></li>\n</ul>\n<ol>\n<li>[S] Vite 在开发时采用 Esbuild 作为 模块构建器</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><ul>\n<li>常用的测试框架？<ul>\n<li><code>#了解#</code></li>\n</ul>\n<ol>\n<li>[M] UT：Jest、Mocha</li>\n<li>[S] E2E：Selenium、Cypress、Puppeteer</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h3><ul>\n<li>前端项目如何构建一个标准包？<ul>\n<li><code>#了解#</code></li>\n</ul>\n<ol>\n<li>[S] 在配置的依赖均倒置，运行时通过宿主来提供环境注入（global 对象、script 提供 config）；</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"监控\"><a href=\"#监控\" class=\"headerlink\" title=\"监控\"></a>监控</h3><ul>\n<li>简单列出常用的前端数据监控的类库？<ul>\n<li><code>#了解#</code></li>\n</ul>\n<ol>\n<li>[S] @sentry&#x2F;react、fundebug、ARMS、umeng</li>\n</ol>\n</li>\n<li>简单描述下前端数据采集及其基本原理？<ul>\n<li><code>#了解#</code></li>\n</ul>\n<ol>\n<li>[S] 数据采集通常分为：环境信息、性能信息、异常信息、业务信息（交互数据、业务异常）</li>\n<li>[S] 事件委托</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h2 id=\"性能-安全（Performance-Security）\"><a href=\"#性能-安全（Performance-Security）\" class=\"headerlink\" title=\"性能&amp;安全（Performance &amp; Security）\"></a>性能&amp;安全（Performance &amp; Security）</h2><h3 id=\"性能指标\"><a href=\"#性能指标\" class=\"headerlink\" title=\"性能指标\"></a>性能指标</h3><ul>\n<li>简单列出常用的前端 Web 应用的性能指标？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[S] First Contentful Paint(FCP) 首次内容绘制、Largest Contentful Paint (LCP) 最大内容绘制、First Input Delay(FID) 首次输入延迟；</li>\n<li>[P] First Paint(FP) 首次绘制、First Meaningful Paint(FMP) 首次有效绘制、Cumulative Layout Shift(CLS) 累积布局偏移、Time to Interactive(TTI) 可交互时间、DOMContentLoaded(DCL)、Load(L)；</li>\n</ol>\n</li>\n<li>简单描述下性能指标的采集原理（exp. FCP、LCP、FID）？<ul>\n<li><code>#精通#</code> <code>#性能优化#</code> <code>#实现原理#</code></li>\n</ul>\n<ol>\n<li>[S] 通过 Performance Observer API 采集；</li>\n<li>[S] 性能监测相关 API：Paint Timing、Event Timing、Navigation Timing、Paint Timing；</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"性能评估\"><a href=\"#性能评估\" class=\"headerlink\" title=\"性能评估\"></a>性能评估</h3><ul>\n<li>简单列出常用的 Web 应用性能评估（采集）工具？<ul>\n<li><code>#了解#</code></li>\n</ul>\n<ol>\n<li>[M] Chrome DevTools、React DevTools</li>\n<li>[P] Lighthouse、WebPageTest、Relyzer</li>\n</ol>\n</li>\n<li>如果使用 React 开发的页面响应慢，有那些检测手段？<ul>\n<li><code>#了解#</code></li>\n</ul>\n<ol>\n<li>[M] console.time、timeEnd 埋点</li>\n<li>[M] 借助 React DevTools 可以查看每个组件的渲染和重绘耗时</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"性能优化\"><a href=\"#性能优化\" class=\"headerlink\" title=\"性能优化\"></a>性能优化</h3><ul>\n<li>常用的性能优化手段？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[M] 代码压缩：Code Splitting、Tree-Shaking、Gzip</li>\n<li>[M] 修改加载策略</li>\n<li>[M] 执行自定义渲染</li>\n<li>[S] 体验优化（加载动画、骨架图）</li>\n<li>[S] DNS 预获取</li>\n</ol>\n</li>\n<li>常见的 JS 代码压缩工具及其简单原理？<ul>\n<li><code>#熟练#</code> <code>#性能优化#</code> <code>#页面优化#</code> <code>#构建优化#</code></li>\n</ul>\n<ol>\n<li>[M] uglifyjs、terser</li>\n</ol>\n</li>\n<li>简单描述下 Tree-Shaking 及其原理和使用建议？<ul>\n<li><code>#熟练#</code> <code>#性能优化#</code> <code>#页面优化#</code></li>\n</ul>\n</li>\n<li>常见的 JS 延迟加载方式？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[M] <code>&lt;script defer/&gt;</code> defer 属性、<code>&lt;script async /&gt;</code> async 属性、动态创建 DOM、使用 setTimeout 延迟、JS 写在 DOM 文档底部</li>\n</ol>\n</li>\n<li>微信小程序常用的优化手段？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[M] 代码包大小优化分包，独立包，分包预下载；</li>\n<li>[M] 首页渲染优化，预加载，骨架图避免白屏；</li>\n<li>[M] 渲染优化，setData 增量更新，延迟加载，避免一个原子操作大量计算阻塞 ui；</li>\n</ol>\n</li>\n<li>如何优化一个前端巨石应用（）；<ul>\n<li><code>#熟练#</code> <code>#前端架构#</code> <code>#性能优化#</code></li>\n<li>[M] Code Splitting、Lazy Loader；</li>\n<li>[S] 微前端架构；</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"源码安全\"><a href=\"#源码安全\" class=\"headerlink\" title=\"源码安全\"></a>源码安全</h3><ul>\n<li>保护前端 JS 的源码的常见手段？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[M] 代码压缩（uglifyjs）；</li>\n<li>[M] 生产环境不得上传 SourceMap；</li>\n<li>[S] 代码混淆 （Terser）；</li>\n</ol>\n</li>\n<li>CSRF &#x2F; XSRF（跨站请求伪造）<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[S] HTTP 协议中使用 Referer 属性来确定请求来源进行过滤（禁止外域）</li>\n<li>[S] 请求地址添加 token ，使黑客无法伪造用户请求</li>\n<li>[S] HTTP 头自定义属性验证（类似上一条）</li>\n<li>[S] 敏感操作显示验证方式：添加验证码、密码等</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"Web-安全\"><a href=\"#Web-安全\" class=\"headerlink\" title=\"Web 安全\"></a>Web 安全</h3><hr>\n<h2 id=\"工程化\"><a href=\"#工程化\" class=\"headerlink\" title=\"工程化\"></a>工程化</h2><h3 id=\"工程体系\"><a href=\"#工程体系\" class=\"headerlink\" title=\"工程体系\"></a>工程体系</h3><ul>\n<li>前后端分离的本质？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[M] 职责分明，将服务端业务逻辑和前端视觉进行分离，互设边界；</li>\n<li>[M] 前端项目越来越复杂，需要规范流程和引入标准的工程体系。</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"微前端\"><a href=\"#微前端\" class=\"headerlink\" title=\"微前端\"></a>微前端</h3><ul>\n<li>业界常用的微前端框架？<ul>\n<li><code>#了解#</code> <code>#前端框架#</code></li>\n</ul>\n<ol>\n<li>[M] single-spa、蚂蚁 qiankun.js</li>\n<li>[S] 京东 micro-app、字节 garfish</li>\n<li>[P] modern.js、magix、飞冰 icestark、WidgetJS、ara framework、luigi、emp</li>\n</ol>\n</li>\n<li>简单描述下 Qiankun 的工作原理？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[M] single-spa、蚂蚁的 qiankun.js</li>\n</ol>\n</li>\n<li>Qiankun 的子应用配置，为何需要构建 UMD 包？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[M] 子应用 webpack entry 提供 <code>target:umd</code> 以及</li>\n<li>[S] 子应用</li>\n</ol>\n</li>\n<li>微前端框架常用的 CSS 隔离方式？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[P] 自定义标签，以及标签 name 配合选择器</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"低代码\"><a href=\"#低代码\" class=\"headerlink\" title=\"低代码\"></a>低代码</h3><ul>\n<li>简单描述下对 JSON-Schema 协议的理解？</li>\n<li>如何处理表单的关联逻辑？</li>\n</ul>\n<h3 id=\"Bundleless\"><a href=\"#Bundleless\" class=\"headerlink\" title=\"Bundleless\"></a>Bundleless</h3><h3 id=\"CI-CD\"><a href=\"#CI-CD\" class=\"headerlink\" title=\"CI\\CD\"></a>CI\\CD</h3><ul>\n<li>简单列出前端常用的构建平台？<ul>\n<li><code>#了解#</code></li>\n</ul>\n<ol>\n<li>[M] Jenkins、Travis CI</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"综合能力\"><a href=\"#综合能力\" class=\"headerlink\" title=\"综合能力\"></a>综合能力</h3>","excerpt":"","more":"<h1 id=\"前端工程师-Tech-Q-A\"><a href=\"#前端工程师-Tech-Q-A\" class=\"headerlink\" title=\"前端工程师 Tech Q&amp;A\"></a>前端工程师 Tech Q&amp;A</h1><h2 id=\"级别标准\"><a href=\"#级别标准\" class=\"headerlink\" title=\"级别标准\"></a>级别标准</h2><ul>\n<li>P3：实习开发、功能开发</li>\n<li>P4：主要开发、功能模块独立开发</li>\n<li>P5：项目负责人、核心开发、技术问题总结者、技术分享、人员培养</li>\n<li>P6：团队负责人、问题终结者、跨组沟通&amp;协调资源、团队培养提升</li>\n</ul>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><blockquote>\n<p>如下所列前端工程师所涉及<strong>领域</strong>；<br>领域（子领域）设置<strong>题目</strong>若干；<br>题中包含<strong>标签</strong>（涉及深度、提问触发词）&amp; <strong>答题点</strong>（必知 <strong>M</strong>ust know、应知 <strong>S</strong>hould to know、可知 <strong>P</strong>osibility）</p>\n</blockquote>\n<ul>\n<li>语言：JavaScript、ECMAScript、TypeScript、HTML、CSS</li>\n<li>框架&amp;环境：浏览器、研发工具、容器、框架通识</li>\n<li>类库&amp;库生态：React、Libs Ecosystem、数据流、SSR &amp; SSG、BFF</li>\n<li>跨端技术：微信小程序、多端统一、Node、Electron、Native、Hybrid</li>\n<li>研发链路：初始化、包管理、规范标准、调试、编译、构建、测试、发布、监控</li>\n<li>性能&amp;安全：性能指标、性能评估、性能优化、源码安全、Web 安全</li>\n<li>工程化：工程体系、微前端、低代码、Bundleless、CI\\CD、综合能力</li>\n</ul>\n<h2 id=\"语言（Lang-DSL）\"><a href=\"#语言（Lang-DSL）\" class=\"headerlink\" title=\"语言（Lang &amp; DSL）\"></a>语言（Lang &amp; DSL）</h2><h3 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h3><ul>\n<li>简单聊聊 JavaScript 这门语言？<ul>\n<li><code>#了解#</code></li>\n</ul>\n<ol>\n<li>「M」在实现层面：分为语言标准（ECMAScript 是语言标准，JavaScript 只是标准的实现）+ 语言宿主环境（对象模型、WebAPI、N\u001dode Api、WX）；</li>\n<li>「S」语言标准提供语法、词法、基本类型、表达式、语句等；宿主环境提供内置对象、标准模块；</li>\n<li>「P」语法借鉴 C &amp; Java、数据结构借鉴 Java、原型借鉴 Self、函数用法借鉴 Schema、正则借鉴 Perl ；</li>\n</ol>\n</li>\n<li>JavaScript 中有那些常见的内置对象，由谁提供?<ul>\n<li><code>#了解#</code></li>\n</ul>\n<ol>\n<li>「M」值：NaN、undefined、null、Infinity；函数：eval、parseInt、parseFloat；对象：Object、Function、Boolean、Symbol、Error；数字和日期：Math、Date、Number；字符串：String、RegExp；集合：Array、Map、WeakMap、Set、WeakSet；控制对象：Promise、Generator；反射：Proxy、Reflect；</li>\n<li>[S] 内置对象是在程序执行时存在全局作用域的一些 JS 定义的值、函数、对象；</li>\n</ol>\n</li>\n<li>JavaScript 代码在运行时，有那些常见的执行上下文？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>「M」函数执行上下文；</li>\n<li>[S] 全局执行上下文、eval 执行上下文；</li>\n</ol>\n</li>\n<li>JavaScript 通用模块规范，并描述其基本的区别？<ul>\n<li><code>#熟练#</code> <code>#模块化#</code></li>\n</ul>\n<ol>\n<li>「M」CommonJS、AMD、CMD、UMD、ESM；</li>\n<li>「M」CommonJS 通过 require 引入模块、module.export 输出对象和接口。运行时加载，输出值的拷贝；</li>\n<li>「M」ESM 通过 import 引入模块，export 输出模块；编译期输出接口，输出值的引用；浏览器支持原生 ESM ，但只能在 <code>&lt;script type=&quot;module&quot; /&gt;</code> 内使用；</li>\n<li>[S] AMD 和 CMD 均为异步加载模块，分别由 require.js 和 sea.js 提供实现；AMD 依赖前置，CMD 就近依赖；</li>\n<li>[S] UMD 是对 CommonJS、AMD 的整合；</li>\n</ol>\n</li>\n<li>JavaScript 这门语言是否有反射能力？ES6 为了增强这种能力又推出那些新特性？<ul>\n<li><code>#精通#</code> <code>#编程范式#</code> <code>#元编程#</code> <code>#反射#</code> <code>#Proxy#</code> <code>#Reflect#</code> <code>#数据劫持#</code></li>\n</ul>\n<ol>\n<li>[S] 反射是实现元编程的一种方式；JS 诞生之初就有反射能力；eval、Object.{create|defineProperties|defineProperty}、Function.{apply|bind} 均属于反射的一些实现；</li>\n<li>[S] ES6 Proxy &amp; Reflect 作为反射的两个分支（Self-Modification &amp; Intercession）实现；defineProperty 数据劫持有缺陷；规范语言，对之前 Object &amp; Function 原型链上的方法进行规范化；</li>\n<li>[S] 为 JS 之后更多的反射行为提供良好支撑；</li>\n<li>[P] ES7 推出了 Reflect MetaData 提案，增强了反射覆盖场景；</li>\n</ol>\n</li>\n<li>简单描述闭包及其使用场景？<ul>\n<li><code>#熟练#</code> <code>#语言特性#</code> <code>#模块化#</code></li>\n</ul>\n<ol>\n<li>[M] 指有权限访问另外一个函数作用域中变量的函数；其本质是作用域链的特殊应用；</li>\n<li>[S] 创建私有变量；通过闭包对上下文中变量的引用，防止其被 GC 回收（易引发内存溢出）；</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"ECMAScript\"><a href=\"#ECMAScript\" class=\"headerlink\" title=\"ECMAScript\"></a>ECMAScript</h3><ul>\n<li>ECMAScript2017（ES8） 中新增的 Symbol 有何用处？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[M] 用来表示一个独一无二的变量防止命名冲突</li>\n</ol>\n</li>\n<li>ECMAScript2015（ES6） 之后的版本有那些新特性？<ul>\n<li><code>#熟练#</code> <code>#语言特性#</code> <code>#ESNext#</code></li>\n</ul>\n<ol>\n<li>[S] ES7：Reflect MetaData（提案）、Array includes、<code>**</code>运算符；</li>\n<li>[S] ES8：async&amp;await、Object values|entries、String padding、Object.getOwnPropertyDescriptors、SharedArrayBuffer；</li>\n<li>[S] ES9：异步迭代、Promise.finally、正则；</li>\n<li>[S] ES10：Array flat、String trim 函数、Symbol Description、catch 绑定、Function toString 支撑转注释、BigInt；</li>\n<li>[M] ES11：Option Chaining(<code>?.</code>)、Nullish Coalescing(<code>??</code>)、Private Fields(<code>#</code>)、Top Level Await、Dynamic Import、globalThis；</li>\n<li>[S] ES12：String replaceAll、Promise.any、<code>??= ||= &amp;&amp;=</code>、WeakRefs、<code>123_456_789</code> 数字分隔符；</li>\n</ol>\n</li>\n<li>ECMAScript Next（ESNext）中的新特性？<ul>\n<li><code>#精通#</code> <code>#ECMA#</code> <code>#ESNext#</code> <code>#前沿#</code> <code>#语言新特性#</code></li>\n</ul>\n<ol>\n<li>[S] Class instance fields、Static class fields、Private instance methods、Private instance fields、Private static methods、Private static fields、Ergonomic brand checks、Import assertions、Class static blocks</li>\n<li>[P] Hashbang grammar、Top-level await、Arbitrary module namespace identifiers、</li>\n</ol>\n</li>\n<li>简单列出目前 ECMAScript 处于 Stage（4 &amp; 3 &amp; 2） 阶段的提案？<ul>\n<li><code>#精通#</code> <code>#ECMA#</code></li>\n</ul>\n<ol>\n<li>[P] Error Cause（首个由中国团队”阿里淘宝”提出并进入 state-4 阶段的提案）</li>\n<li>[P] ESNext：Record、Tuple</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"TypeScript\"><a href=\"#TypeScript\" class=\"headerlink\" title=\"TypeScript\"></a>TypeScript</h3><ul>\n<li>简单描述下 TypeScript 在项目中的作用？<ul>\n<li><code>#了解#</code></li>\n</ul>\n<ol>\n<li>[M] 是 JS 的超集，可以提前体验 ES Next 提案中的语法糖和特性</li>\n<li>[M] 为 JS 添加类型支撑、JS 的语言超集、利于团队协作；极其强大的类型系统</li>\n</ol>\n</li>\n<li>简单描述下 TypeScript 中常用的工具类型？<ul>\n<li><code>#了解#</code></li>\n</ul>\n<ol>\n<li>[S] <code>Partial&lt;T&gt;</code> <code>Required&lt;T&gt;</code> <code>Readonly&lt;T&gt;</code> <code>Pick&lt;T, K&gt;</code> <code>Omit&lt;T, K&gt;</code></li>\n</ol>\n</li>\n<li>简单描述下 tsconfig.json 中常用的配置项？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[M] <code>compilerOptions.targer</code> <code>module</code> <code>lib</code> <code>outDir</code> <code>types</code> <code>paths</code> <code>sourceMap</code> <code>include</code> <code>exclude</code></li>\n</ol>\n</li>\n<li>TypeScript 是名义类型还是结构类型？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[S] 结构类型</li>\n</ol>\n</li>\n<li>简单描述下 TypeScript 中 Interface 和 Type 的区别？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[M] 均支持拓展（extends），interface 使用 <code>extends</code> 而 type 使用 <code>&amp;</code> 类型合并；支持互相拓展；</li>\n<li>[S] type 支持类型别名，联合类型，元组；interface 支持声明合并；在使用过程中尽可能先使用 interface；</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h3><ul>\n<li>简单列出项目中 HTML 常用的 Meta 标签？<ul>\n<li><code>#了解#</code> <code>#浏览器#</code> <code>#HTML#</code></li>\n</ul>\n<ol>\n<li>[M] <code>&lt;meta charset=&quot;utf-8&quot; /&gt;</code></li>\n<li>[S] SEO 优化 <code>&lt;meta name=“description&quot; contents=“xx,xx”/&gt;</code></li>\n<li>[S] SEO 优化 <code>&lt;meta name=“keywords&quot; contents=“xx,xx”/&gt;</code></li>\n<li></li>\n</ol>\n</li>\n<li>简单列出项目中 HTML 常用的 Link 标签？<ul>\n<li><code>#了解#</code> <code>#浏览器#</code> <code>#HTML#</code></li>\n</ul>\n<ol start=\"2\">\n<li>[M] <code>&lt;link rel=&quot;shortcut icon&quot; type=&quot;image/x-icon&quot; href=&quot;..&quot;&gt;</code></li>\n<li>[M] CSS 外链 <code>&lt;link rel=&quot;stylesheet&quot; href=&quot;...&quot;&gt;</code></li>\n<li>[S] 域名 DNS 预请求 <code>&lt;link rel=&quot;dns-prefetch&quot; href=&quot;...&quot; /&gt;</code></li>\n</ol>\n</li>\n<li>简单描述下 DOM 和 BOM 对象？<ul>\n<li><code>#了解#</code> <code>#浏览器#</code> <code>#宿主对象#</code></li>\n</ul>\n<ol>\n<li>[M] DOM 是文档对象模型，把文档当做为一个对象，定义和处理文档内容的方法和接口；比如 <code>document</code></li>\n<li>[M] BOM 对浏览器对象模型，将浏览器作为一个对象，定义和处理与浏览器交互的方法和接口；比如 <code>window</code> <code>location</code> <code>navigator</code> <code>screen</code></li>\n</ol>\n</li>\n<li>简单描述下事件委托，及其优势和运用场景？<ul>\n<li><code>#熟练#</code> <code>#浏览器原理#</code> <code>#事件#</code></li>\n</ul>\n<ol>\n<li>[M] 利用浏览器事件冒泡机制；在父节点定义监听事件，由父节点监听函数统一处理多个子元素冒泡传过来的事件；</li>\n<li>[S] 减少内存消耗，实现事件的动态绑定；常常运用在各种 UI 事件绑定类库和数据埋点；</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h3><ul>\n<li><p>常用单位以及其区别？</p>\n<ul>\n<li><code>#了解#</code></li>\n</ul>\n<p>[M] px、em、rem、%、vw、vh</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li>[M] px 为屏幕的像素点，em 是父元素的 font-size（默认 16px），vw 为视窗宽度的 1%，vh 为视窗高度的 1%；</li>\n</ol>\n<ul>\n<li>常用的 CSS 预处理库？</li>\n<li><code>#了解#</code></li>\n</ul>\n<ol>\n<li>[M] Less、Sass</li>\n<li>[P] PostCSS、Stylus</li>\n</ol>\n<ul>\n<li>Less &amp; Sass(SCSS) 的区别和各自的优缺点？</li>\n<li><code>#了解#</code></li>\n</ul>\n<ol>\n<li>[M] 区别：在与变量的声明、实现方式（语言不同，Less 基于 JS，Sass 基于 Ruby，当然也有 node-sass 的实现）</li>\n<li>[S] Less 兼容性好，但是不支持循环判断等；Sass 用户基础大，支持函数对象循环判断等，但是依赖于 Ruby 安装容易报错；</li>\n</ol>\n<ul>\n<li>常用的 CSS 架构、规范？</li>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[S] BEM、CSS Modules</li>\n</ol>\n<ul>\n<li>常用的 CSS in JS？</li>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[S] styled-components、TailwindCSS</li>\n</ol>\n<ul>\n<li>通用的浏览器 CSS 差异标准化方案？</li>\n<li><code>#熟练#</code> <code>#兼容性#</code> <code>#初始化#</code></li>\n</ul>\n<ol>\n<li>[S] 引入 normalize.css 或者 reset.css</li>\n</ol>\n<hr>\n<h2 id=\"框架-环境（Frame-VM）\"><a href=\"#框架-环境（Frame-VM）\" class=\"headerlink\" title=\"框架&amp;环境（Frame &amp; VM）\"></a>框架&amp;环境（Frame &amp; VM）</h2><h3 id=\"浏览器\"><a href=\"#浏览器\" class=\"headerlink\" title=\"浏览器\"></a>浏览器</h3><ul>\n<li>浏览器事件触发时，其传播的阶段？<ul>\n<li><code>#了解#</code></li>\n</ul>\n<ol>\n<li>[M] Capturing（捕获） &gt; Target（目标触发） &gt; Bubbling（冒泡）</li>\n</ol>\n</li>\n<li>Cookie、localStorage 以及 sessionStorage 之间的区别？<ul>\n<li><code>#了解#</code></li>\n</ul>\n<ol>\n<li>[M] Cookie：保存在客户端的数据，记录你在网页的一些行为数据。 sessionStorage：保存在客户端的数据，生命周期是同源同窗口，只要该窗口没有关闭就一直可用共享。 localStorage：保存在客户端的数据，一直有效；</li>\n<li>[S] Cookie size &lt;&#x3D; 4Kb；Storage size &lt;&#x3D; 5Mb；</li>\n</ol>\n</li>\n<li>浏览器出于安全提出了同源策略，何种情况下会引发跨域以及通用解决办法？<ul>\n<li><code>#了解#</code></li>\n</ul>\n<ol>\n<li>[M] 域名、子域名、端口号、协议不同均不属于一个域；</li>\n<li>[S] jsonp、documents.domain + iframe、CORS、iframe + postMessage、websocket；</li>\n<li>[S] 处于一级域名下的应用可以设置 document.domain 在相同父域，可以获取 cookie；</li>\n</ol>\n</li>\n<li>简单说明 JSONP 的原理，及其局限性？<ul>\n<li><code>#了解#</code></li>\n</ul>\n<ol>\n<li>[M] 利用了<code>&lt;script&gt;</code>标签没有跨域限制，可以发起 get 请求；</li>\n<li>[S] 兼容性较好，但仅限于 Get 请求；</li>\n</ol>\n</li>\n<li>简单描述下浏览器的渲染机制？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[S] 处理 HTML 文档构建 DOM 树、处理 CSS 文档构建 CSSOM 树、DOM 与 CSSOM 合并为渲染树；</li>\n</ol>\n</li>\n<li>简单描述下浏览器的缓存机制？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[S] 浏览器缓存分为强缓存和协商缓存；</li>\n<li>[P] 强缓存直接从浏览器中获取资源，通过请求头 <code>Cache-Control</code> 控制；协商缓存先访问服务缓存是否过期，在决定是否使用本地资源，通过请求头控制；</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"研发工具\"><a href=\"#研发工具\" class=\"headerlink\" title=\"研发工具\"></a>研发工具</h3><ul>\n<li>如何将项目的格式化进行统一？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[S] 使用 .editorconfig 定义代码格式化风格；或者提交 .vscode settings.json 约束项目；</li>\n</ol>\n</li>\n<li>常用的 VS Code Editor 配置？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[S] .vscode 文件下通常使用 extensions.json 声明项目依赖插件；launch.json 配置 Debug 相关的配置；settings.json 用来覆盖本地用户的基本配置（文件隐藏、文件编码、格式化风格）</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"容器\"><a href=\"#容器\" class=\"headerlink\" title=\"容器\"></a>容器</h3><hr>\n<h2 id=\"类库-生态（Libs-Ecosystem）\"><a href=\"#类库-生态（Libs-Ecosystem）\" class=\"headerlink\" title=\"类库&amp;生态（Libs &amp; Ecosystem）\"></a>类库&amp;生态（Libs &amp; Ecosystem）</h2><h3 id=\"React\"><a href=\"#React\" class=\"headerlink\" title=\"React\"></a>React</h3><ul>\n<li>React 在 16.x 具体推出那些新特性？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[M] (16.1) render 返回新增支持字符串和数组类型、Error Boundaries、React Dom Portal、Fiber、React.Fragment</li>\n<li>[M] (16.3) createContext、createRef、forwardRef、生命周期函数更新</li>\n<li>[M] (16.6) React.memo、React.lazy、React.Suspense、static getDerivedStateFromError、</li>\n<li>[M] (16.7) React Hooks（useState、useEffect、useMemo、useCallBack、useContext）</li>\n<li>[M] (16.8) React Concurrent Rendering</li>\n</ol>\n</li>\n<li>React 在 17.x 推出的新特性？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n</li>\n<li>React 在目前的 18.x 推出的新特性？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n</li>\n<li>简单说明下为何两个不同版本的 React 不能运行在一个全局上下文？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Ecosystem\"><a href=\"#Ecosystem\" class=\"headerlink\" title=\"Ecosystem\"></a>Ecosystem</h3><ul>\n<li>React 运行时生态类库？<ul>\n<li><code>#熟练#</code> <code>#Ecosystem#</code> <code>#初始化#</code></li>\n</ul>\n<ol>\n<li>[M] Official：react、react-dom、react-update、react-refresh、react-reconciler</li>\n<li>[M] State &amp; Flow：@reduxjs&#x2F;toolkit、redux、redux-saga、mobx、iflux2 &amp; plume2、dva</li>\n<li>[M] Hooks：ahooks、react-use、react-query</li>\n<li>[M] UI：antd、rc-*(antd core)、antd-mobile、antd-pro</li>\n<li>[M] Styles：styled-components、classnames</li>\n<li>[M] Router：react-router、react-router-dom、redux-router</li>\n<li>[S] Framework：umi</li>\n<li>[S] CLI &amp; Layer：vite、create-react-app</li>\n<li>[S] Analytics：react-ga、@sentry&#x2F;react</li>\n<li>[S] Draggable：react-dnd、react-draggable</li>\n<li>[S] Charts：echarts、AntV</li>\n<li>[P] SSR &amp; SSG：next.js、gatsby</li>\n<li>[P] I18n：react-intl</li>\n<li>[P] Async Load：react-loadable、react-script</li>\n<li>[P] Long List：react-virtualized、react-windows、react-scroll、react-infinite-scroller</li>\n<li>[P] Docs：storybook、huge</li>\n</ol>\n</li>\n<li>Taro 生态类库？<ol>\n<li>Official：@tarojs&#x2F; taro、@tarojs&#x2F; runtime、@tarojs&#x2F; react、@tarojs&#x2F; components</li>\n<li>[M] Tracing：umtrack-alipay、umtrack-wx</li>\n<li>[M] CLI：@tarojs&#x2F; cli、@tarojs&#x2F; mini-runner、@tarojs&#x2F; plugin-inject、@tarojs&#x2F; webpack-runner</li>\n</ol>\n</li>\n<li>Electron 生态类库？<ol>\n<li>[M] Official：electron、electron-log</li>\n<li>[M] Release &amp; Deploy：electron-builder、electron-packager、electron-updater、electron-reload、electron-notarize</li>\n<li>[M] Development：electron-debug</li>\n<li>[S] Compiler：electron-rebuild、node-gyp</li>\n<li>[M] System：getmac、systeminformation、ip</li>\n<li>[S] Devices：usb、escpos</li>\n<li>[S] Version Manage：semver</li>\n</ol>\n</li>\n<li>React Native 生态类库？<ol>\n<li>[M] Official：react、react-native</li>\n<li>[M] Navigator：react-navigation、native-navigation</li>\n<li>[M] Data Storage：realm、sqlite3、react-native-storage</li>\n<li>[M] Scrollable：react-native-scrollable-tab-view、</li>\n<li>[M] Devices：react-native-camera</li>\n<li>[M] Logs：</li>\n<li>[M] UI：ant-design-mobile</li>\n<li>[M] Performance：sentry、</li>\n<li>[M] Debugging：chrome-dev-tools、flipper</li>\n<li>[M] Testing：enzyme、detox、jest</li>\n<li>[S] Notification：jpush</li>\n</ol>\n</li>\n<li>CSS 类库（CSS Tools）？<ol>\n<li>[S] Resets：normalize.css、reset.css、reset-css</li>\n<li>[S] Animate：animate.css</li>\n<li>[S] Charts：charts.css</li>\n<li>[S] Productor：ant.design、semi.design</li>\n</ol>\n</li>\n<li>前端项目运行时生态类库？<ol>\n<li>[S] Validator：joi、async-validator、yup</li>\n<li>[S] Testing：mocha、jest、cypress、enzyme</li>\n<li>[S] Assertion：chai</li>\n</ol>\n</li>\n<li>前端项目开发时生态类库？<ol>\n<li>[M] Request：axios、isomorphic-fetch</li>\n<li>[M] Polyfill：core-js</li>\n<li>[S] Data：immutable、immer、deepmerge</li>\n<li>[M] Date：moment、day.js</li>\n<li>[S] Testing：jest、mocha、jasmine</li>\n<li>[S] Assertion：chai、assert</li>\n<li>[S] Utils：lodash、underscore</li>\n<li>[S] E2E：cypress、enzyme</li>\n<li>[S] Command：commander</li>\n</ol>\n</li>\n<li>前端项目编译时生态类库？<ol>\n<li>[S] Compiler：babel、tsc、esbuild</li>\n<li>[S] Bundled：webpack、rollup、parser</li>\n<li>[S] Unbundled：snowpack、vite</li>\n<li>[S] Mangler &amp; Compressor：terser、javascript-obfuscator、uglify-js、babel-minify</li>\n<li>[S] CLI &amp; Boilerplate：create-react-app、vite</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"数据流\"><a href=\"#数据流\" class=\"headerlink\" title=\"数据流\"></a>数据流</h3><ul>\n<li>简单描述下单向数据流（flux）？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n</li>\n<li>如何简单实现一个不可变数据类型？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[M] 采用 ES6 Proxy &amp; Reflect 代理 get | set | apply 行为，以及 DeepCopy</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"SSR-SSG\"><a href=\"#SSR-SSG\" class=\"headerlink\" title=\"SSR &amp; SSG\"></a>SSR &amp; SSG</h3><ul>\n<li>CSR、SSR、BSR 以及 SSG 之间的区别与优劣？<ul>\n<li><code>#了解#</code> <code>#SEO#</code> <code>#前后端同构#</code> <code>#白屏#</code> <code>#性能优化#</code></li>\n</ul>\n<ol>\n<li>[M] CSR（Client Side Rendering）客户端渲染；</li>\n<li>[M] SSR（Server Side Rendering）服务端渲染；</li>\n<li>[M] SSG（Static Site Generation）静态站点生成；</li>\n</ol>\n</li>\n<li>有那些常用的 SSR &amp; SSG 框架，如何简单实现 SSR？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[S] Next.js、Gatsby</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"Node-BFF\"><a href=\"#Node-BFF\" class=\"headerlink\" title=\"Node BFF\"></a>Node BFF</h3><ul>\n<li>简单描述下对 Egg 的理解？<ul>\n<li><code>#了解#</code></li>\n</ul>\n<ol>\n<li>[M] Egg 是已 Koa 为内核，遵循约定大于配置的 Web 框架；所有功能基于插件形式完成拓展；</li>\n</ol>\n</li>\n<li>简单描述下 Koa 洋葱模型的实现原理？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n</li>\n<li>简单描述下 Egg Loader 的加载顺序？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[M] framework &gt; middleware &gt; plugin &gt; app（router &gt; service &gt; controller）</li>\n</ol>\n</li>\n<li>NestJS 中 IoC 的实现机制？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[M] 基于 reflect-metadata 的提供的 definedMetadata | getMetadata &amp; Decorator 的能力对类、类的成员、类的方法、类方法参数进行的注释；并在编译器提取了对应 meta 信息并实例化 ；</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h2 id=\"跨端技术\"><a href=\"#跨端技术\" class=\"headerlink\" title=\"跨端技术\"></a>跨端技术</h2><h3 id=\"微信小程序\"><a href=\"#微信小程序\" class=\"headerlink\" title=\"微信小程序\"></a>微信小程序</h3><ul>\n<li>简述一下常用的生命周期<ul>\n<li><code>#了解#</code></li>\n</ul>\n<ol>\n<li>[M] onLoad：页面加载，调一次；onShow：页面显示，每次打开页面都调用；onReady：初次渲染完成，调一次；onHide：页面隐藏，当 navigateTo 或底部 tab 切换时调用；onUnload：页面卸载，当 redirectTo 或 navigateBack 时调用；</li>\n</ol>\n</li>\n<li>简单描述下小程序的工作原理？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[S] 小程序分为两个部分 webview 和 appService，webview 用来展现 UI，appService 用来处理业务逻辑、数据及接口调用，它们在两个进程中运行，通过系统层 JSBridge 实现通信，完成 UI 渲染、事件处理。</li>\n</ol>\n</li>\n<li>小程序双线程架构原理？<ul>\n<li><code>#精通#</code></li>\n</ul>\n<ol>\n<li>[S] 小程序应用是基于双线程模型的，渲染层通过 Webview 作为渲染载体；逻辑层则通过 JsCore 来作为 JS 运行时；</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"多端统一\"><a href=\"#多端统一\" class=\"headerlink\" title=\"多端统一\"></a>多端统一</h3><ul>\n<li>简单描述下 Taro3.0 原理？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[S] Taro3.0 从编译型转向了运行时架构</li>\n<li>[S] 在运行时模拟实现了 DOM、BOM API，使得前端架构可以运行在小程序运行时环境中</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"Node\"><a href=\"#Node\" class=\"headerlink\" title=\"Node\"></a>Node</h3><ul>\n<li>require 的模块加载机制？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[M] 先计算模块路径；如果模块在缓存里面，取出缓存；加载模块的输出模块的 exports 属性即可</li>\n</ol>\n</li>\n<li>线上如何排查问题？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[M] Sentry 监控；</li>\n<li>[S] 全链路式日志，需要借助 apm 工具，opentracing，zipkin 等；</li>\n<li>[S] 阿里云 alinode；</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"Electron\"><a href=\"#Electron\" class=\"headerlink\" title=\"Electron\"></a>Electron</h3><ul>\n<li>简单描述下对 Electron 的理解？<ul>\n<li><code>#了解#</code></li>\n</ul>\n<ol>\n<li>[S] Electron 是一个可以使用 Web 技术（JS、HTML、CSS）来创建跨平台原生桌面应用的框架。借助 Node API 可以使用纯 JS 来调用丰富的原生 API。</li>\n</ol>\n</li>\n<li>简单描述下 Electron 的进程模型和以及各自的职责？<ul>\n<li><code>#了解#</code></li>\n</ul>\n<ol>\n<li>[S] Main Process 主进程：进程间通信（IpcMain、webContent）、窗口管理、Node Add-on 暴露、全局事务（应用生命周期、session）；</li>\n<li>[S] Renderer Process 渲染进程：负责 web 页面容器构建渲染、业务处理；</li>\n</ol>\n</li>\n<li>解释下 Electron 构建时为何需要 Rebuild？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[P] Electron 内置了 V8 和 Node，而部分 Node 能力是通过 C++ Add-on 实现的；在构建 Electron 应用时，需要针对这些 Add-on 按 Node 版本、Electron 版本、OS Platform、CPU Arch 重新进行编译；</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"Native\"><a href=\"#Native\" class=\"headerlink\" title=\"Native\"></a>Native</h3><h3 id=\"Hybrid-Web-APP\"><a href=\"#Hybrid-Web-APP\" class=\"headerlink\" title=\"Hybrid Web APP\"></a>Hybrid Web APP</h3><ul>\n<li>如何解决移动端 Web 点击时间的延迟？<ul>\n<li><code>#了解#</code></li>\n</ul>\n<ol>\n<li>[M] <code>&lt;meta /&gt;</code> 标签禁用网页缩放、FastClick</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h2 id=\"研发链路（Lint-Compile-Builder-Package）\"><a href=\"#研发链路（Lint-Compile-Builder-Package）\" class=\"headerlink\" title=\"研发链路（Lint &amp; Compile &amp; Builder &amp; Package）\"></a>研发链路（Lint &amp; Compile &amp; Builder &amp; Package）</h2><h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><ul>\n<li>如何重装 Node 环境（以 Mac 环境为例）？<ol>\n<li>[P] 借助 npkill 对本地 node_modules 进行清理</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"包管理\"><a href=\"#包管理\" class=\"headerlink\" title=\"包管理\"></a>包管理</h3><ul>\n<li>简单列出一些常用的 CLI 工具或者 Boilerplate？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[S] create-react-app、vite</li>\n</ol>\n</li>\n<li>简单列出常用的包管理工具？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[M] npm（.npmrc、.npmignore、package.json、package-lock.json）、yarn（.yarnrc、yarn.lock）、pnpm（pnpm-lock.yaml）、tnpm；</li>\n<li>[S] nvm、npx（npm 5.2+ 内置；相当于提供两个 bin）</li>\n</ol>\n</li>\n<li>简单列出常用的 NPM 命令？<ul>\n<li><code>#熟练#</code> <code>#工程化#</code> <code>#脚手架#</code> <code>#命令行#</code></li>\n</ul>\n<ol>\n<li>[M] <code>npm i|install|uninstall</code> <code>npm run</code> <code>npm help</code> <code>npm init</code> <code>npm publish|unpublish</code> <code>npm start|restart</code> <code>npm info</code> <code>npm list</code> <code>npm view|version</code></li>\n<li>[S] <code>npx</code> <code>npm config</code> <code>npm link</code> <code>npm rebuild</code> <code>npm clean</code> <code>npm run-script</code> <code>npm whoami</code> <code>npm login|logout</code> <code>npm docs</code> <code>npm adduser</code></li>\n<li>[S] run-scripts hook <code>pre &amp; post</code></li>\n</ol>\n</li>\n<li>简单描述下 NPM 安装依赖的大致过程？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[S] 检查配置（项目 .npmrc、全局用户 .npmrc）;</li>\n<li>[S] 确定依赖版本，构建依赖树；package.json 优先 package-lock.json；</li>\n<li>[S] 下载包资源；首先查询本地是否存在缓存版本，如没有则下载并添加本地缓存，并将包解压到项目 node_modules 下；</li>\n<li>[S] 生成 lockfile 文件（npm 5.x+）；</li>\n</ol>\n</li>\n<li>简单描述下 NPX 的大致流程？<ul>\n<li><code>#熟练#</code> <code>#脚手架#</code> <code>#命令行#</code></li>\n</ul>\n<ol>\n<li>[M] <code>npx</code> 命令是 <code>npm i xx --global &amp; .bin/xx</code> 的快捷方式</li>\n</ol>\n</li>\n<li>NPM Package Version 遵循了什么协议，并简单说明该协议？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[M] 遵循了 SemVer2.0 协议规范；x.y.z-{pre-release}；</li>\n<li>[S] <code>&#123;major&#125;.&#123;minor&#125;.&#123;patch&#125;</code> Major 表示不兼容的修改，Minor 表示向下兼容的新增特性，Patch 表示向下兼容的问题修复；</li>\n<li>[P] NPM 命令在不满足 SemVer2.0 规范的 Package.json 下无法执行；</li>\n</ol>\n</li>\n<li>公共类库如何处理即将弃用的功能（API、组件、模块、依赖）？<ul>\n<li><code>#熟练#</code> <code>#组件化#</code> <code>#开源项目#</code></li>\n</ul>\n<ol>\n<li>[M] 更新说明文档以及类型描述文件让使用者知道这个 Break Change；</li>\n<li>[S] 在某个阶段的 Minor 版本持续进行 Warning 级别提示（一般跨域一整个 Major），然后在下个 Major 版本移除；</li>\n</ol>\n</li>\n<li>封装一个类库时应该遵循哪条基本原则？<ul>\n<li><code>#熟练#</code> <code>#开源项目#</code></li>\n</ul>\n<ol>\n<li>DRY</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"规范标准\"><a href=\"#规范标准\" class=\"headerlink\" title=\"规范标准\"></a>规范标准</h3><ul>\n<li>JavaScript 基本编码规范<ul>\n<li><code>#熟练#</code> <code>#代码洁癖#</code> <code>#强迫症#</code></li>\n</ul>\n<ol>\n<li>[M] <code>=== !==</code> 代替 <code>== !=</code>；不要在对象原型（<code>Array.prototype|Date.prototype</code>）上添加自定义方法；for | if 语句使用大括号；代码中的地址时间等使用常量替代；不使用 <code>var</code> 声明变量；</li>\n<li>[M] 使用大驼峰法对组件&amp;类命名，使用小驼峰法来对变量&amp;函数名命名</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h3><ul>\n<li>H5 页面的调试手段？<ul>\n<li><code>#了解#</code></li>\n</ul>\n<ol>\n<li>[M] 微信开发者工具</li>\n<li>[S] vsconsole</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"编译-构建\"><a href=\"#编译-构建\" class=\"headerlink\" title=\"编译&amp;构建\"></a>编译&amp;构建</h3><ul>\n<li>前端项目常用构建工具<ul>\n<li><code>#了解#</code></li>\n</ul>\n<ol>\n<li>[M] Webpack、Babel；</li>\n<li>[S] Vite、Parcel、Rollup、TSC；</li>\n<li>[P] EsBuild、Snowpack；</li>\n</ol>\n</li>\n<li>Webpack 基本原理以及构建流程<ul>\n<li><code>#熟练#</code> <code>#实现原理#</code></li>\n</ul>\n<ol>\n<li>[M] Webpack 是一个静态模块打包工具；讲所需要的模块组合成一个或多个 bundles 用与浏览器、Node 或者 Electron 使用；</li>\n<li>[S] 代码字符串 &gt; AST &gt; Transform &gt; AST(Low) &gt; 代码字符串；</li>\n</ol>\n</li>\n<li>简单描述下 Vite 的特性原理，为何快？<ul>\n<li><code>#熟练#</code> <code>#实现原理#</code></li>\n</ul>\n<ol>\n<li>[S] Vite 在开发时采用 Esbuild 作为 模块构建器</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><ul>\n<li>常用的测试框架？<ul>\n<li><code>#了解#</code></li>\n</ul>\n<ol>\n<li>[M] UT：Jest、Mocha</li>\n<li>[S] E2E：Selenium、Cypress、Puppeteer</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h3><ul>\n<li>前端项目如何构建一个标准包？<ul>\n<li><code>#了解#</code></li>\n</ul>\n<ol>\n<li>[S] 在配置的依赖均倒置，运行时通过宿主来提供环境注入（global 对象、script 提供 config）；</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"监控\"><a href=\"#监控\" class=\"headerlink\" title=\"监控\"></a>监控</h3><ul>\n<li>简单列出常用的前端数据监控的类库？<ul>\n<li><code>#了解#</code></li>\n</ul>\n<ol>\n<li>[S] @sentry&#x2F;react、fundebug、ARMS、umeng</li>\n</ol>\n</li>\n<li>简单描述下前端数据采集及其基本原理？<ul>\n<li><code>#了解#</code></li>\n</ul>\n<ol>\n<li>[S] 数据采集通常分为：环境信息、性能信息、异常信息、业务信息（交互数据、业务异常）</li>\n<li>[S] 事件委托</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h2 id=\"性能-安全（Performance-Security）\"><a href=\"#性能-安全（Performance-Security）\" class=\"headerlink\" title=\"性能&amp;安全（Performance &amp; Security）\"></a>性能&amp;安全（Performance &amp; Security）</h2><h3 id=\"性能指标\"><a href=\"#性能指标\" class=\"headerlink\" title=\"性能指标\"></a>性能指标</h3><ul>\n<li>简单列出常用的前端 Web 应用的性能指标？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[S] First Contentful Paint(FCP) 首次内容绘制、Largest Contentful Paint (LCP) 最大内容绘制、First Input Delay(FID) 首次输入延迟；</li>\n<li>[P] First Paint(FP) 首次绘制、First Meaningful Paint(FMP) 首次有效绘制、Cumulative Layout Shift(CLS) 累积布局偏移、Time to Interactive(TTI) 可交互时间、DOMContentLoaded(DCL)、Load(L)；</li>\n</ol>\n</li>\n<li>简单描述下性能指标的采集原理（exp. FCP、LCP、FID）？<ul>\n<li><code>#精通#</code> <code>#性能优化#</code> <code>#实现原理#</code></li>\n</ul>\n<ol>\n<li>[S] 通过 Performance Observer API 采集；</li>\n<li>[S] 性能监测相关 API：Paint Timing、Event Timing、Navigation Timing、Paint Timing；</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"性能评估\"><a href=\"#性能评估\" class=\"headerlink\" title=\"性能评估\"></a>性能评估</h3><ul>\n<li>简单列出常用的 Web 应用性能评估（采集）工具？<ul>\n<li><code>#了解#</code></li>\n</ul>\n<ol>\n<li>[M] Chrome DevTools、React DevTools</li>\n<li>[P] Lighthouse、WebPageTest、Relyzer</li>\n</ol>\n</li>\n<li>如果使用 React 开发的页面响应慢，有那些检测手段？<ul>\n<li><code>#了解#</code></li>\n</ul>\n<ol>\n<li>[M] console.time、timeEnd 埋点</li>\n<li>[M] 借助 React DevTools 可以查看每个组件的渲染和重绘耗时</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"性能优化\"><a href=\"#性能优化\" class=\"headerlink\" title=\"性能优化\"></a>性能优化</h3><ul>\n<li>常用的性能优化手段？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[M] 代码压缩：Code Splitting、Tree-Shaking、Gzip</li>\n<li>[M] 修改加载策略</li>\n<li>[M] 执行自定义渲染</li>\n<li>[S] 体验优化（加载动画、骨架图）</li>\n<li>[S] DNS 预获取</li>\n</ol>\n</li>\n<li>常见的 JS 代码压缩工具及其简单原理？<ul>\n<li><code>#熟练#</code> <code>#性能优化#</code> <code>#页面优化#</code> <code>#构建优化#</code></li>\n</ul>\n<ol>\n<li>[M] uglifyjs、terser</li>\n</ol>\n</li>\n<li>简单描述下 Tree-Shaking 及其原理和使用建议？<ul>\n<li><code>#熟练#</code> <code>#性能优化#</code> <code>#页面优化#</code></li>\n</ul>\n</li>\n<li>常见的 JS 延迟加载方式？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[M] <code>&lt;script defer/&gt;</code> defer 属性、<code>&lt;script async /&gt;</code> async 属性、动态创建 DOM、使用 setTimeout 延迟、JS 写在 DOM 文档底部</li>\n</ol>\n</li>\n<li>微信小程序常用的优化手段？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[M] 代码包大小优化分包，独立包，分包预下载；</li>\n<li>[M] 首页渲染优化，预加载，骨架图避免白屏；</li>\n<li>[M] 渲染优化，setData 增量更新，延迟加载，避免一个原子操作大量计算阻塞 ui；</li>\n</ol>\n</li>\n<li>如何优化一个前端巨石应用（）；<ul>\n<li><code>#熟练#</code> <code>#前端架构#</code> <code>#性能优化#</code></li>\n<li>[M] Code Splitting、Lazy Loader；</li>\n<li>[S] 微前端架构；</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"源码安全\"><a href=\"#源码安全\" class=\"headerlink\" title=\"源码安全\"></a>源码安全</h3><ul>\n<li>保护前端 JS 的源码的常见手段？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[M] 代码压缩（uglifyjs）；</li>\n<li>[M] 生产环境不得上传 SourceMap；</li>\n<li>[S] 代码混淆 （Terser）；</li>\n</ol>\n</li>\n<li>CSRF &#x2F; XSRF（跨站请求伪造）<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[S] HTTP 协议中使用 Referer 属性来确定请求来源进行过滤（禁止外域）</li>\n<li>[S] 请求地址添加 token ，使黑客无法伪造用户请求</li>\n<li>[S] HTTP 头自定义属性验证（类似上一条）</li>\n<li>[S] 敏感操作显示验证方式：添加验证码、密码等</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"Web-安全\"><a href=\"#Web-安全\" class=\"headerlink\" title=\"Web 安全\"></a>Web 安全</h3><hr>\n<h2 id=\"工程化\"><a href=\"#工程化\" class=\"headerlink\" title=\"工程化\"></a>工程化</h2><h3 id=\"工程体系\"><a href=\"#工程体系\" class=\"headerlink\" title=\"工程体系\"></a>工程体系</h3><ul>\n<li>前后端分离的本质？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[M] 职责分明，将服务端业务逻辑和前端视觉进行分离，互设边界；</li>\n<li>[M] 前端项目越来越复杂，需要规范流程和引入标准的工程体系。</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"微前端\"><a href=\"#微前端\" class=\"headerlink\" title=\"微前端\"></a>微前端</h3><ul>\n<li>业界常用的微前端框架？<ul>\n<li><code>#了解#</code> <code>#前端框架#</code></li>\n</ul>\n<ol>\n<li>[M] single-spa、蚂蚁 qiankun.js</li>\n<li>[S] 京东 micro-app、字节 garfish</li>\n<li>[P] modern.js、magix、飞冰 icestark、WidgetJS、ara framework、luigi、emp</li>\n</ol>\n</li>\n<li>简单描述下 Qiankun 的工作原理？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[M] single-spa、蚂蚁的 qiankun.js</li>\n</ol>\n</li>\n<li>Qiankun 的子应用配置，为何需要构建 UMD 包？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[M] 子应用 webpack entry 提供 <code>target:umd</code> 以及</li>\n<li>[S] 子应用</li>\n</ol>\n</li>\n<li>微前端框架常用的 CSS 隔离方式？<ul>\n<li><code>#熟练#</code></li>\n</ul>\n<ol>\n<li>[P] 自定义标签，以及标签 name 配合选择器</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"低代码\"><a href=\"#低代码\" class=\"headerlink\" title=\"低代码\"></a>低代码</h3><ul>\n<li>简单描述下对 JSON-Schema 协议的理解？</li>\n<li>如何处理表单的关联逻辑？</li>\n</ul>\n<h3 id=\"Bundleless\"><a href=\"#Bundleless\" class=\"headerlink\" title=\"Bundleless\"></a>Bundleless</h3><h3 id=\"CI-CD\"><a href=\"#CI-CD\" class=\"headerlink\" title=\"CI\\CD\"></a>CI\\CD</h3><ul>\n<li>简单列出前端常用的构建平台？<ul>\n<li><code>#了解#</code></li>\n</ul>\n<ol>\n<li>[M] Jenkins、Travis CI</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"综合能力\"><a href=\"#综合能力\" class=\"headerlink\" title=\"综合能力\"></a>综合能力</h3>"},{"layout":"post","title":"MacOS 装机 v1.0","date":"2022-02-20T04:49:06.000Z","_content":"\n# MacOS 装机 v1.0\n\n> 「Level ｜ Type ｜ Origin」：建议程度｜类型｜安装源\n\n- Level（建议程度）\n  - M（Must） 必须\n  - S（Shall） 要\n  - R（Recommend） 推荐\n- Type（类型）\n  - Env（Lang、CLI、Global、REPL、Compiler、Tool、PM）\n  - APP（Desktop、GUI Client、IDE、Product）\n  - VM（Runtime、VM、Container）\n  - Extension（Plugin、Configuration）\n- Origin（安装源）\n  - App Store\n  - Github\n  - Official Website\n  - Homebrew（System PM）\n  - Docker Hub\n  - Package Manager（MVN、NPM、Inner Registry）\n\n## Reference\n\n1. 通用环境\n2. 场景开发（Frontend、Backend、iOS、Android、Service）\n3. 其他（WebApp、Extension、App）\n\n## 通用环境\n\n- Brew「M ｜ Env ｜ Github or Run Shell Scripts」\n\n```sh\n# install homebrew\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\n# if network error(403), download shell script\nsh install.sh\n/bin/bash -c install.sh\n\n# brew 切中科大镜像（required git）\ncd \"$(brew --repo)\"\ngit remote set-url origin git://mirrors.ustc.edu.cn/brew.git\ncd \"$(brew --repo)/Library/Taps/homebrew/homebrew-core\"\ngit remote set-url origin git://mirrors.ustc.edu.cn/homebrew-core.git\n\n# download cache folder(can remove all)\nls ~/Library/Caches/Homebrew/downloads\n```\n\n- Git「M ｜ CLI ｜ Brew or Xcode」\n\n```sh\ngit config --global alias.lg \"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<\\%an>%Creset' --abbrev-commit --\"\n```\n\n```sh\nbrew install git # or install xcode(include git)\n\n# configuration\ngit config --global user.name \"***\"\ngit config --global user.email \"***\"\n\ngit config --global alias.lg \\\"log --color --graph --pretty=format:\\'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<\\%an>%Creset' --abbrev-commit --\"\n```\n\n- Chrome「M ｜ Desktop ｜ Brew or https://google.cn/chrome」\n\n```sh\nbrew install --cask google-chrome\nbrew install --cask google-chrome —appdir=/Applications Chrome\n\n# sign in and sync you setting & extension & bookmark\n```\n\n- Visual Studio Code「S ｜ IDE ｜ Brew or https://code.visualstudio.com」\n\n```sh\nbrew install --cask visual-studio-code\n\n# ⇧ + ⌘ + p > shell command: install 'code....\ncode --version\n\n# sign in and sync you setting & extension\n```\n\n- Docker「S ｜ Env ｜ Brew」\n\n```sh\n# gui + cli\nbrew install --cask docker\n```\n\n- iTerm2「R ｜ IDE ｜ Brew」\n\n```sh\nbrew install --cask iterm2\n\n# extensions\n```\n\n- Oh My Zsh「R ｜ CLI ｜ Github or Run Shell」\n\n```sh\nsh -c \"$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\n```\n\n- ClashX「R ｜ CLI ｜ Github」\n\n```sh\nbrew install --cask clashx\n\n# inject your subscribe & token\n```\n\n### Tools\n\n- Command Line「S ｜ CLI ｜ Brew」\n\n```shell\n# ssh & ssl\nbrew install telnet\nbrew install ca-certificates\n\n# compress\nbrew install --cask rar # may be blocked, allow anyway\nbrew install unzip\nbrew install zstd\n\n# network\nbrew install htop # top replacement\nbrew install procs # ps replacement\nbrew install dog # dig replacement\nbrew install curl\nbrew install httpie # curl replacement\n\n# folder\nbrew install cloc # code analysis\nbrew install exa # ls replacement\nbrew install rename\nbrew install tree\nbrew install broot # tree replacement, overview\nbrew install zoxide # cd replacement,\nbrew install bat # cat replacement, line number & highlight\nbrew install fx # json viewer, line number & highlight\nbrew install hexyl # hex viewer\nbrew install diff-so-fancy # diff-highlight\nbrew install fd # find replacement\nbrew install ripgrep # grep replacement\nbrew install mcfly # ctrl-r replacement\nbrew install choose # cut replacement\nbrew install duf # du replacement\nbrew install ncdu # du replacement\n```\n\n- Xnip「S ｜ Global Tools ｜ App Store」\n- Alfred「S ｜ GUI Client ｜ App Store」\n\n- Postman「R ｜ GUI Client ｜ App Store or Brew」\n\n```sh\nbrew install --cask postman\n# sign in and sync your settings\n```\n\n- Sublime Merge「R ｜ GUI Client ｜ Brew」\n\n```sh\nbrew install --cask sublime-merge\n```\n\n- DevToys「R ｜ GUI Client ｜ Github & Brew」\n\n```sh\nbrew install --cask devtoys\n```\n\n- SnippetsLab「R ｜ GUI Client ｜ App Store」\n- Terminus「R ｜ GUI Client ｜ App Store」\n- Git Streaks「R ｜ GUI Client ｜ App Store」\n- SwitchHosts「R ｜ Desktop ｜ GitHub」\n- OSS Browser「R ｜ GUI Client ｜ GitHub」\n- Apifox「R ｜ GUI Client ｜https://apifox.cn」\n\n## 场景开发\n\n### Frontend（Web、小程序、Hybrid）\n\n- NVM「M ｜ PM ｜ Brew」\n\n```bash\n# nvm\nbrew install nvm\n\nmkdir ~/.nvm\nvi ~/.zshrc # add\nexport NVM_DIR=\"$HOME/.nvm\"\n    [ -s \"$(brew --prefix)/opt/nvm/nvm.sh\" ] && \\. \"$(brew --prefix)/opt/nvm/nvm.sh\" # This loads nvm\n    [ -s \"$(brew --prefix)/opt/nvm/etc/bash_completion.d/nvm\" ] && \\. \"$(brew --prefix)/opt/nvm/etc/bash_completion.d/nvm\" # add this to ~/.zshrc or .bashrc\n```\n\n- Node「M ｜ Env ｜ NVM」\n\n```bash\n# node LTS\nnvm install 12 # 12.22.12\nnvm install 14 # 14.19.3\nnvm install 16 # 16.15.0\nnvm install 18 # latest\n\n# nvm set default(new terminal session keeping)\nnvm alias default ** # lts version, install first\n\n# npmrc & registry\nnpm login --registry=https://registry.npmjs.com\nnpm login --registry=https://registry.npmmirror.com\nnpm set registry https://registry.npmmirror.com # taobao源\nnpm adduser\n\n# use npx change registry\nnpx nrm use taobao\nnpx nrm use npm\n\n# deno\nbrew install deno\n\n# other pm\nbrew install pnpm\nbrew install yarn\n```\n\n- TypeScript「S ｜ Lang ｜ Brew」\n\n```sh\nbrew install typescript\n```\n\n#### 小程序\n\n- Taro「R ｜ Lang ｜ Brew」\n\n```sh\nnpm i -g @tarojs/cli # use npx @tarojs/cli to replace\n```\n\n#### 桌面客户端\n\n- Electron「R ｜ Lang ｜ Brew」\n\n```sh\nnpm i electron-rebuild -g # use npx to replace\nnpm i node-gyp -g # use npx to replace\n\nbrew install cmake # cross platform\n\n# mirror, better to write in your project .npmrc\nnpm config set electron_mirror https://mirrors.huaweicloud.com/electron/\n```\n\n### Backend（VM、WebServer、DB、Middleware）\n\n- Java「M ｜ Lang ｜ Brew」\n\n```sh\nbrew install jenv\n\n# zulu OpenJDK\nbrew tap homebrew/cask-versions\nbrew install --cask zulu11\n\n# pm(versino manage)\nbrew install maven\n\n# mvn registry maven.aliyun.com\n```\n\n- Python「S ｜ Lang ｜ Brew」\n\n```sh\nbrew search python\nbrew list | grep python #  python@3.7 python@3.8 python@3.9\n\nbrew switch python 3.9\n```\n\n- Rust「R ｜ Lang ｜ rustup.rs or Brew」\n\n```sh\n# offical\ncurl https://sh.rustup.rs -sSf | sh\n\n# or\nbrew install rust\nbrew install cargo-c\n```\n\n### Android & iOS\n\n- Android Studio「M ｜ CLI ｜https://developer.android.com/studio」\n- Android SDK & AVD「M ｜ CLI ｜ Brew」\n- Android Platform Tools\n\n```sh\nbrew install --cask android-platform-tools\n```\n\n- Kotlin「S ｜ Lang ｜ Brew」\n\n```sh\nbrew install kotlin\n```\n\n- Xcode「M ｜ Env ｜ App Store」\n\n- CocoaPods「M ｜ CLI ｜ Brew」\n\n```bash\nbrew install cocoapods\n```\n\n- React Native「R ｜ Lang ｜ NPM」\n\n```sh\nbrew install watchman\n\n# android\nbrew tap homebrew/cask-versions\nbrew install --cask zulu11\n\n# init\nnpx react-native init AwesomeProject\n```\n\n- Dart & Flutter「R ｜ Lang ｜ NPM」\n\n```sh\n# dart\nbrew tap dart-lang/dart\nbrew install dart\n\n# flutter(include dart)\nbrew install --cask flutter\n\n# view https://dartpad.dev, online playground\n```\n\n- Genymotion「S ｜ CLI ｜https://www.genymotion.com」\n\n- Debugging「S ｜ CLI ｜ Brew」\n\n```sh\n# Charles\nbrew install --cask charles\n# Flipper(https://fbflipper.com)\nbrew install --cask flipper\n```\n\n### Service\n\n> 使用 Docker 来管理常用服务（应用、中间件）可以保证环境的纯净，以及移植性\n\n- Docker Images「R ｜ Env ｜ Docker」\n\n```shell\n# mongo\ndocker pull mongo\ndocker pull mongo-express # web-based\n\n# mysql\ndocker pull mysql:latest # 8.x\ndocker pull mysql:5.7\n\n# redis\ndocker pull redis\ndocker pull bitnami/redis\n\n# sqlite3\ndocker pull nouchka/sqlite3\n\n# memcached\ndocker pull memcached\n\n# zookeeper\ndocker pull zookeeper\n\n# kafka\ndocker pull bitnami/kafka\n\n# jenkins\ndocker pull jenkins\n\n# sentry\ndocker pull sentry\n\n# tomcat\ndocker pull tomcat\n\n# server\nbrew install nginx\n\n# apache\ndocker pull httpd\n```\n\n- GUI Client「R ｜ GUI Client ｜ Brew」\n\n```shell\n# Sequel Ace(for mysql)\nbrew install --cask sequel-ace\n\n# MongoDB Compress(mongo)\nbrew install --cask mongodb-compass-isolated-edition\n# MongoDB Realm Studio(for realm)\nbrew install --cask mongodb-realm-studio\n\n# SQLite Broswer\nbrew install --cask db-browser-for-sqlite\n```\n\n- Medis「R ｜ GUI Client ｜ App Store」\n\n## 其他（WebApp、Extension、App）\n\n### WebApp\n\n- Excalidraw「S ｜ Tools ｜https://excalidraw.com」\n- ProcessOn「S ｜ Tools ｜https://processon.com」\n- Miro「S ｜ Tools ｜https://miro.com」\n- 小画桌协同白板「R ｜ Tools ｜https://xiaohuazhuo.com」\n\n### Extension\n\n- EditThisCookie「S ｜ Chrome Ext ｜ Chrome WebStore」\n- PrettyPrint「S ｜ Chrome Ext ｜ Chrome WebStore」\n- Octotree「S ｜ Chrome Ext ｜ Chrome WebStore」\n- Gitlab tree「S ｜ Chrome Ext ｜ Chrome WebStore」\n- SingleFile「S ｜ Chrome Ext ｜ Chrome WebStore」\n- Vimium「S ｜ Chrome Ext ｜ Chrome WebStore」\n\n- Logs Explorer「R ｜ Docker Ext ｜ Docker Marketplace」\n\n- Debugger for Chrome「R ｜ Code Ext ｜ Code」\n- EditorConfig for VS Code「R ｜ Code Ext ｜ Code」\n- ENV「R ｜ Code Ext ｜ Code」\n- Git History「R ｜ Code Ext ｜ Code」\n- GitHub Copilot「R ｜ Code Ext ｜ Code」\n- MarkdownLint「R ｜ Code Ext ｜ Code」\n- Material Icon Theme「R ｜ Code Ext ｜ Code」\n- Prettier「R ｜ Code Ext ｜ Code」\n- SVG Viewer「R ｜ Code Ext ｜ Code」\n- TODO Highlight「R ｜ Code Ext ｜ Code」\n- Path Intellisense「R ｜ Code Ext ｜ Code」\n\n### App\n\n#### 通讯\n\n- WeChat「S ｜ Desktop ｜ App Store」\n- DingTalk「R ｜ Desktop ｜ App Store」\n- WeCom「R ｜ Desktop ｜ App Store」\n\n#### 字典 & 文档 & 记录\n\n- Eudic「S ｜ Desktop ｜ App Store」\n- Bear「S ｜ Desktop ｜https://bear.app」\n- aDrive「R ｜ Desktop ｜https://aliyundrive.com」\n- MindNode「R ｜ Desktop ｜ App Store」\n\n#### 电脑磁盘整理\n\n- CleanMyMac X「S ｜ Desktop ｜https://macpaw.com」\n\n### Brew Bundle\n\n```sh\nUsing dart-lang/dart\nUsing homebrew/bundle\nUsing homebrew/cask\nUsing homebrew/core\nUsing homebrew/services\nUsing broot\nUsing cloc\nUsing cmake\nUsing cocoapods\nUsing curl\nUsing exa\nUsing ideviceinstaller\nUsing ios-deploy\nUsing jenv\nUsing kotlin\nUsing nvm\nUsing rename\nUsing rust\nUsing telnet\nUsing tree\nUsing unzip\nUsing zoxide\nUsing dart-lang/dart/dart\nUsing android-platform-tools\nUsing charles\nUsing clashx\nUsing db-browser-for-sqlite\nUsing devtoys\nUsing docker\nUsing flipper\nUsing google-chrome\nUsing iterm2\nUsing mongodb-compass\nUsing mongodb-realm-studio\nUsing postman\nUsing rar\nUsing redis-pro\nUsing sequel-ace\nUsing sublime-merge\nUsing visual-studio-code\n```\n","source":"_posts/mac-install.md","raw":"---\nlayout: post\ntitle: MacOS 装机 v1.0\ndate: 2022-02-20 12:49:06\ntags:\n  - article\n  - os\n---\n\n# MacOS 装机 v1.0\n\n> 「Level ｜ Type ｜ Origin」：建议程度｜类型｜安装源\n\n- Level（建议程度）\n  - M（Must） 必须\n  - S（Shall） 要\n  - R（Recommend） 推荐\n- Type（类型）\n  - Env（Lang、CLI、Global、REPL、Compiler、Tool、PM）\n  - APP（Desktop、GUI Client、IDE、Product）\n  - VM（Runtime、VM、Container）\n  - Extension（Plugin、Configuration）\n- Origin（安装源）\n  - App Store\n  - Github\n  - Official Website\n  - Homebrew（System PM）\n  - Docker Hub\n  - Package Manager（MVN、NPM、Inner Registry）\n\n## Reference\n\n1. 通用环境\n2. 场景开发（Frontend、Backend、iOS、Android、Service）\n3. 其他（WebApp、Extension、App）\n\n## 通用环境\n\n- Brew「M ｜ Env ｜ Github or Run Shell Scripts」\n\n```sh\n# install homebrew\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\n# if network error(403), download shell script\nsh install.sh\n/bin/bash -c install.sh\n\n# brew 切中科大镜像（required git）\ncd \"$(brew --repo)\"\ngit remote set-url origin git://mirrors.ustc.edu.cn/brew.git\ncd \"$(brew --repo)/Library/Taps/homebrew/homebrew-core\"\ngit remote set-url origin git://mirrors.ustc.edu.cn/homebrew-core.git\n\n# download cache folder(can remove all)\nls ~/Library/Caches/Homebrew/downloads\n```\n\n- Git「M ｜ CLI ｜ Brew or Xcode」\n\n```sh\ngit config --global alias.lg \"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<\\%an>%Creset' --abbrev-commit --\"\n```\n\n```sh\nbrew install git # or install xcode(include git)\n\n# configuration\ngit config --global user.name \"***\"\ngit config --global user.email \"***\"\n\ngit config --global alias.lg \\\"log --color --graph --pretty=format:\\'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<\\%an>%Creset' --abbrev-commit --\"\n```\n\n- Chrome「M ｜ Desktop ｜ Brew or https://google.cn/chrome」\n\n```sh\nbrew install --cask google-chrome\nbrew install --cask google-chrome —appdir=/Applications Chrome\n\n# sign in and sync you setting & extension & bookmark\n```\n\n- Visual Studio Code「S ｜ IDE ｜ Brew or https://code.visualstudio.com」\n\n```sh\nbrew install --cask visual-studio-code\n\n# ⇧ + ⌘ + p > shell command: install 'code....\ncode --version\n\n# sign in and sync you setting & extension\n```\n\n- Docker「S ｜ Env ｜ Brew」\n\n```sh\n# gui + cli\nbrew install --cask docker\n```\n\n- iTerm2「R ｜ IDE ｜ Brew」\n\n```sh\nbrew install --cask iterm2\n\n# extensions\n```\n\n- Oh My Zsh「R ｜ CLI ｜ Github or Run Shell」\n\n```sh\nsh -c \"$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\n```\n\n- ClashX「R ｜ CLI ｜ Github」\n\n```sh\nbrew install --cask clashx\n\n# inject your subscribe & token\n```\n\n### Tools\n\n- Command Line「S ｜ CLI ｜ Brew」\n\n```shell\n# ssh & ssl\nbrew install telnet\nbrew install ca-certificates\n\n# compress\nbrew install --cask rar # may be blocked, allow anyway\nbrew install unzip\nbrew install zstd\n\n# network\nbrew install htop # top replacement\nbrew install procs # ps replacement\nbrew install dog # dig replacement\nbrew install curl\nbrew install httpie # curl replacement\n\n# folder\nbrew install cloc # code analysis\nbrew install exa # ls replacement\nbrew install rename\nbrew install tree\nbrew install broot # tree replacement, overview\nbrew install zoxide # cd replacement,\nbrew install bat # cat replacement, line number & highlight\nbrew install fx # json viewer, line number & highlight\nbrew install hexyl # hex viewer\nbrew install diff-so-fancy # diff-highlight\nbrew install fd # find replacement\nbrew install ripgrep # grep replacement\nbrew install mcfly # ctrl-r replacement\nbrew install choose # cut replacement\nbrew install duf # du replacement\nbrew install ncdu # du replacement\n```\n\n- Xnip「S ｜ Global Tools ｜ App Store」\n- Alfred「S ｜ GUI Client ｜ App Store」\n\n- Postman「R ｜ GUI Client ｜ App Store or Brew」\n\n```sh\nbrew install --cask postman\n# sign in and sync your settings\n```\n\n- Sublime Merge「R ｜ GUI Client ｜ Brew」\n\n```sh\nbrew install --cask sublime-merge\n```\n\n- DevToys「R ｜ GUI Client ｜ Github & Brew」\n\n```sh\nbrew install --cask devtoys\n```\n\n- SnippetsLab「R ｜ GUI Client ｜ App Store」\n- Terminus「R ｜ GUI Client ｜ App Store」\n- Git Streaks「R ｜ GUI Client ｜ App Store」\n- SwitchHosts「R ｜ Desktop ｜ GitHub」\n- OSS Browser「R ｜ GUI Client ｜ GitHub」\n- Apifox「R ｜ GUI Client ｜https://apifox.cn」\n\n## 场景开发\n\n### Frontend（Web、小程序、Hybrid）\n\n- NVM「M ｜ PM ｜ Brew」\n\n```bash\n# nvm\nbrew install nvm\n\nmkdir ~/.nvm\nvi ~/.zshrc # add\nexport NVM_DIR=\"$HOME/.nvm\"\n    [ -s \"$(brew --prefix)/opt/nvm/nvm.sh\" ] && \\. \"$(brew --prefix)/opt/nvm/nvm.sh\" # This loads nvm\n    [ -s \"$(brew --prefix)/opt/nvm/etc/bash_completion.d/nvm\" ] && \\. \"$(brew --prefix)/opt/nvm/etc/bash_completion.d/nvm\" # add this to ~/.zshrc or .bashrc\n```\n\n- Node「M ｜ Env ｜ NVM」\n\n```bash\n# node LTS\nnvm install 12 # 12.22.12\nnvm install 14 # 14.19.3\nnvm install 16 # 16.15.0\nnvm install 18 # latest\n\n# nvm set default(new terminal session keeping)\nnvm alias default ** # lts version, install first\n\n# npmrc & registry\nnpm login --registry=https://registry.npmjs.com\nnpm login --registry=https://registry.npmmirror.com\nnpm set registry https://registry.npmmirror.com # taobao源\nnpm adduser\n\n# use npx change registry\nnpx nrm use taobao\nnpx nrm use npm\n\n# deno\nbrew install deno\n\n# other pm\nbrew install pnpm\nbrew install yarn\n```\n\n- TypeScript「S ｜ Lang ｜ Brew」\n\n```sh\nbrew install typescript\n```\n\n#### 小程序\n\n- Taro「R ｜ Lang ｜ Brew」\n\n```sh\nnpm i -g @tarojs/cli # use npx @tarojs/cli to replace\n```\n\n#### 桌面客户端\n\n- Electron「R ｜ Lang ｜ Brew」\n\n```sh\nnpm i electron-rebuild -g # use npx to replace\nnpm i node-gyp -g # use npx to replace\n\nbrew install cmake # cross platform\n\n# mirror, better to write in your project .npmrc\nnpm config set electron_mirror https://mirrors.huaweicloud.com/electron/\n```\n\n### Backend（VM、WebServer、DB、Middleware）\n\n- Java「M ｜ Lang ｜ Brew」\n\n```sh\nbrew install jenv\n\n# zulu OpenJDK\nbrew tap homebrew/cask-versions\nbrew install --cask zulu11\n\n# pm(versino manage)\nbrew install maven\n\n# mvn registry maven.aliyun.com\n```\n\n- Python「S ｜ Lang ｜ Brew」\n\n```sh\nbrew search python\nbrew list | grep python #  python@3.7 python@3.8 python@3.9\n\nbrew switch python 3.9\n```\n\n- Rust「R ｜ Lang ｜ rustup.rs or Brew」\n\n```sh\n# offical\ncurl https://sh.rustup.rs -sSf | sh\n\n# or\nbrew install rust\nbrew install cargo-c\n```\n\n### Android & iOS\n\n- Android Studio「M ｜ CLI ｜https://developer.android.com/studio」\n- Android SDK & AVD「M ｜ CLI ｜ Brew」\n- Android Platform Tools\n\n```sh\nbrew install --cask android-platform-tools\n```\n\n- Kotlin「S ｜ Lang ｜ Brew」\n\n```sh\nbrew install kotlin\n```\n\n- Xcode「M ｜ Env ｜ App Store」\n\n- CocoaPods「M ｜ CLI ｜ Brew」\n\n```bash\nbrew install cocoapods\n```\n\n- React Native「R ｜ Lang ｜ NPM」\n\n```sh\nbrew install watchman\n\n# android\nbrew tap homebrew/cask-versions\nbrew install --cask zulu11\n\n# init\nnpx react-native init AwesomeProject\n```\n\n- Dart & Flutter「R ｜ Lang ｜ NPM」\n\n```sh\n# dart\nbrew tap dart-lang/dart\nbrew install dart\n\n# flutter(include dart)\nbrew install --cask flutter\n\n# view https://dartpad.dev, online playground\n```\n\n- Genymotion「S ｜ CLI ｜https://www.genymotion.com」\n\n- Debugging「S ｜ CLI ｜ Brew」\n\n```sh\n# Charles\nbrew install --cask charles\n# Flipper(https://fbflipper.com)\nbrew install --cask flipper\n```\n\n### Service\n\n> 使用 Docker 来管理常用服务（应用、中间件）可以保证环境的纯净，以及移植性\n\n- Docker Images「R ｜ Env ｜ Docker」\n\n```shell\n# mongo\ndocker pull mongo\ndocker pull mongo-express # web-based\n\n# mysql\ndocker pull mysql:latest # 8.x\ndocker pull mysql:5.7\n\n# redis\ndocker pull redis\ndocker pull bitnami/redis\n\n# sqlite3\ndocker pull nouchka/sqlite3\n\n# memcached\ndocker pull memcached\n\n# zookeeper\ndocker pull zookeeper\n\n# kafka\ndocker pull bitnami/kafka\n\n# jenkins\ndocker pull jenkins\n\n# sentry\ndocker pull sentry\n\n# tomcat\ndocker pull tomcat\n\n# server\nbrew install nginx\n\n# apache\ndocker pull httpd\n```\n\n- GUI Client「R ｜ GUI Client ｜ Brew」\n\n```shell\n# Sequel Ace(for mysql)\nbrew install --cask sequel-ace\n\n# MongoDB Compress(mongo)\nbrew install --cask mongodb-compass-isolated-edition\n# MongoDB Realm Studio(for realm)\nbrew install --cask mongodb-realm-studio\n\n# SQLite Broswer\nbrew install --cask db-browser-for-sqlite\n```\n\n- Medis「R ｜ GUI Client ｜ App Store」\n\n## 其他（WebApp、Extension、App）\n\n### WebApp\n\n- Excalidraw「S ｜ Tools ｜https://excalidraw.com」\n- ProcessOn「S ｜ Tools ｜https://processon.com」\n- Miro「S ｜ Tools ｜https://miro.com」\n- 小画桌协同白板「R ｜ Tools ｜https://xiaohuazhuo.com」\n\n### Extension\n\n- EditThisCookie「S ｜ Chrome Ext ｜ Chrome WebStore」\n- PrettyPrint「S ｜ Chrome Ext ｜ Chrome WebStore」\n- Octotree「S ｜ Chrome Ext ｜ Chrome WebStore」\n- Gitlab tree「S ｜ Chrome Ext ｜ Chrome WebStore」\n- SingleFile「S ｜ Chrome Ext ｜ Chrome WebStore」\n- Vimium「S ｜ Chrome Ext ｜ Chrome WebStore」\n\n- Logs Explorer「R ｜ Docker Ext ｜ Docker Marketplace」\n\n- Debugger for Chrome「R ｜ Code Ext ｜ Code」\n- EditorConfig for VS Code「R ｜ Code Ext ｜ Code」\n- ENV「R ｜ Code Ext ｜ Code」\n- Git History「R ｜ Code Ext ｜ Code」\n- GitHub Copilot「R ｜ Code Ext ｜ Code」\n- MarkdownLint「R ｜ Code Ext ｜ Code」\n- Material Icon Theme「R ｜ Code Ext ｜ Code」\n- Prettier「R ｜ Code Ext ｜ Code」\n- SVG Viewer「R ｜ Code Ext ｜ Code」\n- TODO Highlight「R ｜ Code Ext ｜ Code」\n- Path Intellisense「R ｜ Code Ext ｜ Code」\n\n### App\n\n#### 通讯\n\n- WeChat「S ｜ Desktop ｜ App Store」\n- DingTalk「R ｜ Desktop ｜ App Store」\n- WeCom「R ｜ Desktop ｜ App Store」\n\n#### 字典 & 文档 & 记录\n\n- Eudic「S ｜ Desktop ｜ App Store」\n- Bear「S ｜ Desktop ｜https://bear.app」\n- aDrive「R ｜ Desktop ｜https://aliyundrive.com」\n- MindNode「R ｜ Desktop ｜ App Store」\n\n#### 电脑磁盘整理\n\n- CleanMyMac X「S ｜ Desktop ｜https://macpaw.com」\n\n### Brew Bundle\n\n```sh\nUsing dart-lang/dart\nUsing homebrew/bundle\nUsing homebrew/cask\nUsing homebrew/core\nUsing homebrew/services\nUsing broot\nUsing cloc\nUsing cmake\nUsing cocoapods\nUsing curl\nUsing exa\nUsing ideviceinstaller\nUsing ios-deploy\nUsing jenv\nUsing kotlin\nUsing nvm\nUsing rename\nUsing rust\nUsing telnet\nUsing tree\nUsing unzip\nUsing zoxide\nUsing dart-lang/dart/dart\nUsing android-platform-tools\nUsing charles\nUsing clashx\nUsing db-browser-for-sqlite\nUsing devtoys\nUsing docker\nUsing flipper\nUsing google-chrome\nUsing iterm2\nUsing mongodb-compass\nUsing mongodb-realm-studio\nUsing postman\nUsing rar\nUsing redis-pro\nUsing sequel-ace\nUsing sublime-merge\nUsing visual-studio-code\n```\n","slug":"mac-install","published":1,"updated":"2023-12-20T05:21:18.406Z","_id":"clqdb6f400003ixw0ay2x5gpd","comments":1,"photos":[],"content":"<h1 id=\"MacOS-装机-v1-0\"><a href=\"#MacOS-装机-v1-0\" class=\"headerlink\" title=\"MacOS 装机 v1.0\"></a>MacOS 装机 v1.0</h1><blockquote>\n<p>「Level ｜ Type ｜ Origin」：建议程度｜类型｜安装源</p>\n</blockquote>\n<ul>\n<li>Level（建议程度）<ul>\n<li>M（Must） 必须</li>\n<li>S（Shall） 要</li>\n<li>R（Recommend） 推荐</li>\n</ul>\n</li>\n<li>Type（类型）<ul>\n<li>Env（Lang、CLI、Global、REPL、Compiler、Tool、PM）</li>\n<li>APP（Desktop、GUI Client、IDE、Product）</li>\n<li>VM（Runtime、VM、Container）</li>\n<li>Extension（Plugin、Configuration）</li>\n</ul>\n</li>\n<li>Origin（安装源）<ul>\n<li>App Store</li>\n<li>Github</li>\n<li>Official Website</li>\n<li>Homebrew（System PM）</li>\n<li>Docker Hub</li>\n<li>Package Manager（MVN、NPM、Inner Registry）</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ol>\n<li>通用环境</li>\n<li>场景开发（Frontend、Backend、iOS、Android、Service）</li>\n<li>其他（WebApp、Extension、App）</li>\n</ol>\n<h2 id=\"通用环境\"><a href=\"#通用环境\" class=\"headerlink\" title=\"通用环境\"></a>通用环境</h2><ul>\n<li>Brew「M ｜ Env ｜ Github or Run Shell Scripts」</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># install homebrew</span></span><br><span class=\"line\">/bin/bash -c <span class=\"string\">&quot;<span class=\"subst\">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># if network error(403), download shell script</span></span><br><span class=\"line\">sh install.sh</span><br><span class=\"line\">/bin/bash -c install.sh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># brew 切中科大镜像（required git）</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"string\">&quot;<span class=\"subst\">$(brew --repo)</span>&quot;</span></span><br><span class=\"line\">git remote set-url origin git://mirrors.ustc.edu.cn/brew.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"string\">&quot;<span class=\"subst\">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core&quot;</span></span><br><span class=\"line\">git remote set-url origin git://mirrors.ustc.edu.cn/homebrew-core.git</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># download cache folder(can remove all)</span></span><br><span class=\"line\"><span class=\"built_in\">ls</span> ~/Library/Caches/Homebrew/downloads</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Git「M ｜ CLI ｜ Brew or Xcode」</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global alias.lg <span class=\"string\">&quot;log --color --graph --pretty=format:&#x27;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;\\%an&gt;%Creset&#x27; --abbrev-commit --&quot;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install git <span class=\"comment\"># or install xcode(include git)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># configuration</span></span><br><span class=\"line\">git config --global user.name <span class=\"string\">&quot;***&quot;</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">&quot;***&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">git config --global alias.lg \\&quot;<span class=\"built_in\">log</span> --color --graph --pretty=format:\\&#x27;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;\\%an&gt;%Creset<span class=\"string\">&#x27; --abbrev-commit --&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Chrome「M ｜ Desktop ｜ Brew or <a href=\"https://google.cn/chrome%E3%80%8D\">https://google.cn/chrome」</a></li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install --cask google-chrome</span><br><span class=\"line\">brew install --cask google-chrome —appdir=/Applications Chrome</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># sign in and sync you setting &amp; extension &amp; bookmark</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Visual Studio Code「S ｜ IDE ｜ Brew or <a href=\"https://code.visualstudio.com」/\">https://code.visualstudio.com」</a></li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install --cask visual-studio-code</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ⇧ + ⌘ + p &gt; shell command: install &#x27;code....</span></span><br><span class=\"line\">code --version</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># sign in and sync you setting &amp; extension</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Docker「S ｜ Env ｜ Brew」</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># gui + cli</span></span><br><span class=\"line\">brew install --cask docker</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>iTerm2「R ｜ IDE ｜ Brew」</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install --cask iterm2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># extensions</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Oh My Zsh「R ｜ CLI ｜ Github or Run Shell」</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh -c <span class=\"string\">&quot;<span class=\"subst\">$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>ClashX「R ｜ CLI ｜ Github」</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install --cask clashx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># inject your subscribe &amp; token</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Tools\"><a href=\"#Tools\" class=\"headerlink\" title=\"Tools\"></a>Tools</h3><ul>\n<li>Command Line「S ｜ CLI ｜ Brew」</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ssh &amp; ssl</span></span><br><span class=\"line\">brew install telnet</span><br><span class=\"line\">brew install ca-certificates</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">compress</span></span><br><span class=\"line\">brew install --cask rar # may be blocked, allow anyway</span><br><span class=\"line\">brew install unzip</span><br><span class=\"line\">brew install zstd</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">network</span></span><br><span class=\"line\">brew install htop # top replacement</span><br><span class=\"line\">brew install procs # ps replacement</span><br><span class=\"line\">brew install dog # dig replacement</span><br><span class=\"line\">brew install curl</span><br><span class=\"line\">brew install httpie # curl replacement</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">folder</span></span><br><span class=\"line\">brew install cloc # code analysis</span><br><span class=\"line\">brew install exa # ls replacement</span><br><span class=\"line\">brew install rename</span><br><span class=\"line\">brew install tree</span><br><span class=\"line\">brew install broot # tree replacement, overview</span><br><span class=\"line\">brew install zoxide # cd replacement,</span><br><span class=\"line\">brew install bat # cat replacement, line number &amp; highlight</span><br><span class=\"line\">brew install fx # json viewer, line number &amp; highlight</span><br><span class=\"line\">brew install hexyl # hex viewer</span><br><span class=\"line\">brew install diff-so-fancy # diff-highlight</span><br><span class=\"line\">brew install fd # find replacement</span><br><span class=\"line\">brew install ripgrep # grep replacement</span><br><span class=\"line\">brew install mcfly # ctrl-r replacement</span><br><span class=\"line\">brew install choose # cut replacement</span><br><span class=\"line\">brew install duf # du replacement</span><br><span class=\"line\">brew install ncdu # du replacement</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>Xnip「S ｜ Global Tools ｜ App Store」</p>\n</li>\n<li><p>Alfred「S ｜ GUI Client ｜ App Store」</p>\n</li>\n<li><p>Postman「R ｜ GUI Client ｜ App Store or Brew」</p>\n</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install --cask postman</span><br><span class=\"line\"><span class=\"comment\"># sign in and sync your settings</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Sublime Merge「R ｜ GUI Client ｜ Brew」</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install --cask sublime-merge</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>DevToys「R ｜ GUI Client ｜ Github &amp; Brew」</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install --cask devtoys</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>SnippetsLab「R ｜ GUI Client ｜ App Store」</li>\n<li>Terminus「R ｜ GUI Client ｜ App Store」</li>\n<li>Git Streaks「R ｜ GUI Client ｜ App Store」</li>\n<li>SwitchHosts「R ｜ Desktop ｜ GitHub」</li>\n<li>OSS Browser「R ｜ GUI Client ｜ GitHub」</li>\n<li>Apifox「R ｜ GUI Client ｜<a href=\"https://apifox.cn」/\">https://apifox.cn」</a></li>\n</ul>\n<h2 id=\"场景开发\"><a href=\"#场景开发\" class=\"headerlink\" title=\"场景开发\"></a>场景开发</h2><h3 id=\"Frontend（Web、小程序、Hybrid）\"><a href=\"#Frontend（Web、小程序、Hybrid）\" class=\"headerlink\" title=\"Frontend（Web、小程序、Hybrid）\"></a>Frontend（Web、小程序、Hybrid）</h3><ul>\n<li>NVM「M ｜ PM ｜ Brew」</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># nvm</span></span><br><span class=\"line\">brew install nvm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> ~/.nvm</span><br><span class=\"line\">vi ~/.zshrc <span class=\"comment\"># add</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> NVM_DIR=<span class=\"string\">&quot;<span class=\"variable\">$HOME</span>/.nvm&quot;</span></span><br><span class=\"line\">    [ -s <span class=\"string\">&quot;<span class=\"subst\">$(brew --prefix)</span>/opt/nvm/nvm.sh&quot;</span> ] &amp;&amp; \\. <span class=\"string\">&quot;<span class=\"subst\">$(brew --prefix)</span>/opt/nvm/nvm.sh&quot;</span> <span class=\"comment\"># This loads nvm</span></span><br><span class=\"line\">    [ -s <span class=\"string\">&quot;<span class=\"subst\">$(brew --prefix)</span>/opt/nvm/etc/bash_completion.d/nvm&quot;</span> ] &amp;&amp; \\. <span class=\"string\">&quot;<span class=\"subst\">$(brew --prefix)</span>/opt/nvm/etc/bash_completion.d/nvm&quot;</span> <span class=\"comment\"># add this to ~/.zshrc or .bashrc</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Node「M ｜ Env ｜ NVM」</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># node LTS</span></span><br><span class=\"line\">nvm install 12 <span class=\"comment\"># 12.22.12</span></span><br><span class=\"line\">nvm install 14 <span class=\"comment\"># 14.19.3</span></span><br><span class=\"line\">nvm install 16 <span class=\"comment\"># 16.15.0</span></span><br><span class=\"line\">nvm install 18 <span class=\"comment\"># latest</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># nvm set default(new terminal session keeping)</span></span><br><span class=\"line\">nvm <span class=\"built_in\">alias</span> default ** <span class=\"comment\"># lts version, install first</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># npmrc &amp; registry</span></span><br><span class=\"line\">npm login --registry=https://registry.npmjs.com</span><br><span class=\"line\">npm login --registry=https://registry.npmmirror.com</span><br><span class=\"line\">npm <span class=\"built_in\">set</span> registry https://registry.npmmirror.com <span class=\"comment\"># taobao源</span></span><br><span class=\"line\">npm adduser</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># use npx change registry</span></span><br><span class=\"line\">npx nrm use taobao</span><br><span class=\"line\">npx nrm use npm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># deno</span></span><br><span class=\"line\">brew install deno</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># other pm</span></span><br><span class=\"line\">brew install pnpm</span><br><span class=\"line\">brew install yarn</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>TypeScript「S ｜ Lang ｜ Brew」</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install typescript</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"小程序\"><a href=\"#小程序\" class=\"headerlink\" title=\"小程序\"></a>小程序</h4><ul>\n<li>Taro「R ｜ Lang ｜ Brew」</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -g @tarojs/cli <span class=\"comment\"># use npx @tarojs/cli to replace</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"桌面客户端\"><a href=\"#桌面客户端\" class=\"headerlink\" title=\"桌面客户端\"></a>桌面客户端</h4><ul>\n<li>Electron「R ｜ Lang ｜ Brew」</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i electron-rebuild -g <span class=\"comment\"># use npx to replace</span></span><br><span class=\"line\">npm i node-gyp -g <span class=\"comment\"># use npx to replace</span></span><br><span class=\"line\"></span><br><span class=\"line\">brew install cmake <span class=\"comment\"># cross platform</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># mirror, better to write in your project .npmrc</span></span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> electron_mirror https://mirrors.huaweicloud.com/electron/</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Backend（VM、WebServer、DB、Middleware）\"><a href=\"#Backend（VM、WebServer、DB、Middleware）\" class=\"headerlink\" title=\"Backend（VM、WebServer、DB、Middleware）\"></a>Backend（VM、WebServer、DB、Middleware）</h3><ul>\n<li>Java「M ｜ Lang ｜ Brew」</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install jenv</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># zulu OpenJDK</span></span><br><span class=\"line\">brew tap homebrew/cask-versions</span><br><span class=\"line\">brew install --cask zulu11</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># pm(versino manage)</span></span><br><span class=\"line\">brew install maven</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># mvn registry maven.aliyun.com</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Python「S ｜ Lang ｜ Brew」</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew search python</span><br><span class=\"line\">brew list | grep python <span class=\"comment\">#  python@3.7 python@3.8 python@3.9</span></span><br><span class=\"line\"></span><br><span class=\"line\">brew switch python 3.9</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Rust「R ｜ Lang ｜ rustup.rs or Brew」</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># offical</span></span><br><span class=\"line\">curl https://sh.rustup.rs -sSf | sh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># or</span></span><br><span class=\"line\">brew install rust</span><br><span class=\"line\">brew install cargo-c</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Android-iOS\"><a href=\"#Android-iOS\" class=\"headerlink\" title=\"Android &amp; iOS\"></a>Android &amp; iOS</h3><ul>\n<li>Android Studio「M ｜ CLI ｜<a href=\"https://developer.android.com/studio%E3%80%8D\">https://developer.android.com/studio」</a></li>\n<li>Android SDK &amp; AVD「M ｜ CLI ｜ Brew」</li>\n<li>Android Platform Tools</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install --cask android-platform-tools</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Kotlin「S ｜ Lang ｜ Brew」</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install kotlin</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>Xcode「M ｜ Env ｜ App Store」</p>\n</li>\n<li><p>CocoaPods「M ｜ CLI ｜ Brew」</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install cocoapods</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>React Native「R ｜ Lang ｜ NPM」</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install watchman</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># android</span></span><br><span class=\"line\">brew tap homebrew/cask-versions</span><br><span class=\"line\">brew install --cask zulu11</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># init</span></span><br><span class=\"line\">npx react-native init AwesomeProject</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Dart &amp; Flutter「R ｜ Lang ｜ NPM」</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># dart</span></span><br><span class=\"line\">brew tap dart-lang/dart</span><br><span class=\"line\">brew install dart</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># flutter(include dart)</span></span><br><span class=\"line\">brew install --cask flutter</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># view https://dartpad.dev, online playground</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>Genymotion「S ｜ CLI ｜<a href=\"https://www.genymotion.com」/\">https://www.genymotion.com」</a></p>\n</li>\n<li><p>Debugging「S ｜ CLI ｜ Brew」</p>\n</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Charles</span></span><br><span class=\"line\">brew install --cask charles</span><br><span class=\"line\"><span class=\"comment\"># Flipper(https://fbflipper.com)</span></span><br><span class=\"line\">brew install --cask flipper</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Service\"><a href=\"#Service\" class=\"headerlink\" title=\"Service\"></a>Service</h3><blockquote>\n<p>使用 Docker 来管理常用服务（应用、中间件）可以保证环境的纯净，以及移植性</p>\n</blockquote>\n<ul>\n<li>Docker Images「R ｜ Env ｜ Docker」</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">mongo</span></span><br><span class=\"line\">docker pull mongo</span><br><span class=\"line\">docker pull mongo-express # web-based</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">mysql</span></span><br><span class=\"line\">docker pull mysql:latest # 8.x</span><br><span class=\"line\">docker pull mysql:5.7</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">redis</span></span><br><span class=\"line\">docker pull redis</span><br><span class=\"line\">docker pull bitnami/redis</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">sqlite3</span></span><br><span class=\"line\">docker pull nouchka/sqlite3</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">memcached</span></span><br><span class=\"line\">docker pull memcached</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">zookeeper</span></span><br><span class=\"line\">docker pull zookeeper</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">kafka</span></span><br><span class=\"line\">docker pull bitnami/kafka</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">jenkins</span></span><br><span class=\"line\">docker pull jenkins</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">sentry</span></span><br><span class=\"line\">docker pull sentry</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">tomcat</span></span><br><span class=\"line\">docker pull tomcat</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">server</span></span><br><span class=\"line\">brew install nginx</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">apache</span></span><br><span class=\"line\">docker pull httpd</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>GUI Client「R ｜ GUI Client ｜ Brew」</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Sequel Ace(<span class=\"keyword\">for</span> mysql)</span></span><br><span class=\"line\">brew install --cask sequel-ace</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">MongoDB Compress(mongo)</span></span><br><span class=\"line\">brew install --cask mongodb-compass-isolated-edition</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">MongoDB Realm Studio(<span class=\"keyword\">for</span> realm)</span></span><br><span class=\"line\">brew install --cask mongodb-realm-studio</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">SQLite Broswer</span></span><br><span class=\"line\">brew install --cask db-browser-for-sqlite</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Medis「R ｜ GUI Client ｜ App Store」</li>\n</ul>\n<h2 id=\"其他（WebApp、Extension、App）\"><a href=\"#其他（WebApp、Extension、App）\" class=\"headerlink\" title=\"其他（WebApp、Extension、App）\"></a>其他（WebApp、Extension、App）</h2><h3 id=\"WebApp\"><a href=\"#WebApp\" class=\"headerlink\" title=\"WebApp\"></a>WebApp</h3><ul>\n<li>Excalidraw「S ｜ Tools ｜<a href=\"https://excalidraw.com」/\">https://excalidraw.com」</a></li>\n<li>ProcessOn「S ｜ Tools ｜<a href=\"https://processon.com」/\">https://processon.com」</a></li>\n<li>Miro「S ｜ Tools ｜<a href=\"https://miro.com」/\">https://miro.com」</a></li>\n<li>小画桌协同白板「R ｜ Tools ｜<a href=\"https://xiaohuazhuo.com」/\">https://xiaohuazhuo.com」</a></li>\n</ul>\n<h3 id=\"Extension\"><a href=\"#Extension\" class=\"headerlink\" title=\"Extension\"></a>Extension</h3><ul>\n<li><p>EditThisCookie「S ｜ Chrome Ext ｜ Chrome WebStore」</p>\n</li>\n<li><p>PrettyPrint「S ｜ Chrome Ext ｜ Chrome WebStore」</p>\n</li>\n<li><p>Octotree「S ｜ Chrome Ext ｜ Chrome WebStore」</p>\n</li>\n<li><p>Gitlab tree「S ｜ Chrome Ext ｜ Chrome WebStore」</p>\n</li>\n<li><p>SingleFile「S ｜ Chrome Ext ｜ Chrome WebStore」</p>\n</li>\n<li><p>Vimium「S ｜ Chrome Ext ｜ Chrome WebStore」</p>\n</li>\n<li><p>Logs Explorer「R ｜ Docker Ext ｜ Docker Marketplace」</p>\n</li>\n<li><p>Debugger for Chrome「R ｜ Code Ext ｜ Code」</p>\n</li>\n<li><p>EditorConfig for VS Code「R ｜ Code Ext ｜ Code」</p>\n</li>\n<li><p>ENV「R ｜ Code Ext ｜ Code」</p>\n</li>\n<li><p>Git History「R ｜ Code Ext ｜ Code」</p>\n</li>\n<li><p>GitHub Copilot「R ｜ Code Ext ｜ Code」</p>\n</li>\n<li><p>MarkdownLint「R ｜ Code Ext ｜ Code」</p>\n</li>\n<li><p>Material Icon Theme「R ｜ Code Ext ｜ Code」</p>\n</li>\n<li><p>Prettier「R ｜ Code Ext ｜ Code」</p>\n</li>\n<li><p>SVG Viewer「R ｜ Code Ext ｜ Code」</p>\n</li>\n<li><p>TODO Highlight「R ｜ Code Ext ｜ Code」</p>\n</li>\n<li><p>Path Intellisense「R ｜ Code Ext ｜ Code」</p>\n</li>\n</ul>\n<h3 id=\"App\"><a href=\"#App\" class=\"headerlink\" title=\"App\"></a>App</h3><h4 id=\"通讯\"><a href=\"#通讯\" class=\"headerlink\" title=\"通讯\"></a>通讯</h4><ul>\n<li>WeChat「S ｜ Desktop ｜ App Store」</li>\n<li>DingTalk「R ｜ Desktop ｜ App Store」</li>\n<li>WeCom「R ｜ Desktop ｜ App Store」</li>\n</ul>\n<h4 id=\"字典-文档-记录\"><a href=\"#字典-文档-记录\" class=\"headerlink\" title=\"字典 &amp; 文档 &amp; 记录\"></a>字典 &amp; 文档 &amp; 记录</h4><ul>\n<li>Eudic「S ｜ Desktop ｜ App Store」</li>\n<li>Bear「S ｜ Desktop ｜<a href=\"https://bear.app」/\">https://bear.app」</a></li>\n<li>aDrive「R ｜ Desktop ｜<a href=\"https://aliyundrive.com」/\">https://aliyundrive.com」</a></li>\n<li>MindNode「R ｜ Desktop ｜ App Store」</li>\n</ul>\n<h4 id=\"电脑磁盘整理\"><a href=\"#电脑磁盘整理\" class=\"headerlink\" title=\"电脑磁盘整理\"></a>电脑磁盘整理</h4><ul>\n<li>CleanMyMac X「S ｜ Desktop ｜<a href=\"https://macpaw.com」/\">https://macpaw.com」</a></li>\n</ul>\n<h3 id=\"Brew-Bundle\"><a href=\"#Brew-Bundle\" class=\"headerlink\" title=\"Brew Bundle\"></a>Brew Bundle</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Using dart-lang/dart</span><br><span class=\"line\">Using homebrew/bundle</span><br><span class=\"line\">Using homebrew/cask</span><br><span class=\"line\">Using homebrew/core</span><br><span class=\"line\">Using homebrew/services</span><br><span class=\"line\">Using broot</span><br><span class=\"line\">Using cloc</span><br><span class=\"line\">Using cmake</span><br><span class=\"line\">Using cocoapods</span><br><span class=\"line\">Using curl</span><br><span class=\"line\">Using exa</span><br><span class=\"line\">Using ideviceinstaller</span><br><span class=\"line\">Using ios-deploy</span><br><span class=\"line\">Using jenv</span><br><span class=\"line\">Using kotlin</span><br><span class=\"line\">Using nvm</span><br><span class=\"line\">Using rename</span><br><span class=\"line\">Using rust</span><br><span class=\"line\">Using telnet</span><br><span class=\"line\">Using tree</span><br><span class=\"line\">Using unzip</span><br><span class=\"line\">Using zoxide</span><br><span class=\"line\">Using dart-lang/dart/dart</span><br><span class=\"line\">Using android-platform-tools</span><br><span class=\"line\">Using charles</span><br><span class=\"line\">Using clashx</span><br><span class=\"line\">Using db-browser-for-sqlite</span><br><span class=\"line\">Using devtoys</span><br><span class=\"line\">Using docker</span><br><span class=\"line\">Using flipper</span><br><span class=\"line\">Using google-chrome</span><br><span class=\"line\">Using iterm2</span><br><span class=\"line\">Using mongodb-compass</span><br><span class=\"line\">Using mongodb-realm-studio</span><br><span class=\"line\">Using postman</span><br><span class=\"line\">Using rar</span><br><span class=\"line\">Using redis-pro</span><br><span class=\"line\">Using sequel-ace</span><br><span class=\"line\">Using sublime-merge</span><br><span class=\"line\">Using visual-studio-code</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"MacOS-装机-v1-0\"><a href=\"#MacOS-装机-v1-0\" class=\"headerlink\" title=\"MacOS 装机 v1.0\"></a>MacOS 装机 v1.0</h1><blockquote>\n<p>「Level ｜ Type ｜ Origin」：建议程度｜类型｜安装源</p>\n</blockquote>\n<ul>\n<li>Level（建议程度）<ul>\n<li>M（Must） 必须</li>\n<li>S（Shall） 要</li>\n<li>R（Recommend） 推荐</li>\n</ul>\n</li>\n<li>Type（类型）<ul>\n<li>Env（Lang、CLI、Global、REPL、Compiler、Tool、PM）</li>\n<li>APP（Desktop、GUI Client、IDE、Product）</li>\n<li>VM（Runtime、VM、Container）</li>\n<li>Extension（Plugin、Configuration）</li>\n</ul>\n</li>\n<li>Origin（安装源）<ul>\n<li>App Store</li>\n<li>Github</li>\n<li>Official Website</li>\n<li>Homebrew（System PM）</li>\n<li>Docker Hub</li>\n<li>Package Manager（MVN、NPM、Inner Registry）</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ol>\n<li>通用环境</li>\n<li>场景开发（Frontend、Backend、iOS、Android、Service）</li>\n<li>其他（WebApp、Extension、App）</li>\n</ol>\n<h2 id=\"通用环境\"><a href=\"#通用环境\" class=\"headerlink\" title=\"通用环境\"></a>通用环境</h2><ul>\n<li>Brew「M ｜ Env ｜ Github or Run Shell Scripts」</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># install homebrew</span></span><br><span class=\"line\">/bin/bash -c <span class=\"string\">&quot;<span class=\"subst\">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># if network error(403), download shell script</span></span><br><span class=\"line\">sh install.sh</span><br><span class=\"line\">/bin/bash -c install.sh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># brew 切中科大镜像（required git）</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"string\">&quot;<span class=\"subst\">$(brew --repo)</span>&quot;</span></span><br><span class=\"line\">git remote set-url origin git://mirrors.ustc.edu.cn/brew.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"string\">&quot;<span class=\"subst\">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core&quot;</span></span><br><span class=\"line\">git remote set-url origin git://mirrors.ustc.edu.cn/homebrew-core.git</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># download cache folder(can remove all)</span></span><br><span class=\"line\"><span class=\"built_in\">ls</span> ~/Library/Caches/Homebrew/downloads</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Git「M ｜ CLI ｜ Brew or Xcode」</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global alias.lg <span class=\"string\">&quot;log --color --graph --pretty=format:&#x27;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;\\%an&gt;%Creset&#x27; --abbrev-commit --&quot;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install git <span class=\"comment\"># or install xcode(include git)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># configuration</span></span><br><span class=\"line\">git config --global user.name <span class=\"string\">&quot;***&quot;</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">&quot;***&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">git config --global alias.lg \\&quot;<span class=\"built_in\">log</span> --color --graph --pretty=format:\\&#x27;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;\\%an&gt;%Creset<span class=\"string\">&#x27; --abbrev-commit --&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Chrome「M ｜ Desktop ｜ Brew or <a href=\"https://google.cn/chrome%E3%80%8D\">https://google.cn/chrome」</a></li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install --cask google-chrome</span><br><span class=\"line\">brew install --cask google-chrome —appdir=/Applications Chrome</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># sign in and sync you setting &amp; extension &amp; bookmark</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Visual Studio Code「S ｜ IDE ｜ Brew or <a href=\"https://code.visualstudio.com」/\">https://code.visualstudio.com」</a></li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install --cask visual-studio-code</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ⇧ + ⌘ + p &gt; shell command: install &#x27;code....</span></span><br><span class=\"line\">code --version</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># sign in and sync you setting &amp; extension</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Docker「S ｜ Env ｜ Brew」</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># gui + cli</span></span><br><span class=\"line\">brew install --cask docker</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>iTerm2「R ｜ IDE ｜ Brew」</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install --cask iterm2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># extensions</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Oh My Zsh「R ｜ CLI ｜ Github or Run Shell」</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh -c <span class=\"string\">&quot;<span class=\"subst\">$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>ClashX「R ｜ CLI ｜ Github」</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install --cask clashx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># inject your subscribe &amp; token</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Tools\"><a href=\"#Tools\" class=\"headerlink\" title=\"Tools\"></a>Tools</h3><ul>\n<li>Command Line「S ｜ CLI ｜ Brew」</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ssh &amp; ssl</span></span><br><span class=\"line\">brew install telnet</span><br><span class=\"line\">brew install ca-certificates</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">compress</span></span><br><span class=\"line\">brew install --cask rar # may be blocked, allow anyway</span><br><span class=\"line\">brew install unzip</span><br><span class=\"line\">brew install zstd</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">network</span></span><br><span class=\"line\">brew install htop # top replacement</span><br><span class=\"line\">brew install procs # ps replacement</span><br><span class=\"line\">brew install dog # dig replacement</span><br><span class=\"line\">brew install curl</span><br><span class=\"line\">brew install httpie # curl replacement</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">folder</span></span><br><span class=\"line\">brew install cloc # code analysis</span><br><span class=\"line\">brew install exa # ls replacement</span><br><span class=\"line\">brew install rename</span><br><span class=\"line\">brew install tree</span><br><span class=\"line\">brew install broot # tree replacement, overview</span><br><span class=\"line\">brew install zoxide # cd replacement,</span><br><span class=\"line\">brew install bat # cat replacement, line number &amp; highlight</span><br><span class=\"line\">brew install fx # json viewer, line number &amp; highlight</span><br><span class=\"line\">brew install hexyl # hex viewer</span><br><span class=\"line\">brew install diff-so-fancy # diff-highlight</span><br><span class=\"line\">brew install fd # find replacement</span><br><span class=\"line\">brew install ripgrep # grep replacement</span><br><span class=\"line\">brew install mcfly # ctrl-r replacement</span><br><span class=\"line\">brew install choose # cut replacement</span><br><span class=\"line\">brew install duf # du replacement</span><br><span class=\"line\">brew install ncdu # du replacement</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>Xnip「S ｜ Global Tools ｜ App Store」</p>\n</li>\n<li><p>Alfred「S ｜ GUI Client ｜ App Store」</p>\n</li>\n<li><p>Postman「R ｜ GUI Client ｜ App Store or Brew」</p>\n</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install --cask postman</span><br><span class=\"line\"><span class=\"comment\"># sign in and sync your settings</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Sublime Merge「R ｜ GUI Client ｜ Brew」</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install --cask sublime-merge</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>DevToys「R ｜ GUI Client ｜ Github &amp; Brew」</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install --cask devtoys</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>SnippetsLab「R ｜ GUI Client ｜ App Store」</li>\n<li>Terminus「R ｜ GUI Client ｜ App Store」</li>\n<li>Git Streaks「R ｜ GUI Client ｜ App Store」</li>\n<li>SwitchHosts「R ｜ Desktop ｜ GitHub」</li>\n<li>OSS Browser「R ｜ GUI Client ｜ GitHub」</li>\n<li>Apifox「R ｜ GUI Client ｜<a href=\"https://apifox.cn」/\">https://apifox.cn」</a></li>\n</ul>\n<h2 id=\"场景开发\"><a href=\"#场景开发\" class=\"headerlink\" title=\"场景开发\"></a>场景开发</h2><h3 id=\"Frontend（Web、小程序、Hybrid）\"><a href=\"#Frontend（Web、小程序、Hybrid）\" class=\"headerlink\" title=\"Frontend（Web、小程序、Hybrid）\"></a>Frontend（Web、小程序、Hybrid）</h3><ul>\n<li>NVM「M ｜ PM ｜ Brew」</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># nvm</span></span><br><span class=\"line\">brew install nvm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> ~/.nvm</span><br><span class=\"line\">vi ~/.zshrc <span class=\"comment\"># add</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> NVM_DIR=<span class=\"string\">&quot;<span class=\"variable\">$HOME</span>/.nvm&quot;</span></span><br><span class=\"line\">    [ -s <span class=\"string\">&quot;<span class=\"subst\">$(brew --prefix)</span>/opt/nvm/nvm.sh&quot;</span> ] &amp;&amp; \\. <span class=\"string\">&quot;<span class=\"subst\">$(brew --prefix)</span>/opt/nvm/nvm.sh&quot;</span> <span class=\"comment\"># This loads nvm</span></span><br><span class=\"line\">    [ -s <span class=\"string\">&quot;<span class=\"subst\">$(brew --prefix)</span>/opt/nvm/etc/bash_completion.d/nvm&quot;</span> ] &amp;&amp; \\. <span class=\"string\">&quot;<span class=\"subst\">$(brew --prefix)</span>/opt/nvm/etc/bash_completion.d/nvm&quot;</span> <span class=\"comment\"># add this to ~/.zshrc or .bashrc</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Node「M ｜ Env ｜ NVM」</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># node LTS</span></span><br><span class=\"line\">nvm install 12 <span class=\"comment\"># 12.22.12</span></span><br><span class=\"line\">nvm install 14 <span class=\"comment\"># 14.19.3</span></span><br><span class=\"line\">nvm install 16 <span class=\"comment\"># 16.15.0</span></span><br><span class=\"line\">nvm install 18 <span class=\"comment\"># latest</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># nvm set default(new terminal session keeping)</span></span><br><span class=\"line\">nvm <span class=\"built_in\">alias</span> default ** <span class=\"comment\"># lts version, install first</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># npmrc &amp; registry</span></span><br><span class=\"line\">npm login --registry=https://registry.npmjs.com</span><br><span class=\"line\">npm login --registry=https://registry.npmmirror.com</span><br><span class=\"line\">npm <span class=\"built_in\">set</span> registry https://registry.npmmirror.com <span class=\"comment\"># taobao源</span></span><br><span class=\"line\">npm adduser</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># use npx change registry</span></span><br><span class=\"line\">npx nrm use taobao</span><br><span class=\"line\">npx nrm use npm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># deno</span></span><br><span class=\"line\">brew install deno</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># other pm</span></span><br><span class=\"line\">brew install pnpm</span><br><span class=\"line\">brew install yarn</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>TypeScript「S ｜ Lang ｜ Brew」</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install typescript</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"小程序\"><a href=\"#小程序\" class=\"headerlink\" title=\"小程序\"></a>小程序</h4><ul>\n<li>Taro「R ｜ Lang ｜ Brew」</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -g @tarojs/cli <span class=\"comment\"># use npx @tarojs/cli to replace</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"桌面客户端\"><a href=\"#桌面客户端\" class=\"headerlink\" title=\"桌面客户端\"></a>桌面客户端</h4><ul>\n<li>Electron「R ｜ Lang ｜ Brew」</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i electron-rebuild -g <span class=\"comment\"># use npx to replace</span></span><br><span class=\"line\">npm i node-gyp -g <span class=\"comment\"># use npx to replace</span></span><br><span class=\"line\"></span><br><span class=\"line\">brew install cmake <span class=\"comment\"># cross platform</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># mirror, better to write in your project .npmrc</span></span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> electron_mirror https://mirrors.huaweicloud.com/electron/</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Backend（VM、WebServer、DB、Middleware）\"><a href=\"#Backend（VM、WebServer、DB、Middleware）\" class=\"headerlink\" title=\"Backend（VM、WebServer、DB、Middleware）\"></a>Backend（VM、WebServer、DB、Middleware）</h3><ul>\n<li>Java「M ｜ Lang ｜ Brew」</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install jenv</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># zulu OpenJDK</span></span><br><span class=\"line\">brew tap homebrew/cask-versions</span><br><span class=\"line\">brew install --cask zulu11</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># pm(versino manage)</span></span><br><span class=\"line\">brew install maven</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># mvn registry maven.aliyun.com</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Python「S ｜ Lang ｜ Brew」</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew search python</span><br><span class=\"line\">brew list | grep python <span class=\"comment\">#  python@3.7 python@3.8 python@3.9</span></span><br><span class=\"line\"></span><br><span class=\"line\">brew switch python 3.9</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Rust「R ｜ Lang ｜ rustup.rs or Brew」</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># offical</span></span><br><span class=\"line\">curl https://sh.rustup.rs -sSf | sh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># or</span></span><br><span class=\"line\">brew install rust</span><br><span class=\"line\">brew install cargo-c</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Android-iOS\"><a href=\"#Android-iOS\" class=\"headerlink\" title=\"Android &amp; iOS\"></a>Android &amp; iOS</h3><ul>\n<li>Android Studio「M ｜ CLI ｜<a href=\"https://developer.android.com/studio%E3%80%8D\">https://developer.android.com/studio」</a></li>\n<li>Android SDK &amp; AVD「M ｜ CLI ｜ Brew」</li>\n<li>Android Platform Tools</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install --cask android-platform-tools</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Kotlin「S ｜ Lang ｜ Brew」</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install kotlin</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>Xcode「M ｜ Env ｜ App Store」</p>\n</li>\n<li><p>CocoaPods「M ｜ CLI ｜ Brew」</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install cocoapods</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>React Native「R ｜ Lang ｜ NPM」</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install watchman</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># android</span></span><br><span class=\"line\">brew tap homebrew/cask-versions</span><br><span class=\"line\">brew install --cask zulu11</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># init</span></span><br><span class=\"line\">npx react-native init AwesomeProject</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Dart &amp; Flutter「R ｜ Lang ｜ NPM」</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># dart</span></span><br><span class=\"line\">brew tap dart-lang/dart</span><br><span class=\"line\">brew install dart</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># flutter(include dart)</span></span><br><span class=\"line\">brew install --cask flutter</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># view https://dartpad.dev, online playground</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>Genymotion「S ｜ CLI ｜<a href=\"https://www.genymotion.com」/\">https://www.genymotion.com」</a></p>\n</li>\n<li><p>Debugging「S ｜ CLI ｜ Brew」</p>\n</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Charles</span></span><br><span class=\"line\">brew install --cask charles</span><br><span class=\"line\"><span class=\"comment\"># Flipper(https://fbflipper.com)</span></span><br><span class=\"line\">brew install --cask flipper</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Service\"><a href=\"#Service\" class=\"headerlink\" title=\"Service\"></a>Service</h3><blockquote>\n<p>使用 Docker 来管理常用服务（应用、中间件）可以保证环境的纯净，以及移植性</p>\n</blockquote>\n<ul>\n<li>Docker Images「R ｜ Env ｜ Docker」</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">mongo</span></span><br><span class=\"line\">docker pull mongo</span><br><span class=\"line\">docker pull mongo-express # web-based</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">mysql</span></span><br><span class=\"line\">docker pull mysql:latest # 8.x</span><br><span class=\"line\">docker pull mysql:5.7</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">redis</span></span><br><span class=\"line\">docker pull redis</span><br><span class=\"line\">docker pull bitnami/redis</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">sqlite3</span></span><br><span class=\"line\">docker pull nouchka/sqlite3</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">memcached</span></span><br><span class=\"line\">docker pull memcached</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">zookeeper</span></span><br><span class=\"line\">docker pull zookeeper</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">kafka</span></span><br><span class=\"line\">docker pull bitnami/kafka</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">jenkins</span></span><br><span class=\"line\">docker pull jenkins</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">sentry</span></span><br><span class=\"line\">docker pull sentry</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">tomcat</span></span><br><span class=\"line\">docker pull tomcat</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">server</span></span><br><span class=\"line\">brew install nginx</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">apache</span></span><br><span class=\"line\">docker pull httpd</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>GUI Client「R ｜ GUI Client ｜ Brew」</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Sequel Ace(<span class=\"keyword\">for</span> mysql)</span></span><br><span class=\"line\">brew install --cask sequel-ace</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">MongoDB Compress(mongo)</span></span><br><span class=\"line\">brew install --cask mongodb-compass-isolated-edition</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">MongoDB Realm Studio(<span class=\"keyword\">for</span> realm)</span></span><br><span class=\"line\">brew install --cask mongodb-realm-studio</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">SQLite Broswer</span></span><br><span class=\"line\">brew install --cask db-browser-for-sqlite</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Medis「R ｜ GUI Client ｜ App Store」</li>\n</ul>\n<h2 id=\"其他（WebApp、Extension、App）\"><a href=\"#其他（WebApp、Extension、App）\" class=\"headerlink\" title=\"其他（WebApp、Extension、App）\"></a>其他（WebApp、Extension、App）</h2><h3 id=\"WebApp\"><a href=\"#WebApp\" class=\"headerlink\" title=\"WebApp\"></a>WebApp</h3><ul>\n<li>Excalidraw「S ｜ Tools ｜<a href=\"https://excalidraw.com」/\">https://excalidraw.com」</a></li>\n<li>ProcessOn「S ｜ Tools ｜<a href=\"https://processon.com」/\">https://processon.com」</a></li>\n<li>Miro「S ｜ Tools ｜<a href=\"https://miro.com」/\">https://miro.com」</a></li>\n<li>小画桌协同白板「R ｜ Tools ｜<a href=\"https://xiaohuazhuo.com」/\">https://xiaohuazhuo.com」</a></li>\n</ul>\n<h3 id=\"Extension\"><a href=\"#Extension\" class=\"headerlink\" title=\"Extension\"></a>Extension</h3><ul>\n<li><p>EditThisCookie「S ｜ Chrome Ext ｜ Chrome WebStore」</p>\n</li>\n<li><p>PrettyPrint「S ｜ Chrome Ext ｜ Chrome WebStore」</p>\n</li>\n<li><p>Octotree「S ｜ Chrome Ext ｜ Chrome WebStore」</p>\n</li>\n<li><p>Gitlab tree「S ｜ Chrome Ext ｜ Chrome WebStore」</p>\n</li>\n<li><p>SingleFile「S ｜ Chrome Ext ｜ Chrome WebStore」</p>\n</li>\n<li><p>Vimium「S ｜ Chrome Ext ｜ Chrome WebStore」</p>\n</li>\n<li><p>Logs Explorer「R ｜ Docker Ext ｜ Docker Marketplace」</p>\n</li>\n<li><p>Debugger for Chrome「R ｜ Code Ext ｜ Code」</p>\n</li>\n<li><p>EditorConfig for VS Code「R ｜ Code Ext ｜ Code」</p>\n</li>\n<li><p>ENV「R ｜ Code Ext ｜ Code」</p>\n</li>\n<li><p>Git History「R ｜ Code Ext ｜ Code」</p>\n</li>\n<li><p>GitHub Copilot「R ｜ Code Ext ｜ Code」</p>\n</li>\n<li><p>MarkdownLint「R ｜ Code Ext ｜ Code」</p>\n</li>\n<li><p>Material Icon Theme「R ｜ Code Ext ｜ Code」</p>\n</li>\n<li><p>Prettier「R ｜ Code Ext ｜ Code」</p>\n</li>\n<li><p>SVG Viewer「R ｜ Code Ext ｜ Code」</p>\n</li>\n<li><p>TODO Highlight「R ｜ Code Ext ｜ Code」</p>\n</li>\n<li><p>Path Intellisense「R ｜ Code Ext ｜ Code」</p>\n</li>\n</ul>\n<h3 id=\"App\"><a href=\"#App\" class=\"headerlink\" title=\"App\"></a>App</h3><h4 id=\"通讯\"><a href=\"#通讯\" class=\"headerlink\" title=\"通讯\"></a>通讯</h4><ul>\n<li>WeChat「S ｜ Desktop ｜ App Store」</li>\n<li>DingTalk「R ｜ Desktop ｜ App Store」</li>\n<li>WeCom「R ｜ Desktop ｜ App Store」</li>\n</ul>\n<h4 id=\"字典-文档-记录\"><a href=\"#字典-文档-记录\" class=\"headerlink\" title=\"字典 &amp; 文档 &amp; 记录\"></a>字典 &amp; 文档 &amp; 记录</h4><ul>\n<li>Eudic「S ｜ Desktop ｜ App Store」</li>\n<li>Bear「S ｜ Desktop ｜<a href=\"https://bear.app」/\">https://bear.app」</a></li>\n<li>aDrive「R ｜ Desktop ｜<a href=\"https://aliyundrive.com」/\">https://aliyundrive.com」</a></li>\n<li>MindNode「R ｜ Desktop ｜ App Store」</li>\n</ul>\n<h4 id=\"电脑磁盘整理\"><a href=\"#电脑磁盘整理\" class=\"headerlink\" title=\"电脑磁盘整理\"></a>电脑磁盘整理</h4><ul>\n<li>CleanMyMac X「S ｜ Desktop ｜<a href=\"https://macpaw.com」/\">https://macpaw.com」</a></li>\n</ul>\n<h3 id=\"Brew-Bundle\"><a href=\"#Brew-Bundle\" class=\"headerlink\" title=\"Brew Bundle\"></a>Brew Bundle</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Using dart-lang/dart</span><br><span class=\"line\">Using homebrew/bundle</span><br><span class=\"line\">Using homebrew/cask</span><br><span class=\"line\">Using homebrew/core</span><br><span class=\"line\">Using homebrew/services</span><br><span class=\"line\">Using broot</span><br><span class=\"line\">Using cloc</span><br><span class=\"line\">Using cmake</span><br><span class=\"line\">Using cocoapods</span><br><span class=\"line\">Using curl</span><br><span class=\"line\">Using exa</span><br><span class=\"line\">Using ideviceinstaller</span><br><span class=\"line\">Using ios-deploy</span><br><span class=\"line\">Using jenv</span><br><span class=\"line\">Using kotlin</span><br><span class=\"line\">Using nvm</span><br><span class=\"line\">Using rename</span><br><span class=\"line\">Using rust</span><br><span class=\"line\">Using telnet</span><br><span class=\"line\">Using tree</span><br><span class=\"line\">Using unzip</span><br><span class=\"line\">Using zoxide</span><br><span class=\"line\">Using dart-lang/dart/dart</span><br><span class=\"line\">Using android-platform-tools</span><br><span class=\"line\">Using charles</span><br><span class=\"line\">Using clashx</span><br><span class=\"line\">Using db-browser-for-sqlite</span><br><span class=\"line\">Using devtoys</span><br><span class=\"line\">Using docker</span><br><span class=\"line\">Using flipper</span><br><span class=\"line\">Using google-chrome</span><br><span class=\"line\">Using iterm2</span><br><span class=\"line\">Using mongodb-compass</span><br><span class=\"line\">Using mongodb-realm-studio</span><br><span class=\"line\">Using postman</span><br><span class=\"line\">Using rar</span><br><span class=\"line\">Using redis-pro</span><br><span class=\"line\">Using sequel-ace</span><br><span class=\"line\">Using sublime-merge</span><br><span class=\"line\">Using visual-studio-code</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"Unix 哲学","date":"2021-02-20T04:49:06.000Z","_content":"\n# Unix 哲学\n\n> 拿不准就穷举 — Ken Thompson（Unix \\ Go 作者之一）\n\n- 模块原则(Modularity): 写简单的程序，并用好的接口连接它们\n- 清晰原则(Clarity): 清楚透明的算法比“高明”的算法更好\n- 组装原则(Composition): 写能够跟其他程序一起工作的程序\n- 隔离原则(Separation): 分离接口（使用引擎的方法）和引擎\n- 简单原则(Simplicity): 尽量简化算法，不到必要的时候不要增加复杂度\n- 简约原则(Parsimony): 只要在必要的时候才写大型程序，通常小程序已经足够了\n- 透明原则(Transparency): 写容易测试和纠错的代码\n- 健壮原则(Robustness): 这是简单和简约的副产物\n- 表达原则(Representation): 用数据结构表达逻辑，而不是用过程表达逻辑\n- 传统原则(Least) Surprise: 用最常识的方法设计借口\n- 安静原则(Silence): 如果程序没什么特别事情要表达，应该保持安静！\n- 经济原则(Economy): 程序员的时间比机器的时间更加宝贵\n- 生成原则(Generation): 尽量写代码来生成代码，而不是手工输入代码\n- 修复原则(Repair): 当程序出现异常，应该明确的抛出异常，而且约早越好！\n- 优化原则(Optimization): 先让程序工作，在考虑优化的事情\n- 多样性原则(Diversity): 一个问题有很多好的解决方案，没有最好的解决方案！\n- 拓展性原则(Extensible): 设计程序时应该考虑到未来的拓展，因为未来比你想象来的早\n","source":"_posts/unix-philosophy.md","raw":"---\nlayout: post\ntitle: Unix 哲学\ndate: 2021-02-20 12:49:06\ntags:\n  - article\n---\n\n# Unix 哲学\n\n> 拿不准就穷举 — Ken Thompson（Unix \\ Go 作者之一）\n\n- 模块原则(Modularity): 写简单的程序，并用好的接口连接它们\n- 清晰原则(Clarity): 清楚透明的算法比“高明”的算法更好\n- 组装原则(Composition): 写能够跟其他程序一起工作的程序\n- 隔离原则(Separation): 分离接口（使用引擎的方法）和引擎\n- 简单原则(Simplicity): 尽量简化算法，不到必要的时候不要增加复杂度\n- 简约原则(Parsimony): 只要在必要的时候才写大型程序，通常小程序已经足够了\n- 透明原则(Transparency): 写容易测试和纠错的代码\n- 健壮原则(Robustness): 这是简单和简约的副产物\n- 表达原则(Representation): 用数据结构表达逻辑，而不是用过程表达逻辑\n- 传统原则(Least) Surprise: 用最常识的方法设计借口\n- 安静原则(Silence): 如果程序没什么特别事情要表达，应该保持安静！\n- 经济原则(Economy): 程序员的时间比机器的时间更加宝贵\n- 生成原则(Generation): 尽量写代码来生成代码，而不是手工输入代码\n- 修复原则(Repair): 当程序出现异常，应该明确的抛出异常，而且约早越好！\n- 优化原则(Optimization): 先让程序工作，在考虑优化的事情\n- 多样性原则(Diversity): 一个问题有很多好的解决方案，没有最好的解决方案！\n- 拓展性原则(Extensible): 设计程序时应该考虑到未来的拓展，因为未来比你想象来的早\n","slug":"unix-philosophy","published":1,"updated":"2023-12-20T04:56:06.913Z","comments":1,"photos":[],"_id":"clqdb6f430005ixw0bgal9qia","content":"<h1 id=\"Unix-哲学\"><a href=\"#Unix-哲学\" class=\"headerlink\" title=\"Unix 哲学\"></a>Unix 哲学</h1><blockquote>\n<p>拿不准就穷举 — Ken Thompson（Unix \\ Go 作者之一）</p>\n</blockquote>\n<ul>\n<li>模块原则(Modularity): 写简单的程序，并用好的接口连接它们</li>\n<li>清晰原则(Clarity): 清楚透明的算法比“高明”的算法更好</li>\n<li>组装原则(Composition): 写能够跟其他程序一起工作的程序</li>\n<li>隔离原则(Separation): 分离接口（使用引擎的方法）和引擎</li>\n<li>简单原则(Simplicity): 尽量简化算法，不到必要的时候不要增加复杂度</li>\n<li>简约原则(Parsimony): 只要在必要的时候才写大型程序，通常小程序已经足够了</li>\n<li>透明原则(Transparency): 写容易测试和纠错的代码</li>\n<li>健壮原则(Robustness): 这是简单和简约的副产物</li>\n<li>表达原则(Representation): 用数据结构表达逻辑，而不是用过程表达逻辑</li>\n<li>传统原则(Least) Surprise: 用最常识的方法设计借口</li>\n<li>安静原则(Silence): 如果程序没什么特别事情要表达，应该保持安静！</li>\n<li>经济原则(Economy): 程序员的时间比机器的时间更加宝贵</li>\n<li>生成原则(Generation): 尽量写代码来生成代码，而不是手工输入代码</li>\n<li>修复原则(Repair): 当程序出现异常，应该明确的抛出异常，而且约早越好！</li>\n<li>优化原则(Optimization): 先让程序工作，在考虑优化的事情</li>\n<li>多样性原则(Diversity): 一个问题有很多好的解决方案，没有最好的解决方案！</li>\n<li>拓展性原则(Extensible): 设计程序时应该考虑到未来的拓展，因为未来比你想象来的早</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"Unix-哲学\"><a href=\"#Unix-哲学\" class=\"headerlink\" title=\"Unix 哲学\"></a>Unix 哲学</h1><blockquote>\n<p>拿不准就穷举 — Ken Thompson（Unix \\ Go 作者之一）</p>\n</blockquote>\n<ul>\n<li>模块原则(Modularity): 写简单的程序，并用好的接口连接它们</li>\n<li>清晰原则(Clarity): 清楚透明的算法比“高明”的算法更好</li>\n<li>组装原则(Composition): 写能够跟其他程序一起工作的程序</li>\n<li>隔离原则(Separation): 分离接口（使用引擎的方法）和引擎</li>\n<li>简单原则(Simplicity): 尽量简化算法，不到必要的时候不要增加复杂度</li>\n<li>简约原则(Parsimony): 只要在必要的时候才写大型程序，通常小程序已经足够了</li>\n<li>透明原则(Transparency): 写容易测试和纠错的代码</li>\n<li>健壮原则(Robustness): 这是简单和简约的副产物</li>\n<li>表达原则(Representation): 用数据结构表达逻辑，而不是用过程表达逻辑</li>\n<li>传统原则(Least) Surprise: 用最常识的方法设计借口</li>\n<li>安静原则(Silence): 如果程序没什么特别事情要表达，应该保持安静！</li>\n<li>经济原则(Economy): 程序员的时间比机器的时间更加宝贵</li>\n<li>生成原则(Generation): 尽量写代码来生成代码，而不是手工输入代码</li>\n<li>修复原则(Repair): 当程序出现异常，应该明确的抛出异常，而且约早越好！</li>\n<li>优化原则(Optimization): 先让程序工作，在考虑优化的事情</li>\n<li>多样性原则(Diversity): 一个问题有很多好的解决方案，没有最好的解决方案！</li>\n<li>拓展性原则(Extensible): 设计程序时应该考虑到未来的拓展，因为未来比你想象来的早</li>\n</ul>\n"},{"layout":"draft","title":"xx","date":"2023-12-20T04:37:56.000Z","_content":"","source":"_drafts/xx.md","raw":"---\nlayout: draft\ntitle: xx\ndate: 2023-12-20 12:37:56\ntags:\n---\n","slug":"xx","published":0,"updated":"2023-12-20T04:46:30.253Z","comments":1,"photos":[],"_id":"clqdb6f440006ixw0h1zacm8n","content":"","excerpt":"","more":""},{"title":"Start up","date":"2023-03-09T16:00:00.000Z","_content":"\n# Start up on OneOverZero\n\n## 1. Create a new repository on GitHub\n","source":"_posts/startup.md","raw":"---\ntitle: Start up\ndate: 2023-03-10\ntags:\n  - startup\n  - oneoverzero\n  - jinet\n---\n\n# Start up on OneOverZero\n\n## 1. Create a new repository on GitHub\n","slug":"startup","published":1,"updated":"2023-12-20T04:43:28.710Z","comments":1,"layout":"post","photos":[],"_id":"clqdb6f450007ixw0h8spdugj","content":"<h1 id=\"Start-up-on-OneOverZero\"><a href=\"#Start-up-on-OneOverZero\" class=\"headerlink\" title=\"Start up on OneOverZero\"></a>Start up on OneOverZero</h1><h2 id=\"1-Create-a-new-repository-on-GitHub\"><a href=\"#1-Create-a-new-repository-on-GitHub\" class=\"headerlink\" title=\"1. Create a new repository on GitHub\"></a>1. Create a new repository on GitHub</h2>","excerpt":"","more":"<h1 id=\"Start-up-on-OneOverZero\"><a href=\"#Start-up-on-OneOverZero\" class=\"headerlink\" title=\"Start up on OneOverZero\"></a>Start up on OneOverZero</h1><h2 id=\"1-Create-a-new-repository-on-GitHub\"><a href=\"#1-Create-a-new-repository-on-GitHub\" class=\"headerlink\" title=\"1. Create a new repository on GitHub\"></a>1. Create a new repository on GitHub</h2>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"clqdb6f3w0001ixw0h81vdd1k","tag_id":"clqdb6f420004ixw05300flrg","_id":"clqdb6f47000aixw0hfp23w5h"},{"post_id":"clqdb6f3w0001ixw0h81vdd1k","tag_id":"clqdb6f450008ixw03eu7elh2","_id":"clqdb6f47000bixw06ukgdd70"},{"post_id":"clqdb6f400003ixw0ay2x5gpd","tag_id":"clqdb6f420004ixw05300flrg","_id":"clqdb6f48000eixw03bdoh1sd"},{"post_id":"clqdb6f400003ixw0ay2x5gpd","tag_id":"clqdb6f47000cixw04cku9nn2","_id":"clqdb6f48000fixw0hkj4bnw4"},{"post_id":"clqdb6f430005ixw0bgal9qia","tag_id":"clqdb6f420004ixw05300flrg","_id":"clqdb6f48000hixw02svx5f2c"},{"post_id":"clqdb6f450007ixw0h8spdugj","tag_id":"clqdb6f48000gixw00nb8clj4","_id":"clqdb6f49000kixw03hq481gf"},{"post_id":"clqdb6f450007ixw0h8spdugj","tag_id":"clqdb6f49000iixw09ng9gsxn","_id":"clqdb6f49000lixw022f5ghs1"},{"post_id":"clqdb6f450007ixw0h8spdugj","tag_id":"clqdb6f49000jixw0f0hm42h0","_id":"clqdb6f49000mixw09k9e0xkv"}],"Tag":[{"name":"article","_id":"clqdb6f420004ixw05300flrg"},{"name":"frontend","_id":"clqdb6f450008ixw03eu7elh2"},{"name":"os","_id":"clqdb6f47000cixw04cku9nn2"},{"name":"startup","_id":"clqdb6f48000gixw00nb8clj4"},{"name":"oneoverzero","_id":"clqdb6f49000iixw09ng9gsxn"},{"name":"jinet","_id":"clqdb6f49000jixw0f0hm42h0"}]}}