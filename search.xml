<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Start up</title>
      <link href="/2023/startup/"/>
      <url>/2023/startup/</url>
      
        <content type="html"><![CDATA[<h1 id="Start-up-on-OneOverZero"><a href="#Start-up-on-OneOverZero" class="headerlink" title="Start up on OneOverZero"></a>Start up on OneOverZero</h1><h2 id="1-Create-a-new-repository-on-GitHub"><a href="#1-Create-a-new-repository-on-GitHub" class="headerlink" title="1. Create a new repository on GitHub"></a>1. Create a new repository on GitHub</h2>]]></content>
      
      
      
        <tags>
            
            <tag> startup </tag>
            
            <tag> oneoverzero </tag>
            
            <tag> jinet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin &amp; Java 语法对比</title>
      <link href="/2022/kotlin-vs-java/"/>
      <url>/2022/kotlin-vs-java/</url>
      
        <content type="html"><![CDATA[<h1 id="Kotlin-Java-语法对比"><a href="#Kotlin-Java-语法对比" class="headerlink" title="Kotlin &amp; Java 语法对比"></a>Kotlin &amp; Java 语法对比</h1><h2 id="null-safe"><a href="#null-safe" class="headerlink" title="null safe"></a>null safe</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> userName = a?.b?.c?.d ?: <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="对象实例化"><a href="#对象实例化" class="headerlink" title="对象实例化"></a>对象实例化</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(<span class="keyword">val</span> name: String, <span class="keyword">val</span> age: <span class="built_in">Int</span>)</span><br><span class="line"><span class="keyword">val</span> user = User(<span class="string">&quot;yalda&quot;</span>, <span class="number">31</span>)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main</span></span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;xxx&quot;</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure><h2 id="属性访问"><a href="#属性访问" class="headerlink" title="属性访问"></a>属性访问</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"><span class="keyword">val</span> name: String? = <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="默认的构造函数"><a href="#默认的构造函数" class="headerlink" title="默认的构造函数"></a>默认的构造函数</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(<span class="keyword">var</span> name: String)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name.toUpperCase();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name.toUpperCase();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快输创建-List-Map-集合类型"><a href="#快输创建-List-Map-集合类型" class="headerlink" title="快输创建 List&#x2F;Map 集合类型"></a>快输创建 List&#x2F;Map 集合类型</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// list</span></span><br><span class="line"><span class="keyword">val</span> list = listOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="comment">// 不可变</span></span><br><span class="line"><span class="keyword">val</span> mlist = mutableListOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="comment">// 可变</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// map</span></span><br><span class="line"><span class="keyword">val</span> map = mapOf(<span class="string">&quot;a&quot;</span> to <span class="string">&quot;aa&quot;</span>, <span class="string">&quot;b&quot;</span> to <span class="string">&quot;bb&quot;</span>) <span class="comment">// 不可变</span></span><br><span class="line"><span class="keyword">val</span> mmap = mutableMapOf(<span class="string">&quot;a&quot;</span> to <span class="string">&quot;aa&quot;</span>, <span class="string">&quot;b&quot;</span> to <span class="string">&quot;bb&quot;</span>) <span class="comment">// 可变</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// list</span></span><br><span class="line"><span class="type">ArrayList</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">list.add(<span class="number">0</span>);</span><br><span class="line">list.add(<span class="number">1</span>);</span><br><span class="line">list.add(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;();</span><br><span class="line">map.put(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;a&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;key2&quot;</span>, <span class="string">&quot;b&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="对象属性调用（with-apply-let）"><a href="#对象属性调用（with-apply-let）" class="headerlink" title="对象属性调用（with\apply\let）"></a>对象属性调用（with\apply\let）</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> user = User()</span><br><span class="line">with (user) &#123;</span><br><span class="line">name = <span class="string">&quot;yalda&quot;</span></span><br><span class="line">age = <span class="number">10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">user.setName(<span class="string">&quot;yalda&quot;</span>);</span><br><span class="line">user.setAge(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><h2 id="Android-自动绑定-XML-文件控件定义"><a href="#Android-自动绑定-XML-文件控件定义" class="headerlink" title="Android 自动绑定 XML 文件控件定义"></a>Android 自动绑定 XML 文件控件定义</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> kotlinx.android.synthetic.main.activity_main.*</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MainActivity</span> : <span class="type">AppCompatActivity</span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        .....</span><br><span class="line">        textView.text = <span class="string">&quot;hello&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="简化-Parcelable-实现"><a href="#简化-Parcelable-实现" class="headerlink" title="简化 Parcelable 实现"></a>简化 Parcelable 实现</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.os.parcelable</span><br><span class="line"><span class="keyword">import</span> kotlinx.android.parcel.Parcelize</span><br><span class="line"></span><br><span class="line"><span class="meta">@Parcelize</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(<span class="keyword">var</span> age: <span class="built_in">Int</span>, <span class="keyword">var</span> name: String): Parcelable</span><br></pre></td></tr></table></figure><h2 id="协程-coroutines"><a href="#协程-coroutines" class="headerlink" title="协程 coroutines"></a>协程 coroutines</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GlobalScope.launch &#123;</span><br><span class="line">doSomething()</span><br><span class="line">withContext(Dispatchers.Main) &#123;</span><br><span class="line">textView.text = <span class="string">&quot;coroutines done&quot;</span></span><br><span class="line">Toast.makeText(<span class="keyword">this</span><span class="symbol">@MainActivity</span>, <span class="string">&quot;coroutines hooray&quot;</span>, Toast.LENGTH_SHORT).show()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="简化单例（类似与-Swift-的-struct）"><a href="#简化单例（类似与-Swift-的-struct）" class="headerlink" title="简化单例（类似与 Swift 的 struct）"></a>简化单例（类似与 Swift 的 struct）</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span> User &#123;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">test</span><span class="params">()</span></span> &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">User</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> User <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用字符串模板简化字符串操作"><a href="#使用字符串模板简化字符串操作" class="headerlink" title="使用字符串模板简化字符串操作"></a>使用字符串模板简化字符串操作</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getInfo</span><span class="params">()</span></span>:String = <span class="string">&quot;&gt;&gt; <span class="variable">$name</span>; and age is <span class="subst">$&#123;age&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">info</span> <span class="operator">=</span> <span class="string">&quot;&gt;&gt;&quot;</span> + <span class="built_in">this</span>.name + <span class="string">&quot;; and age is&quot;</span> + <span class="built_in">this</span>.age;</span><br><span class="line"><span class="keyword">return</span> info;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用-when-替代-switch-case"><a href="#使用-when-替代-switch-case" class="headerlink" title="使用 when 替代 switch &amp; case"></a>使用 when 替代 switch &amp; case</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> id = <span class="number">1</span></span><br><span class="line"><span class="keyword">when</span>(id) &#123;</span><br><span class="line"><span class="number">1</span> -&gt; println(<span class="string">&quot;is one&quot;</span>)</span><br><span class="line"><span class="number">2</span> -&gt; println(<span class="string">&quot;is two&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> -&gt; &#123;</span><br><span class="line">println(<span class="string">&quot;is not one and two&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">switch</span>(id) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">System.out.println(<span class="string">&quot;is one&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;is two&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">System.out.println(<span class="string">&quot;is not one and two&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解构对象（Destructing-declarations）类似-JS-中的-rest"><a href="#解构对象（Destructing-declarations）类似-JS-中的-rest" class="headerlink" title="解构对象（Destructing declarations）类似 JS 中的 rest"></a>解构对象（Destructing declarations）类似 JS 中的 rest</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">User</span>(<span class="keyword">val</span> userName: String, <span class="keyword">val</span> age: <span class="built_in">Int</span>)</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">val</span> user = User(<span class="string">&quot;yalda&quot;</span>, <span class="number">31</span>)</span><br><span class="line"><span class="keyword">val</span> (userName, age) = user</span><br><span class="line">println(<span class="string">&quot;name: <span class="variable">$userName</span>, age: <span class="variable">$age</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> lang/kotlin </tag>
            
            <tag> lang/java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>菜鸟《Kotlin 教程》笔记</title>
      <link href="/2022/kotlin-learn/"/>
      <url>/2022/kotlin-learn/</url>
      
        <content type="html"><![CDATA[<h1 id="菜鸟《Kotlin-教程》笔记"><a href="#菜鸟《Kotlin-教程》笔记" class="headerlink" title="菜鸟《Kotlin 教程》笔记"></a>菜鸟《Kotlin 教程》笔记</h1><h2 id="Kotlin-基础"><a href="#Kotlin-基础" class="headerlink" title="Kotlin 基础"></a>Kotlin 基础</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><ul><li>由 JetBrians 设计并开源</li><li>Kotlin 不仅仅是一门 JVM 方言（分为 Kotlin Native \ Kotlin JS \ Kotlin JVM）</li><li>Google I&#x2F;O 2017 年作为 Android 官方首选开发语言</li><li>文件以 <code>.kt</code> 结尾（其中脚本 DSL 以 <code>.kts</code> 结尾）</li><li>无需匹配目录和包（不同于 Java 一个文件一个类），可以放在任何文件和目录</li></ul><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ul><li>简洁：大大减少样板代码的数量<ul><li>结构性的 get&#x2F;set、构造函数、单例</li><li>字面量创建 List&#x2F;Map</li></ul></li><li>安全：语法层面避免空指针异常</li><li>互操作性：充分利用 JVM 、 Android 和浏览器的现有库</li><li>体验一致的开发工具链</li><li>支持拓展（类似与 Swift 的 extension）；操作符重载</li><li>语法糖很多<ul><li>通过语法糖实现了一下基本设计模式（单例、委托、策略、观察者等）</li></ul></li></ul><h3 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h3><ul><li>语法糖太多（软性关键字被占用），导致语义复杂；而要理解这些语法糖，需要了解 Java 的实现</li><li>包体积变大（Kotlin 库文件）</li><li>编译时略长（涉及到往 Java 字节码的转译）</li><li>开源不彻底；命令行工具链不完善（深度绑定IDE）</li></ul><h3 id="CLI"><a href="#CLI" class="headerlink" title="CLI"></a>CLI</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -d 设置输出名称</span></span><br><span class="line"><span class="comment"># -include-runtime .jar 文件包含 Kotlin 运行库</span></span><br><span class="line">kotlinc hello.kt -include-runtime -d hello.jar</span><br><span class="line">java -jar hello.jar</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成的 jar 给其他 Kotlin 代码使用，无需包含 Kotlin 运行时库</span></span><br><span class="line">kotlinc hello.kt -d hello.jar</span><br><span class="line"></span><br><span class="line"><span class="comment"># HelloKit 默认类名</span></span><br><span class="line">kotlin -classpath hello.jar HelloKit</span><br></pre></td></tr></table></figure><h3 id="REPL"><a href="#REPL" class="headerlink" title="REPL"></a>REPL</h3><p><code>bin/kotlinc-jvm</code></p><h3 id="脚本语言-kts"><a href="#脚本语言-kts" class="headerlink" title="脚本语言 .kts"></a>脚本语言 .kts</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// list_folders.kts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> folders = File(args[<span class="number">0</span>]).listFiles &#123; file -&gt; file.isDirectory() &#125;</span><br><span class="line">folders?.forEach &#123; folders -&gt; println(folder) &#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kotlinc -script list_folders.kts ./</span><br></pre></td></tr></table></figure><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><h3 id="默认-导入到每个-Kotlin-文件的包"><a href="#默认-导入到每个-Kotlin-文件的包" class="headerlink" title="::默认:: 导入到每个 Kotlin 文件的包"></a>::默认:: 导入到每个 Kotlin 文件的包</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> kotlin.*</span><br><span class="line"><span class="keyword">import</span> kotlin.<span class="keyword">annotation</span>.*</span><br><span class="line"><span class="keyword">import</span> kotlin.collections.*</span><br><span class="line"><span class="keyword">import</span> kotlin.comparisons.*</span><br><span class="line"><span class="keyword">import</span> kotlin.io.*</span><br><span class="line"><span class="keyword">import</span> kotlin.ranges.*</span><br><span class="line"><span class="keyword">import</span> kotlin.sequences.*</span><br><span class="line"><span class="keyword">import</span> kotlin.text.*</span><br><span class="line"></span><br><span class="line"><span class="comment">/* if target jvm */</span></span><br><span class="line"><span class="keyword">import</span> java.lang.*</span><br><span class="line"><span class="keyword">import</span> kotlin.jvm.*</span><br><span class="line"></span><br><span class="line"><span class="comment">/* if target js */</span></span><br><span class="line"><span class="keyword">import</span> kotlin.js.*</span><br></pre></td></tr></table></figure><h3 id="Kotlin-的代码结构"><a href="#Kotlin-的代码结构" class="headerlink" title="Kotlin 的代码结构"></a>Kotlin 的代码结构</h3><p>不同于 Java；Kotlin 函数是一等公民；可以在文件内（TOP Level）定义变量、函数、匿名函数、类、object 、data 类、enum 类、Sealed Class、Extensions等</p><ul><li>Kotlin 是大小写敏感的</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.yalda.main</span><br><span class="line"><span class="keyword">import</span> java.util.*</span><br><span class="line"></span><br><span class="line"><span class="comment">// cn.yalda.main.test</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">test</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// cn.yalda.main.Text</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> a: <span class="built_in">Int</span> = <span class="number">123</span></span><br><span class="line"><span class="keyword">val</span> sumLambda: (<span class="built_in">Int</span>, <span class="built_in">Int</span>) -&gt; <span class="built_in">Int</span> = &#123; x, y -&gt; x + y &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>: <span class="built_in">Unit</span> &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="函数的定义和类型声明"><a href="#函数的定义和类型声明" class="headerlink" title="函数的定义和类型声明"></a>函数的定义和类型声明</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sum</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 返回类型自动推断（函数单一表达式）</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sum</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span> = a + b <span class="comment">// single expression</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 无返回值，声明 Unit 类型（类似 Java 和 TS 的 void）</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">printSum</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: <span class="built_in">Unit</span> &#123;</span><br><span class="line">println(a + b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// public 必须明确声明返回值类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="title">sum</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> = a + b</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回值是 Unit 类型，则可以省略</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="title">printSum</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">print(a + b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数的调用"><a href="#函数的调用" class="headerlink" title="函数的调用"></a>函数的调用</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sum</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>, c: <span class="type">Int</span>)</span></span>:<span class="built_in">Int</span> &#123;</span><br><span class="line">println(<span class="string">&quot;a = <span class="variable">$a</span>,b =  <span class="variable">$b</span>,c = <span class="variable">$c</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> a + b + c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>) <span class="comment">// a = 0, b = 1, c = 2</span></span><br><span class="line">sum(a = <span class="number">0</span>, b = <span class="number">1</span>, <span class="number">2</span>) <span class="comment">// a = 0, b = 1, c = 2</span></span><br><span class="line">sum(a = <span class="number">0</span>, <span class="number">1</span>, c = <span class="number">2</span>) <span class="comment">// a = 0, b = 1, c = 2</span></span><br><span class="line">sum(<span class="number">0</span>, b = <span class="number">1</span>, c = <span class="number">2</span>) <span class="comment">// a = 0, b = 1, c = 2</span></span><br><span class="line">sum(c = <span class="number">2</span>, b = <span class="number">1</span>, a = <span class="number">0</span>) <span class="comment">// a = 0, b = 1, c = 2</span></span><br><span class="line">sum(c = <span class="number">0</span>, b = <span class="number">1</span>, <span class="number">2</span>) <span class="comment">// Error</span></span><br></pre></td></tr></table></figure><h3 id="操作符"><a href="#操作符" class="headerlink" title=":: 操作符"></a>:: 操作符</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="keyword">val</span> nickName: String) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">(a: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        println(<span class="string">&quot;<span class="variable">$a</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getFun</span><span class="params">(age: <span class="type">Int</span>, function: (<span class="type">Int</span>) -&gt; <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">        function(age)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> p = Persion(<span class="string">&quot;musk&quot;</span>)</span><br><span class="line">p.getFun(<span class="number">10</span>, p::foo) <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><h3 id="可增参数（可变长参数函数）"><a href="#可增参数（可变长参数函数）" class="headerlink" title="可增参数（可变长参数函数）"></a>可增参数（可变长参数函数）</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">vars</span><span class="params">(<span class="keyword">vararg</span> v: <span class="type">Int</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(vi <span class="keyword">in</span> v) println(vi)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vars(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>) <span class="comment">// 1234</span></span><br></pre></td></tr></table></figure><h3 id="Lambda（匿名函数-闭包表达式）"><a href="#Lambda（匿名函数-闭包表达式）" class="headerlink" title="Lambda（匿名函数 \ 闭包表达式）"></a>Lambda（匿名函数 \ 闭包表达式）</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line"><span class="keyword">val</span> sumLambda: (<span class="built_in">Int</span>, <span class="built_in">Int</span>) -&gt; <span class="built_in">Int</span> = &#123; x, y -&gt; x + y &#125;</span><br><span class="line">println(sumLambda(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> sumLambda: (<span class="built_in">Int</span>, <span class="built_in">Int</span>) -&gt; <span class="built_in">Int</span> = &#123; x, y -&gt; x + y &#125;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">println(sumLambda(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Named arguments are not allowed for function types</span></span><br></pre></td></tr></table></figure><h3 id="定义常量和变量"><a href="#定义常量和变量" class="headerlink" title="定义常量和变量"></a>定义常量和变量</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 变量 var &lt;标识符&gt;: &lt;类型&gt;&lt;可选&gt; = &lt;初始化知&gt;</span></span><br><span class="line"><span class="keyword">val</span> name: String</span><br><span class="line">name = <span class="string">&quot;xx&quot;</span></span><br><span class="line">name = <span class="string">&quot;yalda&quot;</span> <span class="comment">// Val cannot be reassigned</span></span><br><span class="line"><span class="comment">// 常量与变量都可以没有初始化值,但是在引用前必须初始化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 常量 val &lt;标识符&gt;: &lt;类型&gt;&lt;可选&gt; = &lt;初始化知&gt;</span></span><br><span class="line"><span class="keyword">var</span> age: <span class="built_in">Int</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> age1: <span class="built_in">Int</span> <span class="comment">// 声明时未初始化，必须声明类型</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">0</span> <span class="comment">// 编译器支持自动类型判断</span></span><br></pre></td></tr></table></figure><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// single row command</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">multiple row commands */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> multiple row commands</span></span><br><span class="line"><span class="comment"><span class="comment">/* kotlin support nest commands*/</span></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="字符串模板"><a href="#字符串模板" class="headerlink" title="字符串模板"></a>字符串模板</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">val str: String = &quot;single string&quot;</span><br><span class="line">val temp: String = &quot;$str&quot;</span><br><span class="line">val temp2: Strig = &quot;$str length is $&#123;str.length&#125;&quot;</span><br></pre></td></tr></table></figure><h3 id="Null-检查机制"><a href="#Null-检查机制" class="headerlink" title="Null 检查机制"></a>Null 检查机制</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age: String? = <span class="string">&quot;23&quot;</span> <span class="comment">// ? means optional</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> age = age!!.toInt() <span class="comment">// 23 or null-point-exceptions</span></span><br><span class="line"><span class="keyword">val</span> age1 = age?.toInt() <span class="comment">// 23 or null</span></span><br><span class="line"><span class="keyword">val</span> age2 = age?.toInt() ?: -<span class="number">1</span> <span class="comment">// 23</span></span><br></pre></td></tr></table></figure><h3 id="类型检测-自动类型转换"><a href="#类型检测-自动类型转换" class="headerlink" title="类型检测&amp;自动类型转换"></a>类型检测&amp;自动类型转换</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getStringLength</span><span class="params">(obj: <span class="type">Any</span>)</span></span>: <span class="built_in">Int</span>? &#123;</span><br><span class="line"><span class="keyword">if</span> (obj <span class="keyword">is</span> String) <span class="keyword">return</span> obj.length</span><br><span class="line"><span class="keyword">if</span> (obj !<span class="keyword">is</span> String) <span class="keyword">return</span> <span class="literal">null</span> <span class="comment">// or</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (obj <span class="keyword">is</span> String &amp;&amp; obj.length &gt; <span class="number">0</span>) <span class="keyword">return</span> obj.length <span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> nulll</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="区间（Range）"><a href="#区间（Range）" class="headerlink" title="区间（Range）"></a>区间（Range）</h3><p>由 <code>..</code> 的 rangeTo 函数 &amp; in &amp; ~!in 形成</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.4</span>) print(i) <span class="comment">// [1, 4]</span></span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span> until <span class="number">4</span>) print(n) <span class="comment">// [1, 4)</span></span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">4.</span><span class="number">.1</span>) print(i) <span class="comment">//</span></span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.4</span> step <span class="number">2</span>) print(i) <span class="comment">// 13</span></span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">4</span> downTo <span class="number">1</span>) print(i) <span class="comment">// 4321</span></span><br></pre></td></tr></table></figure><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><h3 id="基本数值"><a href="#基本数值" class="headerlink" title="基本数值"></a>基本数值</h3><p>Byte \ Short \ Int \ Long<br>Float \ Double</p><h4 id="字面常量"><a href="#字面常量" class="headerlink" title="字面常量"></a>字面常量</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> oneMillion = <span class="number">1_000_000</span></span><br><span class="line"><span class="keyword">val</span> ID = <span class="number">321023_1999_1212_0000L</span></span><br><span class="line"><span class="keyword">val</span> bigD = <span class="number">123.5e10</span></span><br><span class="line"><span class="keyword">val</span> f= <span class="number">123213f</span> <span class="comment">// 123213F 123213.0</span></span><br><span class="line"><span class="keyword">val</span> hexBytes = <span class="number">0xCCCCCC</span> <span class="comment">// 13421772</span></span><br><span class="line"><span class="keyword">val</span> bytes = <span class="number">0b111111_00000000_111111_000000</span> <span class="comment">// 66064320</span></span><br></pre></td></tr></table></figure><h4 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> a: <span class="built_in">Int</span> = <span class="number">123</span></span><br><span class="line">a == <span class="number">123</span> <span class="comment">// true</span></span><br><span class="line">a === <span class="number">123</span> <span class="comment">// true</span></span><br><span class="line"><span class="keyword">val</span> b: <span class="built_in">Int</span> = <span class="number">123</span></span><br><span class="line">a == b <span class="comment">// true</span></span><br><span class="line">a === b <span class="comment">// true</span></span><br><span class="line"><span class="keyword">val</span> c: <span class="built_in">Int</span>? = a</span><br><span class="line">a == c <span class="comment">// true</span></span><br><span class="line">a === c <span class="comment">// false</span></span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发现一个有趣的现象</span></span><br><span class="line"><span class="keyword">val</span> a: <span class="built_in">Int</span> = <span class="number">127</span></span><br><span class="line"><span class="keyword">val</span> c: <span class="built_in">Int</span>? = a</span><br><span class="line"><span class="keyword">val</span> d: <span class="built_in">Int</span>? = a</span><br><span class="line">c === d <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> b: <span class="built_in">Int</span> = <span class="number">128</span></span><br><span class="line"><span class="keyword">val</span> c1: <span class="built_in">Int</span>? = b</span><br><span class="line"><span class="keyword">val</span> d1: <span class="built_in">Int</span>? = b</span><br><span class="line">c1 === d1 <span class="comment">// false</span></span><br><span class="line"><span class="comment">// 个人怀疑，kotlin 对代码做了优化；小于 2^8 时使用数值对象，超过则创建新对象</span></span><br></pre></td></tr></table></figure><h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><ul><li>较小的类型不是较大类型的子类型；在不进行显式转换下是违法的</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> b: <span class="built_in">Byte</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">val</span> i: <span class="built_in">Int</span> = b <span class="comment">// error</span></span><br><span class="line"><span class="keyword">val</span> i: <span class="built_in">Int</span> = b.toInt()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有些情况会做自动类型转化</span></span><br><span class="line"><span class="keyword">val</span> l = <span class="number">1L</span> + <span class="number">3</span> <span class="comment">// Long + Int -&gt; Long</span></span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">toByte(): <span class="built_in">Byte</span></span><br><span class="line">toShort(): <span class="built_in">Short</span></span><br><span class="line">toInt(): <span class="built_in">Int</span></span><br><span class="line">toLong(): <span class="built_in">Long</span></span><br><span class="line">toFloat(): <span class="built_in">Float</span></span><br><span class="line">toDouble(): <span class="built_in">Double</span></span><br><span class="line">toChar(): <span class="built_in">Char</span></span><br></pre></td></tr></table></figure><h4 id="位操作符"><a href="#位操作符" class="headerlink" title="位操作符"></a>位操作符</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">shl <span class="comment">// &lt;&lt; ; 8 shl 1 == 16</span></span><br><span class="line">shr <span class="comment">// &gt;&gt; ; 8 shr 1 == 4</span></span><br><span class="line">ushr <span class="comment">// &gt;&gt;&gt;</span></span><br><span class="line">and <span class="comment">// &amp;</span></span><br><span class="line">or <span class="comment">// |</span></span><br><span class="line">xor <span class="comment">// ^</span></span><br><span class="line">inv <span class="comment">// 反向</span></span><br></pre></td></tr></table></figure><h3 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> c: <span class="built_in">Char</span> = <span class="string">&#x27;c&#x27;</span> <span class="comment">// 必须是单引号</span></span><br><span class="line"><span class="keyword">val</span> c: <span class="built_in">Char</span> = <span class="string">&#x27;\u2354&#x27;</span> <span class="comment">// \t \n \b \r \&#x27; \&quot; \\ \$</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(c !<span class="keyword">in</span> <span class="string">&#x27;0&#x27;</span>..<span class="string">&#x27;9&#x27;</span>) <span class="comment">// range</span></span><br></pre></td></tr></table></figure><h3 id="布尔-Boolean"><a href="#布尔-Boolean" class="headerlink" title="布尔 Boolean"></a>布尔 Boolean</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> b: <span class="built_in">Boolean</span> = <span class="literal">false</span> <span class="comment">// false or true</span></span><br><span class="line"><span class="literal">false</span> || <span class="literal">true</span> <span class="comment">// true</span></span><br><span class="line"><span class="literal">false</span> &amp;&amp; <span class="literal">true</span> <span class="comment">// false</span></span><br><span class="line">!<span class="literal">false</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>由类 Array 实现，拥有 size \ get \ set 方法；Kotlin 中的数组是不协变的（invariant）；<br>创建方式：1、arrayOf() 2、工厂函数</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// [1,2,3] arrayOf 函数</span></span><br><span class="line"><span class="keyword">val</span> a = arrayOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">a[<span class="number">0</span>]</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// [2,4,6] array 工厂函数</span></span><br><span class="line"><span class="keyword">val</span> a1: Array = Array(<span class="number">3</span>, &#123; x -&gt; x * <span class="number">2</span> &#125;)</span><br><span class="line"><span class="keyword">val</span> ia: IntArray = intArrayOf(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="keyword">val</span> ba: ByteArray = byteArrayOf(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="keyword">val</span> sa: ShortArray = shortArrayOf(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>同 Java 一样 String 是不可变的</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (c <span class="keyword">in</span> <span class="string">&quot;str&quot;</span>) println(c)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> text = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  |multiple str1</span></span><br><span class="line"><span class="string">    |multiple str2</span></span><br><span class="line"><span class="string">    |multiple str3</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">text <span class="comment">// some pre space(include |)</span></span><br><span class="line">text.trimMargin() <span class="comment">// default use | for replace pre space</span></span><br><span class="line">text.trimMargin(<span class="string">&quot;&gt;&quot;</span>) <span class="comment">// use &gt; for replace pre space</span></span><br></pre></td></tr></table></figure><h3 id="字符串模板-1"><a href="#字符串模板-1" class="headerlink" title="字符串模板"></a>字符串模板</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> i = <span class="string">&quot;10&quot;</span></span><br><span class="line"><span class="keyword">val</span> s = <span class="string">&quot;len = <span class="subst">$&#123;i.length&#125;</span>&quot;</span> <span class="comment">// len = 2</span></span><br><span class="line"><span class="keyword">val</span> ms = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">|price is $<span class="variable">$i</span></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span> <span class="comment">// price is $10</span></span><br></pre></td></tr></table></figure><h2 id="条件控制"><a href="#条件控制" class="headerlink" title="条件控制"></a>条件控制</h2><p>Kotlin 里的 <code>if</code> 和 <code>when</code> 均可以作为条件控制语句，也可以作为表达式</p><h3 id="IF-表达式"><a href="#IF-表达式" class="headerlink" title="IF 表达式"></a>IF 表达式</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// condition is a statement return Boolean; ex. i in 1..8</span></span><br><span class="line"><span class="keyword">if</span> (condition) ..</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> max = a</span><br><span class="line"><span class="keyword">if</span> (a &lt; b) max = b</span><br><span class="line"><span class="keyword">if</span> (a &lt; b) max = <span class="number">2</span> <span class="keyword">else</span> max = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> (a &lt; b) &#123;</span><br><span class="line">max = b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 作为表达式返回结果</span></span><br><span class="line"><span class="keyword">val</span> max = <span class="keyword">if</span> (a &gt; b) a <span class="keyword">else</span> b <span class="comment">// Kotlin 没有三元表达式</span></span><br><span class="line"><span class="keyword">val</span> max = <span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">println(<span class="string">&quot;Choose a value&quot;</span>)</span><br><span class="line">a</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">println(<span class="string">&quot;<span class="variable">$b</span>&quot;</span>)</span><br><span class="line">b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="When-表达式"><a href="#When-表达式" class="headerlink" title="When 表达式"></a>When 表达式</h3><p>类似于 C &amp; Java 的 switch 语句</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 作为表达式使用时，符合的分支的值就是表达式的值</span></span><br><span class="line"><span class="comment">// 也可以作为语句（条件控制语句）使用</span></span><br><span class="line"><span class="keyword">when</span> (x) &#123;</span><br><span class="line"><span class="number">1</span> -&gt; println(<span class="string">&quot;11&quot;</span>)</span><br><span class="line"><span class="number">2</span> -&gt; println(<span class="string">&quot;22&quot;</span>)</span><br><span class="line"><span class="number">3</span>, <span class="number">4</span> -&gt; println(<span class="string">&quot;3344&quot;</span>)</span><br><span class="line"><span class="keyword">in</span> <span class="number">5.</span><span class="number">.10</span> -&gt; println(<span class="string">&quot;5 to 10&quot;</span>)</span><br><span class="line">!<span class="keyword">in</span> <span class="number">11.</span><span class="number">.20</span> -&gt; println(<span class="string">&quot;no in 11 to 20&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> -&gt; &#123;</span><br><span class="line">println(<span class="string">&quot;default&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// use is or !is</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">hasPrefix</span><span class="params">(x: <span class="type">Any</span>)</span></span> = <span class="keyword">when</span>(x) &#123;</span><br><span class="line"><span class="comment">// Any 是 Kotlin 所有类的基类</span></span><br><span class="line"><span class="keyword">is</span> String -&gt; println(<span class="string">&quot;is String&quot;</span>)</span><br><span class="line"><span class="keyword">is</span> <span class="built_in">Int</span> -&gt; println(<span class="string">&quot;is Int&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> -&gt; &#123;</span><br><span class="line">println(<span class="string">&quot;else&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// replace if-elseif chain</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> String.<span class="title">isInTen</span><span class="params">()</span></span> = <span class="keyword">this</span> <span class="keyword">in</span> <span class="string">&quot;1&quot;</span>..<span class="string">&quot;10&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> String.<span class="title">isInHundred</span><span class="params">()</span></span> = <span class="keyword">this</span> <span class="keyword">in</span> <span class="string">&quot;1&quot;</span>..<span class="string">&quot;100&quot;</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;50&quot;</span></span><br><span class="line"><span class="keyword">when</span> &#123;</span><br><span class="line">a.isInTen() -&gt; println(<span class="string">&quot;a in [1, 10]&quot;</span>)</span><br><span class="line">a.isInHundred() -&gt; println(<span class="string">&quot;a in [1, 100]&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> -&gt; println(<span class="string">&quot;a not in range&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// use in</span></span><br><span class="line"><span class="keyword">val</span> items = setOf(<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;huawei&quot;</span>)</span><br><span class="line"><span class="keyword">when</span> &#123;</span><br><span class="line"><span class="string">&quot;xiaomi&quot;</span> <span class="keyword">in</span> items -&gt; println(<span class="string">&quot;mi&quot;</span>)</span><br><span class="line"><span class="string">&quot;vivo&quot;</span> <span class="keyword">in</span> items -&gt; println(<span class="string">&quot;mi&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="循环控制"><a href="#循环控制" class="headerlink" title="循环控制"></a>循环控制</h2><h3 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h3><p>对提供迭代器的对象进行遍历：<code>for (item in collection) statement</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// array &amp; array.indices &amp; array.withIndex()</span></span><br><span class="line"><span class="keyword">for</span> (v <span class="keyword">in</span> arrayOf(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)) print(v)  <span class="comment">// 123</span></span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> arrayOf(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>).indices) print(i) <span class="comment">// 012</span></span><br><span class="line"><span class="keyword">for</span> (v <span class="keyword">in</span> Array(<span class="number">3</span>, &#123; x -&gt; x * <span class="number">2</span> &#125;)) print(v) <span class="comment">// 024</span></span><br><span class="line"><span class="keyword">for</span> ((i,v) <span class="keyword">in</span> arrayOf(<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>).withIndex()) println(<span class="string">&quot;<span class="variable">$i</span> <span class="variable">$v</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// list &amp; &amp; list.indices list.withIndex()</span></span><br><span class="line"><span class="keyword">for</span> (v <span class="keyword">in</span> listOf(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)) print(v) <span class="comment">// 123</span></span><br><span class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> listOf(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>).indices) print(<span class="string">&quot;<span class="variable">$i</span>&quot;</span>) <span class="comment">// 012</span></span><br><span class="line"><span class="keyword">for</span> ((index, value) <span class="keyword">in</span> listOf(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>).withIndex()) println(v)</span><br><span class="line"></span><br><span class="line"><span class="comment">// set &amp; set.withIndex()</span></span><br><span class="line"><span class="keyword">for</span> (v <span class="keyword">in</span> setOf(<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;bb&quot;</span>)) println(<span class="string">&quot;<span class="variable">$v</span>&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> ((i, v) <span class="keyword">in</span> setOf(<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;bb&quot;</span>).withIndex()) println(<span class="string">&quot;<span class="variable">$i</span> <span class="variable">$v</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// map &amp; map destruct</span></span><br><span class="line"><span class="keyword">for</span> (v <span class="keyword">in</span> mapOf(<span class="string">&quot;a&quot;</span> to <span class="string">&quot;xx&quot;</span>, <span class="string">&quot;b&quot;</span> to <span class="string">&quot;yy&quot;</span>)) println(v) <span class="comment">// a=xx \n b =yy</span></span><br><span class="line"><span class="keyword">for</span> ((k, v) <span class="keyword">in</span> mapOf(<span class="string">&quot;a&quot;</span> to <span class="string">&quot;xx&quot;</span>, <span class="string">&quot;b&quot;</span> to <span class="string">&quot;yy&quot;</span>)) println(<span class="string">&quot;<span class="variable">$k</span> <span class="variable">$v</span>&quot;</span>) <span class="comment">// a xx \n b yy</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// range</span></span><br><span class="line"><span class="keyword">for</span> (v <span class="keyword">in</span> <span class="number">1.</span><span class="number">.10</span>) print(<span class="string">&quot;<span class="variable">$v</span>&quot;</span>) <span class="comment">// 12345678910</span></span><br><span class="line"><span class="keyword">for</span> (v <span class="keyword">in</span> <span class="number">1</span> until <span class="number">10</span>) print(v) <span class="comment">// 123456789</span></span><br><span class="line"><span class="keyword">for</span> (v <span class="keyword">in</span> <span class="number">1.</span><span class="number">.10</span> step <span class="number">2</span>) print(v) <span class="comment">// 13579</span></span><br><span class="line"><span class="keyword">for</span> (v <span class="keyword">in</span> <span class="number">10</span> downTo <span class="number">1</span>) print(v) <span class="comment">// 10987654321</span></span><br></pre></td></tr></table></figure><h3 id="while-do…while-循环"><a href="#while-do…while-循环" class="headerlink" title="while &amp; do…while 循环"></a>while &amp; do…while 循环</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ( <span class="comment">/* Boolean expression */</span>) &#123;&#125;</span><br><span class="line"><span class="keyword">do</span> &#123; <span class="comment">/* logic */</span> &#125; <span class="keyword">while</span> ( <span class="comment">/* Boolean expression */</span>)</span><br></pre></td></tr></table></figure><h3 id="返回和跳转"><a href="#返回和跳转" class="headerlink" title="返回和跳转"></a>返回和跳转</h3><ul><li>return 从循环体的包装函数 &amp; Lambda 返回</li><li>break 终止循环体</li><li>continue 跳出本次循环，进入下一次循环</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(i &lt; <span class="number">10</span>) &#123;</span><br><span class="line">i += <span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> (i == <span class="number">2</span>) <span class="keyword">continue</span></span><br><span class="line"><span class="keyword">if</span> (i ==<span class="number">5</span> ) <span class="keyword">break</span></span><br><span class="line">  print(i)</span><br><span class="line">&#125; <span class="comment">// 134</span></span><br></pre></td></tr></table></figure><h3 id="Break-Continue-Label"><a href="#Break-Continue-Label" class="headerlink" title="Break &amp; Continue &amp; Label"></a>Break &amp; Continue &amp; Label</h3><p>任何表达式都可以使用标签（label@）来标记</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">myloop@</span> <span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.10</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">3</span>) <span class="keyword">break</span><span class="symbol">@myloop</span></span><br><span class="line">print(i)</span><br><span class="line">&#125; <span class="comment">// 12</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line"><span class="keyword">val</span> ints = listOf(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">ints.forEach &#123;</span><br><span class="line">        <span class="keyword">if</span>(it == <span class="number">2</span>) <span class="keyword">return</span></span><br><span class="line">        print(it)</span><br><span class="line">&#125; <span class="comment">// 1 (直接从 main 函数返回)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 给 forEach 添加 label；return 到 forEach 函数（如不加，则直接从 main 函数返回）</span></span><br><span class="line">ints.forEach <span class="symbol">lit@</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(it == <span class="number">2</span>) <span class="keyword">return</span><span class="symbol">@lit</span></span><br><span class="line">        print(it)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等效；Lambda 表达式（隐式标签，与 lambda 函数同名）</span></span><br><span class="line">ints.forEach &#123;</span><br><span class="line"><span class="keyword">if</span>(it == <span class="number">2</span>) <span class="keyword">return</span><span class="symbol">@forEach</span></span><br><span class="line">print(it)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等效；使用匿名函数替代 lambda 表达式</span></span><br><span class="line">ints.forEach(<span class="function"><span class="title">fun</span><span class="params">(value: <span class="type">Int</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(value == <span class="number">2</span>) <span class="keyword">return</span></span><br><span class="line">print(it)</span><br><span class="line">&#125;)</span><br><span class="line">&#125; <span class="comment">// 1345</span></span><br></pre></td></tr></table></figure><h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><h3 id="类的结构-声明"><a href="#类的结构-声明" class="headerlink" title="类的结构 &amp; 声明"></a>类的结构 &amp; 声明</h3><p>Kotlin 类包含：构造函数、初始化代码块、内部类、函数、属性、对象声明</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">EmptyClass</span> // 空类</span><br><span class="line"><span class="keyword">val</span> e = EmptyClass() <span class="comment">// 实例化时无需 new 关键字</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line"><span class="keyword">val</span> name: String? = <span class="string">&quot;yalda&quot;</span> <span class="comment">// 属性（成员变量）</span></span><br><span class="line"><span class="keyword">val</span> website: String? = <span class="string">&quot;yalda.cn&quot;</span> <span class="comment">// 属性（成员变量）</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> = print(<span class="string">&quot;<span class="subst">$&#123;this.website&#125;</span>&quot;</span>) <span class="comment">// 函数（成员方法）</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">val</span> d = Demo()</span><br><span class="line">d.name <span class="comment">// yalda access property name</span></span><br><span class="line">d.foo() <span class="comment">// yalda.cn access &amp; run foo method</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 主构造器以及一个或多个次构造器；主构造器写在类头部（类名后）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">constructor</span>(firstName: String) &#123;&#125;</span><br><span class="line"><span class="comment">// 如果构造器没有注解、以及修饰符可省略 constructor 关键字</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(firstName: String) &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> (<span class="keyword">val</span> nickName: String) &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="Getter-Setter"><a href="#Getter-Setter" class="headerlink" title="Getter &amp; Setter"></a>Getter &amp; Setter</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> &lt;propertyName&gt;[: &lt;PropertyType&gt;] [= &lt;initializer&gt;]</span><br><span class="line">[&lt;getter&gt;]</span><br><span class="line">[&lt;setter&gt;]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name: String = <span class="string">&quot;&quot;</span> <span class="comment">// 实现 getter &amp; setter</span></span><br><span class="line"><span class="keyword">val</span> name: String <span class="comment">// Error, getter &amp; must init in constructor</span></span><br><span class="line"><span class="keyword">val</span> name: String = <span class="string">&quot;&quot;</span> <span class="comment">// 实现 getter</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">var</span> name: String? = <span class="string">&quot;yalda&quot;</span></span><br><span class="line">    <span class="keyword">get</span>() = field!!.toUpperCase()</span><br><span class="line">      <span class="keyword">set</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> site: String? = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">get</span>() = field <span class="comment">// equals get or no defined</span></span><br><span class="line"><span class="keyword">set</span>(s) &#123;</span><br><span class="line">field = <span class="string">&quot;https://<span class="variable">$s</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> heiht: <span class="built_in">Float</span> = <span class="number">145.0f</span></span><br><span class="line">    <span class="keyword">get</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">set</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Late-init"><a href="#Late-init" class="headerlink" title="Late init"></a>Late init</h3><p>非空属性必须在定义时初始化；延迟初始化需要用到 <code>lateinit</code> 关键字</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line"><span class="keyword">lateinit</span> <span class="keyword">var</span> subject: TestSubject</span><br><span class="line"></span><br><span class="line"><span class="meta">@Setup</span> <span class="function"><span class="keyword">fun</span> <span class="title">setup</span><span class="params">()</span></span> &#123;</span><br><span class="line">subject = TextSubject()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Setup</span> <span class="function"><span class="keyword">fun</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line">subject.method()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="主构造器-初始化代码块-实例化"><a href="#主构造器-初始化代码块-实例化" class="headerlink" title="主构造器 &amp; 初始化代码块 &amp; 实例化"></a>主构造器 &amp; 初始化代码块 &amp; 实例化</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">constructor</span>(nickName: String) &#123;</span><br><span class="line"><span class="keyword">init</span> &#123;</span><br><span class="line">println(nickName)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简约语法，通过主构造器定义属性和初始化属性值</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="keyword">val</span> nickName: String = <span class="string">&quot;jok&quot;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="keyword">val</span> nickName: String = <span class="string">&quot;jok&quot;</span>) &#123;</span><br><span class="line"><span class="keyword">init</span> &#123;</span><br><span class="line">println(<span class="string">&quot;nick is <span class="variable">$nickName</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> p = Person(<span class="string">&quot;king&quot;</span>) <span class="comment">// nick is king</span></span><br><span class="line">p.nickName <span class="comment">// king</span></span><br></pre></td></tr></table></figure><h3 id="次构造函数"><a href="#次构造函数" class="headerlink" title="次构造函数"></a>次构造函数</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(parent: Person) &#123; <span class="comment">// prefix constructor</span></span><br><span class="line">        parent.children.add(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果有主构造器，每个次构造器都要（直接或间接）代理主构造器；并使用 this 代理主</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="keyword">val</span> nickName: String) &#123;</span><br><span class="line"><span class="keyword">constructor</span>(name: String, site: String): <span class="keyword">this</span>(name)&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="keyword">val</span> nickName: String) &#123;</span><br><span class="line">  <span class="keyword">var</span> site: String = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment">// this(name, site) 代表 主构造器</span></span><br><span class="line"><span class="keyword">constructor</span>(name: String, site: String): <span class="keyword">this</span>(name)&#123;</span><br><span class="line"><span class="keyword">this</span>.site = site</span><br><span class="line">println(<span class="string">&quot;1&gt; name <span class="variable">$name</span>, site <span class="variable">$site</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// this(name, site) 代表 1&gt; 次构造器</span></span><br><span class="line">  <span class="keyword">constructor</span>(name: String, site: String, fields: <span class="built_in">Int</span>): <span class="keyword">this</span>(name, site)&#123;</span><br><span class="line">println(<span class="string">&quot;2&gt; name <span class="variable">$name</span>, site <span class="variable">$site</span>, fields <span class="variable">$fields</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果构造器参数有默认值，编译器会生成一个附加的无参构造器，这个构造函数会直接使用默认值；从而达到无参构造函数创建实例</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Customer</span>(<span class="keyword">val</span> customerName: String = <span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>抽象是 OOP 的特征之一，采用 <code>abstract</code> 来声明</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不必对抽象类标注 open</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">walk</span><span class="params">(distance: <span class="type">Double</span>)</span></span>: <span class="built_in">Unit</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">step</span><span class="params">()</span></span>: <span class="built_in">Double</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"><span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">f</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Derived</span>: <span class="type">Base</span>() &#123;</span><br><span class="line"><span class="keyword">override</span> <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="嵌套类"><a href="#嵌套类" class="headerlink" title="嵌套类"></a>嵌套类</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line"><span class="keyword">val</span> name = <span class="string">&quot;outer name&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Inner</span> &#123;</span><br><span class="line"><span class="keyword">val</span> name = <span class="string">&quot;inner name&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Outer().name <span class="comment">// outer name</span></span><br><span class="line">Outer.Inner().name <span class="comment">// inner name</span></span><br></pre></td></tr></table></figure><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><p>内部类采用 <code>this@&lt;class-name&gt;</code> 来访问外部类上下文</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> name = <span class="string">&quot;outer name&quot;</span></span><br><span class="line">  <span class="keyword">val</span> nickName = <span class="string">&quot;nike man&quot;</span></span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">class</span> <span class="title class_">Inner</span> &#123;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">name</span><span class="params">()</span></span> = name <span class="comment">// 可以直接访问外部类成员（包括私有）</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">nick</span><span class="params">()</span></span> = nickName</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span>: String &#123;</span><br><span class="line"><span class="keyword">val</span> cxt = <span class="keyword">this</span><span class="symbol">@Outer</span> <span class="comment">// 外部类引用</span></span><br><span class="line">          <span class="keyword">return</span> cxt.nickName</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Outer().Inner().name() <span class="comment">// outer name</span></span><br><span class="line">Outer().Inner().nick() <span class="comment">// nike man</span></span><br><span class="line">Outer().Inner().foo() <span class="comment">// nike man</span></span><br></pre></td></tr></table></figure><h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> v = <span class="string">&quot;viv&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">setInterFace</span><span class="params">(test: <span class="type">TestInterFace</span>)</span></span> &#123;</span><br><span class="line">        test.foo()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">TestInterFace</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> test = Test()</span><br><span class="line">test.setInterFace(<span class="keyword">object</span>: TestInterFace &#123;</span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> &#123;</span><br><span class="line">println(<span class="string">&quot;&gt;&gt;foo print 匿名内部类&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"> <span class="comment">// &gt;&gt;foo print 匿名内部类</span></span><br></pre></td></tr></table></figure><h3 id="类修饰符"><a href="#类修饰符" class="headerlink" title="类修饰符"></a>类修饰符</h3><ul><li>class modifier<ul><li>abstract &#x2F;&#x2F; 抽象类</li><li>final &#x2F;&#x2F; 类不可继承，默认属性</li><li>enum &#x2F;&#x2F; 枚举类</li><li>open &#x2F;&#x2F; 父类（基类、可继承类），类默认 final</li><li>annotation 注解类</li><li>enum &#x2F;&#x2F; 枚举类</li><li>data &#x2F;&#x2F; 数据类</li><li>sealed &#x2F;&#x2F; 密封类</li></ul></li><li>visibility modifier<ul><li>private &#x2F;&#x2F; 仅同一个文件内可见</li><li>protected &#x2F;&#x2F; 同一个文件或者子类可见</li><li>public &#x2F;&#x2F; 所有调用方可见</li><li>internal &#x2F;&#x2F; 同一个模块可见</li></ul></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.kt</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> &#123;&#125; <span class="comment">// 文件 mian.kt 内可见</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">var</span>: MAX_LAVEL = <span class="number">24</span> <span class="comment">// 所有调用方均可见</span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">val</span> baz = <span class="number">0</span> <span class="comment">// 想通模块内可见</span></span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><ul><li>Kotlin 所有类都隐式继承 Any 类；Any 类是所有类的超类包含了 <code>equals()</code> <code>hashCode()</code> <code>toString()</code> 三个函数</li><li>Any类 不是 java.lang.Object</li><li>如果一个类需要可继承需 <code>open</code> 关键字修饰</li><li>子类有构造函数，则基类必须要主构造函数立即初始化</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">Response</span>(value: <span class="built_in">Int</span>, msg: String)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ErrRes</span>(value: <span class="built_in">Int</span>, msg: String): Response(value, msg) &#123;</span><br><span class="line"><span class="keyword">init</span> &#123;</span><br><span class="line">println(<span class="string">&quot;<span class="variable">$value</span>, <span class="variable">$msg</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ErrRes(value = <span class="number">500</span>, msg = <span class="string">&quot;server err&quot;</span>) <span class="comment">// 500, server err</span></span><br></pre></td></tr></table></figure><h3 id="子类是否有主构造函数"><a href="#子类是否有主构造函数" class="headerlink" title="子类是否有主构造函数"></a>子类是否有主构造函数</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子类无主构造函数，需要在每个次构造函数中用 super 来初始化基类</span></span><br><span class="line"><span class="comment">// 而基类也可以提供多种构造函数，供子类初始化</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ErrRes</span>: <span class="type">Response</span> &#123;</span><br><span class="line"><span class="keyword">constructor</span>(): <span class="keyword">super</span>(<span class="number">200</span>, <span class="string">&quot;ok&quot;</span>) &#123;</span><br><span class="line">println(<span class="string">&quot;200&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">constructor</span>(value: <span class="built_in">Int</span>): <span class="keyword">super</span>(value, <span class="string">&quot;error&quot;</span>) &#123;</span><br><span class="line">   println(value)</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">constructor</span>(value: <span class="built_in">Int</span>, msg: String): <span class="keyword">super</span>(value, msg) &#123;</span><br><span class="line">println(<span class="string">&quot;<span class="variable">$value</span> <span class="variable">$msg</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">constructor</span>(value: <span class="built_in">Int</span>, errorCode: <span class="built_in">Int</span>, msg: String): <span class="keyword">super</span>(value,msg) &#123;</span><br><span class="line">println(<span class="string">&quot;<span class="variable">$value</span> <span class="variable">$errorCode</span> <span class="variable">$msg</span>&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重写-override"><a href="#重写-override" class="headerlink" title="重写 override"></a>重写 override</h3><p>open class 函数默认 final 修饰，如果提供重写能力需添加 <code>open</code> 修饰</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">Response</span> &#123;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getErrCode</span><span class="params">()</span></span> &#123;&#125; <span class="comment">// final can not be overrided</span></span><br><span class="line"><span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">redirect</span><span class="params">()</span></span> &#123;&#125; <span class="comment">// can be overrided</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果有多个相同方法，则必须重写，可使用 <code>super&lt;Type&gt;</code> 选择性调用</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">Response</span> &#123;</span><br><span class="line"><span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">getCode</span><span class="params">()</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">println(<span class="string">&quot;response code = 200&quot;</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="number">200</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IRes</span> &#123;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getCode</span><span class="params">()</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">500</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HomeRes</span>: <span class="type">Response</span>(), IRes &#123;</span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getCode</span><span class="params">()</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">  <span class="keyword">super</span>&lt;Response&gt;.getCode()</span><br><span class="line"><span class="keyword">super</span>&lt;IRes&gt;.getCode()</span><br><span class="line"><span class="keyword">return</span> <span class="number">302</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">HomeRes().getCode() <span class="comment">// 302</span></span><br></pre></td></tr></table></figure><h3 id="属性重写-property-override"><a href="#属性重写-property-override" class="headerlink" title="属性重写 property override"></a>属性重写 property override</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Badge</span> &#123;</span><br><span class="line"><span class="keyword">val</span> count: <span class="built_in">Int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Game</span>(<span class="keyword">override</span> <span class="keyword">val</span> count: <span class="built_in">Int</span>): Badge</span><br><span class="line">Game(count = <span class="number">1</span>).count <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以使用 var 重写 val property; 反之不行</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Game</span>: <span class="type">Badge</span> &#123;</span><br><span class="line"><span class="keyword">override</span> <span class="keyword">var</span> count: <span class="built_in">Int</span> = <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><ul><li>Kotlin 接口和 Java 的接口类似</li><li>使用 <code>interface</code> 关键字定义</li><li>允许有默认实现</li></ul><h3 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a>实现接口</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">MyInterface</span> &#123;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">boo</span><span class="params">()</span></span> <span class="comment">// 未实现，抽象方法</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span>: String &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;interface foo&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>: <span class="type">MyInterface</span> &#123;</span><br><span class="line"><span class="comment">// 未实现的接口函数，必须实现</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">boo</span><span class="params">()</span></span> = println(<span class="string">&quot;class boo&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass1</span>: <span class="type">MyInterface</span> &#123;</span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">boo</span><span class="params">()</span></span> = println(<span class="string">&quot;class1 boo&quot;</span>)</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> = <span class="string">&quot;class1 foo&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口中的属性"><a href="#接口中的属性" class="headerlink" title="接口中的属性"></a>接口中的属性</h3><p>接口的属性只能是抽象的，不允许初始化值；实现接口必须重写属性</p><h3 id="函数重写"><a href="#函数重写" class="headerlink" title="函数重写"></a>函数重写</h3><p>继承多个接口时， 实现类可以通过 <code>super&lt;Interface&gt;</code> 来选择性调用接口函数（未实现的抽象方法可以忽略）</p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><ul><li>Kotlin 可以对一个类（属性、方法）进行扩展且不需要继承或者装饰器模式（Decorator）</li><li>扩展是一种静态行为</li><li>对被扩展的类代码本身不会造成任何影响（有点类似 JS 的 Reflect）</li></ul><h3 id="扩展函数"><a href="#扩展函数" class="headerlink" title="扩展函数"></a>扩展函数</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// receiverType 函数的扩展对象</span></span><br><span class="line"><span class="comment">// functionName 扩展函数名</span></span><br><span class="line"><span class="comment">// params 参数 or NULL</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> receiverType.<span class="title">functionName</span><span class="params">(params)</span></span> &#123;</span><br><span class="line"><span class="comment">/* body */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Kotlin 内置对象</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> String.<span class="title">trimLength</span><span class="params">()</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.trim().length</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">&quot;   ccc&quot;</span>.trimLength() <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// custom class</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(<span class="keyword">var</span> name: String)</span><br><span class="line"><span class="function"><span class="keyword">fun</span> User.<span class="title">nickName</span><span class="params">()</span></span> = <span class="string">&quot;taylor <span class="subst">$&#123;this.name&#125;</span>&quot;</span></span><br><span class="line">User(name = <span class="string">&quot;swift&quot;</span>).nickName() <span class="comment">// taylor swift</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Kotlin 集合对象</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> MutableList<span class="type">&lt;Int&gt;</span>.<span class="title">replaceItem</span><span class="params">(pre: <span class="type">Int</span>, post: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> tmp = <span class="keyword">this</span>[pre]</span><br><span class="line">    <span class="keyword">this</span>[pre] = <span class="keyword">this</span>[post]</span><br><span class="line">    <span class="keyword">this</span>[post] = tmp</span><br><span class="line">&#125;</span><br><span class="line">mutableListOf(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>).replaceItem(<span class="number">0</span>, <span class="number">2</span>) <span class="comment">// [3,2,1]</span></span><br></pre></td></tr></table></figure><h3 id="扩展函数-扩展属性"><a href="#扩展函数-扩展属性" class="headerlink" title="扩展函数 &amp; 扩展属性"></a>扩展函数 &amp; 扩展属性</h3><ul><li><strong>扩展函数是静态解析，不是接收者类型的虚拟成员</strong></li><li>扩展函数和成员函数一致时，优先使用成员函数</li><li>扩展属性允许定义在类和 Kotlin 文件中，但是不允许在函数中定义</li><li>只能显示定义 getter &#x2F; setter，所以不允许被初始化</li><li>扩展属性只能被声明为 <code>val</code></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 扩展空对象</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> Any?.<span class="title">toString</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span> == <span class="literal">null</span>) <span class="keyword">return</span> <span class="string">&quot;nil&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&gt;&gt; <span class="subst">$&#123;this.toString()&#125;</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>?.toString() <span class="comment">// 1 优先使用成员函数</span></span><br><span class="line"><span class="literal">null</span>.toString() <span class="comment">// null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩展属性</span></span><br><span class="line"><span class="keyword">val</span> &lt;T&gt; List&lt;T&gt;.lastIndex: <span class="built_in">Int</span></span><br><span class="line"><span class="keyword">get</span>() = site - <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="keyword">val</span> Foo.<span class="keyword">var</span> = <span class="number">1</span> <span class="comment">// Error 初始化属性没有后端字段（backing field）</span></span><br></pre></td></tr></table></figure><h3 id="伴生对象的扩展"><a href="#伴生对象的扩展" class="headerlink" title="伴生对象的扩展"></a>伴生对象的扩展</h3><ul><li>伴生对象内的成员相当于 Java 中的静态成员，其生命周期伴随类始终</li><li>伴生对象内的成员和函数可以直接用类名引用</li><li>伴生对象扩展分为：类内扩展 和 类外扩展<ul><li>两者（可以同名）互不影响</li><li>类外扩展的伴生对象函数可以被伴生对象内的函数引用</li></ul></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">companion</span> <span class="keyword">object</span> &#123; <span class="comment">// MyClass 伴生对象</span></span><br><span class="line"><span class="keyword">val</span> field1 = <span class="number">1</span> <span class="comment">// 类内伴生对象类成员</span></span><br><span class="line"><span class="keyword">val</span> field2 = <span class="string">&quot;field2&quot;</span> <span class="comment">// 类内伴生对象类成员</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类内伴生对象函数 cFun</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">cFun</span><span class="params">()</span></span> &#123;</span><br><span class="line">println(<span class="string">&quot;companion cfun&quot;</span>)</span><br><span class="line">foo() <span class="comment">// 伴生对象可以引用，类外扩展的伴生对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">cFun2</span><span class="params">()</span></span> &#123;</span><br><span class="line">println(<span class="string">&quot;companion cfun2&quot;</span>)</span><br><span class="line">cFun() <span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类内扩展</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> MyClass.Companion.<span class="title">foo</span><span class="params">()</span></span> = println(<span class="string">&quot;伴生对象类内扩展函数&quot;</span>)</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line">MyClass.foo()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">init</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="扩展的作用域"><a href="#扩展的作用域" class="headerlink" title="扩展的作用域"></a>扩展的作用域</h3><ul><li>函数扩展和属性定义在顶级包下 <code>package cn.yalda</code></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cn/yalda/main.kt</span></span><br><span class="line"><span class="keyword">package</span> cn.yalda</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> Yalda.<span class="title">foo</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// cn/yalda/models/home</span></span><br><span class="line"><span class="keyword">package</span> cn.yalda.models.home</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.yalda.foo <span class="comment">// or import cn.yalda.*</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> y: Yalda = Yalda()</span><br><span class="line">y.foo() <span class="comment">// ...</span></span><br></pre></td></tr></table></figure><h3 id="扩展声明为成员"><a href="#扩展声明为成员" class="headerlink" title="扩展声明为成员"></a>扩展声明为成员</h3><ul><li>在一个类（分发接受者）内部可以为另一个类（扩展接受者）声明扩展</li><li>假如某个函数，分发接收者和扩展接收者均存在，扩展接收者优先；</li><li>可以使用 <code>this</code> 关键字类使用分发接受者函数</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">study</span><span class="params">()</span></span> = println(<span class="string">&quot;day day up&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Classmeta</span> &#123;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">study</span><span class="params">()</span></span> = println(<span class="string">&quot;meta study&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> Student.<span class="title">learn</span><span class="params">()</span></span> &#123;</span><br><span class="line">study() <span class="comment">// class Student(扩展接受者优先)</span></span><br><span class="line"><span class="keyword">this</span><span class="symbol">@Classmeta</span>.study() <span class="comment">// Classmeta.study</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">caller</span><span class="params">(s: <span class="type">Student</span>)</span></span> = s.learn()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">val</span> s = Student()</span><br><span class="line"><span class="keyword">val</span> m = Classmeta()</span><br><span class="line">m.caller(s) <span class="comment">// day day up \n meta study</span></span><br></pre></td></tr></table></figure><h2 id="数据类-密封类-枚举类"><a href="#数据类-密封类-枚举类" class="headerlink" title="数据类 &amp; 密封类 &amp; 枚举类"></a>数据类 &amp; 密封类 &amp; 枚举类</h2><h3 id="数据类定义-复制-实例化"><a href="#数据类定义-复制-实例化" class="headerlink" title="数据类定义 &amp; 复制 &amp; 实例化"></a>数据类定义 &amp; 复制 &amp; 实例化</h3><ul><li>数据类创建一个只包含数据的类，<code>data</code> 关键字来修饰 class</li><li>编译器从主构造器中所声明的提取（?定义）了 <code>equals()/hashCode()</code>、<code>toString()</code>、<code>componentN()</code>、<code>copy()</code> 等函数；已经明确定义，不会再生成</li><li>条件<ul><li>主构造器至少包含一个参数</li><li>主构造器参数必须标识 <code>val</code> or <code>var</code></li><li>类不可声明 <code>abstract</code> <code>open</code> <code>sealed</code> <code>inner</code></li><li>不能继承其他类（但可以实现接口）</li></ul></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">User</span>(<span class="keyword">val</span> name: String, <span class="keyword">var</span> price: <span class="built_in">Int</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复制使用 copy 函数，可以复制对象且修改部分属性</span></span><br><span class="line"><span class="keyword">val</span> nike = User(name = <span class="string">&quot;nick&quot;</span>, price = <span class="number">899</span>)</span><br><span class="line"><span class="keyword">val</span> ig = nike.copy(name = <span class="string">&quot;ig&quot;</span>) <span class="comment">// User(name=ig, price=899)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// destruct 类结构</span></span><br><span class="line"><span class="keyword">val</span> (name, price) = ig</span><br><span class="line">println(<span class="string">&quot;<span class="variable">$name</span> is ￥<span class="variable">$price</span>&quot;</span>) <span class="comment">// ig is ￥899</span></span><br></pre></td></tr></table></figure><h3 id="标准数据类"><a href="#标准数据类" class="headerlink" title="标准数据类"></a>标准数据类</h3><ul><li>Kotlin 内置 了 <code>Pair</code> 以及 <code>Triple</code> 数据类</li><li>命名数据类是更好的设计选择</li><li>代码可读性更强而且提供了有意义的名字和属性</li></ul><h3 id="密封类"><a href="#密封类" class="headerlink" title="密封类"></a>密封类</h3><ul><li>表示受限的类结构</li><li>等同于枚举类的拓展（一个值为有限的几种类型，而不能有其他类型）</li><li>使用 <code>sealed</code> 来修饰类</li><li>密封类可以有子类，但是所有子类均内嵌在密封类的文件中</li><li>sealed 不能修饰 <code>interface</code> <code>abstract class</code></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title class_">Expr</span></span><br><span class="line"><span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">Const</span>(<span class="keyword">val</span> number: <span class="built_in">Double</span>) : Expr()</span><br><span class="line"><span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">Sum</span>(<span class="keyword">val</span> e1: Expr, <span class="keyword">val</span> e2: Expr) : Expr()</span><br><span class="line"><span class="keyword">object</span> NotANumber : Expr()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">eval</span><span class="params">(expr: <span class="type">Expr</span>)</span></span>: <span class="built_in">Double</span> = <span class="keyword">when</span> (expr) &#123;</span><br><span class="line">    <span class="keyword">is</span> Const -&gt; expr.number</span><br><span class="line">    <span class="keyword">is</span> Sum -&gt; eval(expr.e1) + eval(expr.e2)</span><br><span class="line">    NotANumber -&gt; <span class="built_in">Double</span>.NaN</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">eval</span><span class="params">(expr: <span class="type">Expr</span>)</span></span>: <span class="built_in">Double</span> = <span class="keyword">when</span>(expr) &#123;</span><br><span class="line">    <span class="keyword">is</span> Expr.Const -&gt; expr.number</span><br><span class="line">    <span class="keyword">is</span> Expr.Sum -&gt; eval(expr.e1) + eval(expr.e2)</span><br><span class="line">    Expr.NotANumber -&gt; <span class="built_in">Double</span>.NaN</span><br><span class="line">    <span class="comment">// 不再需要 `else` 子句，因为已经覆盖了所有的情况</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h3><ul><li>基本用法是实现一个类型安全的枚举</li><li>都好分隔，每个枚举常量都是一个对象</li><li>每个枚举都是枚举类的实例（可以被初始化）</li></ul><h3 id="枚举初始化"><a href="#枚举初始化" class="headerlink" title="枚举初始化"></a>枚举初始化</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// defined</span></span><br><span class="line"><span class="keyword">enum</span> <span class="keyword">class</span> <span class="title class_">Color</span> &#123; BLACK, RED, BLUE &#125;</span><br><span class="line"><span class="comment">// Color.BLACK 0 ；默认从 0 开始</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// initiailized</span></span><br><span class="line"><span class="keyword">enum</span> <span class="keyword">class</span> <span class="title class_">Color</span>(<span class="keyword">val</span> hex: <span class="built_in">Int</span>) &#123;</span><br><span class="line">BLACK(<span class="number">0x000000</span>),</span><br><span class="line">GREY(<span class="number">0xCCCCCC</span>),</span><br><span class="line">BLUE(<span class="number">0x232323</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明自己的匿名类和方法、以及覆盖基类的方法</span></span><br><span class="line"><span class="keyword">enum</span> <span class="keyword">class</span> <span class="title class_">ProtocolState</span> &#123;</span><br><span class="line">PADDING &#123;</span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">state</span><span class="params">()</span></span> = OK</span><br><span class="line">&#125;,</span><br><span class="line">OK &#123;</span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">state</span><span class="params">()</span></span> = PADDING</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 枚举累定义成员，需要用 ; 将成员定义中枚举常量分隔开来</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">state</span><span class="params">()</span></span>: ProtocolState</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="枚举类的使用"><a href="#枚举类的使用" class="headerlink" title="枚举类的使用"></a>枚举类的使用</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// values() -&gt; Arrau&lt;EnumClass&gt;</span></span><br><span class="line"><span class="keyword">for</span>(en <span class="keyword">in</span> Color.values()) println(en)</span><br><span class="line"><span class="comment">// valueOf(value: String) -&gt; EnumClass</span></span><br><span class="line">Color.valueOf(<span class="string">&quot;BLACK&quot;</span>) <span class="comment">// BLACK</span></span><br><span class="line"></span><br><span class="line">Color.valueOf(<span class="string">&quot;BLACK&quot;</span>).name <span class="comment">// BLACK</span></span><br><span class="line">Color.valueOf(<span class="string">&quot;BLACK&quot;</span>).ordinal <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// kotlin@1.1 support enumValues&lt;T&gt;() &amp; enumValueOf&lt;T&gt;()</span></span><br><span class="line">enumValues&lt;Color&gt;().joinToString &#123; it.name &#125;</span><br><span class="line"><span class="keyword">for</span>(v <span class="keyword">in</span> enumValues&lt;Color&gt;()) println(<span class="string">&quot;<span class="subst">$&#123;v.name&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><ul><li>泛型即『参数化类型』，类型参数化作用于接口、类、方法</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 泛型类的声明</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&lt;<span class="type">T</span>&gt;(<span class="keyword">var</span> value: T)</span><br><span class="line"><span class="keyword">val</span> box: Box&lt;<span class="built_in">Double</span>&gt; = Box&lt;<span class="built_in">Double</span>&gt;(<span class="number">1.0</span>)</span><br><span class="line"><span class="keyword">val</span> triple = Box&lt;<span class="built_in">Int</span>&gt;(value = <span class="number">199</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 泛型函数的声明</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span><span class="type">&lt;T&gt;</span> <span class="title">boxOf</span><span class="params">(value: <span class="type">T</span>)</span></span> = Box(value)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以完整写出类型，也可以省略有编译器推断</span></span><br><span class="line">boxOf&lt;<span class="built_in">Double</span>&gt;(<span class="number">1.00</span>).value <span class="comment">// 1.0</span></span><br><span class="line">boxOf(<span class="number">1</span>).value <span class="comment">// 编译器类型推断</span></span><br></pre></td></tr></table></figure><h3 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h3><p>使用泛型约束来设定一个给定参数允许的类型</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Comoparable 的子类型可以替代 T</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T : Comparable&lt;T&gt;</span>&gt; <span class="title">sort</span><span class="params">(list: <span class="type">List</span>&lt;<span class="type">T</span>&gt;)</span></span> &#123;</span><br><span class="line">&#125;</span><br><span class="line">sort(listOf(<span class="number">1</span>,<span class="number">2</span>)) <span class="comment">// ok</span></span><br><span class="line">sort(listOf(HashMap&lt;<span class="built_in">Int</span>, String&gt;())) <span class="comment">// error</span></span><br><span class="line"><span class="comment">// HashMap&lt;Int, String&gt; 不是 Comparable&lt;HashMap&lt;Int, String&gt;&gt; 的子类型（没搞明白）</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">copyWhenGreater</span><span class="params">(list: <span class="type">List</span>&lt;<span class="type">T</span>&gt;, threshold: <span class="type">T</span>)</span></span>: List&lt;String&gt;</span><br><span class="line">    <span class="keyword">where</span> T : CharSequence,</span><br><span class="line">          T : Comparable&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> list.filter &#123; it &gt; threshold &#125;.map &#123; it.toString() &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="型变"><a href="#型变" class="headerlink" title="型变"></a>型变</h3><ul><li>Kotlin 没有通配符类型</li><li>声明处型变（declaration-site variance） 与 类型投射（type projections）</li><li>声明处型变：注解修饰符 in（消费者）、out（生产者）<ul><li>out 使得参数协变；只能用于输出，可以作为返回值类型，但无法作入参类型</li><li>in 使得参数逆变；只能用于输入，可以作为入参类型，但无法作返回值类型</li></ul></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数协变</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&lt;<span class="type">out U</span>&gt;(<span class="keyword">val</span> klass: U) &#123;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">learn</span><span class="params">()</span></span>: U = klass</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">val</span> stua: Student&lt;<span class="built_in">Int</span>&gt; = Student(<span class="number">22</span>) <span class="comment">// .learn() 22</span></span><br><span class="line"><span class="keyword">val</span> stub: Student&lt;<span class="built_in">Double</span>&gt; = Student(<span class="number">22.99</span>) <span class="comment">// .learn() 22.99</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数逆变</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&lt;<span class="type">in I</span>&gt;(klass: I) &#123;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">learn</span><span class="params">(a: <span class="type">I</span>)</span></span> = println(a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> stua = Student&lt;<span class="built_in">Double</span>&gt;(<span class="string">&quot;xxx&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> stub = Student&lt;<span class="built_in">Double</span>&gt;(<span class="number">22.99</span>)</span><br><span class="line">stua = stub <span class="comment">// Error inferred type is String but Double...</span></span><br></pre></td></tr></table></figure><h3 id="星号投射"><a href="#星号投射" class="headerlink" title="星号投射"></a>星号投射</h3><ul><li>Kotlin 提供语法了 star-projection 来约束泛型类型的所有实体实例都是投射的子类型</li><li><code>*</code> 指代了所有类型，相当于 <code>Any?</code></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Foo&lt;<span class="keyword">out</span> T&gt;; Foo&lt;&gt; 等价于 Foo&lt;<span class="keyword">out</span> TUpper&gt;</span><br><span class="line">Foo&lt;<span class="keyword">in</span> T&gt; T 是反向协变的类型参数; Foo&lt;&gt; 等价于 Foo&lt;<span class="keyword">in</span> <span class="built_in">Nothing</span>&gt;</span><br><span class="line">所以 Foo&lt;*&gt; 对于读取值的场景，等价于 Foo&lt;<span class="keyword">out</span> TUpper&gt;</span><br><span class="line">  对于写入值的场景，等价于 Foo&lt;<span class="keyword">in</span> <span class="built_in">Nothing</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ex.</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Function</span>&lt;<span class="type">in T, out U</span>&gt;</span><br><span class="line"><span class="comment">// 可以出现一下几种星号投射</span></span><br><span class="line">Function&lt;*, String&gt; 等价于 Function&lt;<span class="keyword">in</span> <span class="built_in">Nothing</span>, String&gt;</span><br><span class="line">Function&lt;<span class="built_in">Int</span>, *&gt; 等价于 Function&lt;<span class="built_in">Int</span>, Out Any?&gt;</span><br><span class="line">Function&lt;,&gt; 等价于 Function&lt;<span class="keyword">in</span> <span class="built_in">Nothing</span>, Out Any?&gt;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&lt;<span class="type">T</span>&gt;(<span class="keyword">val</span> name: T, <span class="keyword">val</span> age: T)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> s1: Student&lt;<span class="built_in">Int</span>&gt; = Student(<span class="number">782351</span>, <span class="number">17</span>)</span><br><span class="line"><span class="keyword">val</span> s2: Student&lt;*&gt; = Student(<span class="string">&quot;sily&quot;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="keyword">val</span> s3: Student&lt;Any?&gt; = Student(<span class="string">&quot;sily&quot;</span>, <span class="string">&quot;20&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> l: ArrayList&lt;*&gt; = arrayListOf(s1, s2, s3)</span><br></pre></td></tr></table></figure><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="对象表达式"><a href="#对象表达式" class="headerlink" title="对象表达式"></a>对象表达式</h3><ul><li>实现一个匿名内部类的对象用于方法的参数</li><li>通过对象表达式可以直接得到一个对象</li><li>在对象表达式中可以方便的访问的作用域中的其他变量</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> site = <span class="keyword">object</span> &#123;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;yalda&quot;</span></span><br><span class="line"><span class="keyword">val</span> site = <span class="string">&quot;yalda.cn&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"><span class="keyword">val</span> name = <span class="string">&quot;yalda&quot;</span></span><br><span class="line"><span class="comment">// return 匿名对象类型</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">learn</span><span class="params">()</span></span> = <span class="keyword">object</span> &#123;</span><br><span class="line"><span class="keyword">val</span> course = <span class="string">&quot;<span class="variable">$name</span> 偷偷学 math&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// return Any type</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">study</span><span class="params">()</span></span> = <span class="keyword">object</span> &#123;</span><br><span class="line"><span class="keyword">val</span> course = <span class="string">&quot;<span class="variable">$name</span> english&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">find</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">study().course <span class="comment">// Unresolved reference: course</span></span><br><span class="line"><span class="keyword">return</span> learn().course <span class="comment">// math</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为 object 表达式声明类型</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Factory</span> &#123;</span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">val</span> course: String</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">study</span><span class="params">()</span></span> = <span class="keyword">object</span>: Factory &#123;</span><br><span class="line"><span class="keyword">override</span> <span class="keyword">val</span> course = <span class="string">&quot;<span class="variable">$name</span> english&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对象声明"><a href="#对象声明" class="headerlink" title="对象声明"></a>对象声明</h3><ul><li>使用 <code>object</code> 关键字声明一个对象</li><li>对象可以简化一个单例的声明</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// single instance</span></span><br><span class="line"><span class="keyword">object</span> Student &#123;</span><br><span class="line">    <span class="keyword">val</span> name: String = <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">val</span> s = Student</span><br><span class="line"><span class="keyword">val</span> s1 = Student</span><br><span class="line">s === s1 <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象可以有超类型</span></span><br><span class="line"><span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">work</span><span class="params">()</span></span> = println(<span class="string">&quot;job&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">object</span> Student: Person() &#123; <span class="comment">// 必须对 Class 进行初始化</span></span><br><span class="line">    <span class="keyword">val</span> name: String = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">work</span><span class="params">()</span></span> = println(<span class="string">&quot;study&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">object</span> Student &#123;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;yalda&quot;</span></span><br><span class="line"><span class="keyword">object</span> ClassRoom &#123;</span><br><span class="line"><span class="keyword">val</span> position = <span class="string">&quot;L4&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">showName</span><span class="params">()</span></span> = println(<span class="string">&quot;<span class="variable">$name</span>@N24432&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">val</span> s = Student</span><br><span class="line">s.ClassRooo.position <span class="comment">//&#x27;ClassRoom&#x27; accessed via instance refer</span></span><br><span class="line">Student.ClassRoom.showName() <span class="comment">// yalda@N24432</span></span><br></pre></td></tr></table></figure><h3 id="伴生对象"><a href="#伴生对象" class="headerlink" title="伴生对象"></a>伴生对象</h3><ul><li>一个类里面只能声明一个内部关联对象</li><li>伴生对象的成员类似其他语言的静态成员，但是在运行时仍然是真实对象的实例成员</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"><span class="keyword">companion</span> <span class="keyword">object</span> ClassRoom &#123;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">stds</span><span class="params">()</span></span>: List&lt;Student&gt; = listOf&lt;Student&gt;(Student())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">val</span> intance = Student.stds() <span class="comment">// [Student@23421c3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果伴生对象未命名，则通过 &lt;class&gt;.Companion 访问</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"><span class="keyword">companion</span> <span class="keyword">object</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">Student.Companion</span><br><span class="line"></span><br><span class="line"><span class="comment">// 伴生对象还可以实现接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Talent</span>&lt;<span class="type">out T</span>&gt; &#123;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">create</span><span class="params">()</span></span>: T</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"><span class="keyword">companion</span> <span class="keyword">object</span>: Talent&lt;Student&gt; &#123;</span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">create</span><span class="params">()</span></span>: Student = Student()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Student.Companion.create() <span class="comment">// Student@20ad9418</span></span><br></pre></td></tr></table></figure><h3 id="对象表达式和伴生对象的语义差异"><a href="#对象表达式和伴生对象的语义差异" class="headerlink" title="对象表达式和伴生对象的语义差异"></a>对象表达式和伴生对象的语义差异</h3><ul><li>对象表达式在使用他们的地方立即执行</li><li>对象声明在第一次被访问时延迟初始化（懒人单例模式）</li><li>伴生对象的初始化在相应的类被加载（解析）时；与 Java 的静态初始化器语义相匹配</li></ul><h2 id="委托"><a href="#委托" class="headerlink" title="委托"></a>委托</h2><h3 id="类委托"><a href="#类委托" class="headerlink" title="类委托"></a>类委托</h3><ul><li>Kotlin 直接支持委托模式。优雅、简介；通过关键字 <code>by</code> 实现委托</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IPrint</span> &#123;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">print</span><span class="params">()</span></span>: <span class="built_in">Unit</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">connect</span><span class="params">()</span></span> = println(<span class="string">&quot;connect...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GPrint</span>(<span class="keyword">val</span> ip: String): IPrint &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">print</span><span class="params">()</span></span> = print(<span class="string">&quot;gprint run...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JiaBooPrint</span>(<span class="keyword">val</span> ip: String): IPrint &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">print</span><span class="params">()</span></span> = print(<span class="string">&quot;jiaboo run...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// by 子句表示，将 p 保存在 Device 的对象实例内部，编译器将会生产继承自 IPrint 接口的所有，并将调用转发给 p</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Device</span>(p: IPrint): IPrint <span class="keyword">by</span> p <span class="comment">// by 建立委托</span></span><br><span class="line"></span><br><span class="line">Device(GPrint(<span class="string">&quot;127.0.0.10&quot;</span>)).print() <span class="comment">// gprint run...</span></span><br><span class="line">Device(JiaBooPrint(<span class="string">&quot;127.0.0.1&quot;</span>)).print() <span class="comment">// jiaboo run...</span></span><br></pre></td></tr></table></figure><h3 id="属性委托"><a href="#属性委托" class="headerlink" title="属性委托"></a>属性委托</h3><ul><li>将一个类的某个属性委托给一个代理类，实现对该类属性的统一管理</li><li>该属性的 get &#x2F; set 将被委托给代理类的 getValue() &#x2F; setValue()</li></ul><p><code>val/var &lt;属性名&gt;: &lt;类型&gt; by &lt;表达式&gt;</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> kotlin.reflect.KProperty</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"><span class="keyword">var</span> credit: <span class="built_in">Double</span> <span class="keyword">by</span> Query()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 委托的类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Query</span> &#123;</span><br><span class="line"><span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">getValue</span><span class="params">(thisRef: <span class="type">Any</span>?, property: <span class="type">KProperty</span>&lt;*&gt;)</span></span>: <span class="built_in">Double</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">99.91</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果是 val 声明则不需要提供 setValue 函数</span></span><br><span class="line"><span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">setValue</span><span class="params">(thisRef: <span class="type">Any</span>?, property: <span class="type">KProperty</span>&lt;*&gt;, value: <span class="type">Double</span>)</span></span>: <span class="built_in">Double</span> &#123;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Student().credit <span class="comment">// 99.91</span></span><br></pre></td></tr></table></figure><h3 id="标准委托"><a href="#标准委托" class="headerlink" title="标准委托"></a>标准委托</h3><p>Kotlin 内置很多工厂方法来实现属性的委托</p><ul><li>延迟属性 Lazy<ul><li><code>Lazy&lt;T&gt;: by lazy</code></li></ul></li><li>可观察属性 Observable<ul><li><code>by Delegates.observable()</code></li></ul></li><li>属性存储在映射中<ul><li><code>by map</code></li><li>常用于 JSON 解析，或者其他动态事情</li></ul></li><li>Not Null<ul><li><code>by Delegates.notNull&lt;String&gt;()</code></li><li>常用于初始化时无法确定属性值的场景</li></ul></li><li>局部委托属性<ul><li><code>val memorizedFoo by lazy(computeFoo)</code></li></ul></li></ul><h3 id="委托的翻译规则"><a href="#委托的翻译规则" class="headerlink" title="委托的翻译规则"></a>委托的翻译规则</h3><ul><li>thisRef 必须于属性所有者类型相同或其超类型</li><li>property 必须是类型 <code>KProperty&lt;*&gt;</code> 或其超类型</li><li>对于 mutable 属性，除 getValue() 函数还必须提供 setValue()<ul><li>property 必须是类型 <code>KProperty&lt;*&gt;</code> 或其超类型</li><li>new value 必须和属性类型相同或其超类型</li></ul></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"><span class="keyword">var</span> prop: Type <span class="keyword">by</span> MyDelegate()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// java</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"><span class="keyword">val</span> prop$delegate = MyDelegate()</span><br><span class="line"><span class="keyword">var</span> prop: Type</span><br><span class="line"><span class="keyword">get</span>() = prop$delegate.getValue(<span class="keyword">this</span>,  <span class="keyword">this</span>::prop)</span><br><span class="line"><span class="keyword">set</span>(value: Type) = prop$delegate.setValue(<span class="keyword">this</span>, <span class="keyword">this</span>::prop, value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="提供委托"><a href="#提供委托" class="headerlink" title="提供委托"></a>提供委托</h3><p>通过定义 <code>provideDelegate</code> 操作符</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ResourceLoader</span>&lt;<span class="type">T</span>&gt;(id: ResourceID&lt;T&gt;) &#123;</span><br><span class="line">    <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">provideDelegate</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            thisRef: <span class="type">MyUI</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">            prop: <span class="type">KProperty</span>&lt;*&gt;</span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>: ReadOnlyProperty&lt;MyUI, T&gt; &#123;</span><br><span class="line">        checkProperty(thisRef, prop.name)</span><br><span class="line">        <span class="comment">// 创建委托</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">checkProperty</span><span class="params">(thisRef: <span class="type">MyUI</span>, name: <span class="type">String</span>)</span></span> &#123; …… &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">bindResource</span><span class="params">(id: <span class="type">ResourceID</span>&lt;<span class="type">T</span>&gt;)</span></span>: ResourceLoader&lt;T&gt; &#123; …… &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyUI</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> image <span class="keyword">by</span> bindResource(ResourceID.image_id)</span><br><span class="line">    <span class="keyword">val</span> text <span class="keyword">by</span> bindResource(ResourceID.text_id)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> lang/kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swift 常见语法错误</title>
      <link href="/2022/swift-exp-collect/"/>
      <url>/2022/swift-exp-collect/</url>
      
        <content type="html"><![CDATA[<h1 id="Swift-常见语法错误"><a href="#Swift-常见语法错误" class="headerlink" title="Swift 常见语法错误"></a>Swift 常见语法错误</h1><ul><li>无效的重复声明</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> (<span class="keyword">_</span>, errMsg) <span class="operator">=</span> httpError</span><br><span class="line"><span class="operator">...</span></span><br><span class="line"><span class="keyword">let</span> (<span class="keyword">_</span>, errMsg) <span class="operator">=</span> httpError</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">Error:</span></span><br><span class="line"><span class="comment">Invalid redeclaration of ‘errMsg‘</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li>强制类型</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> notFountError <span class="operator">=</span> (<span class="number">404</span>, <span class="string">&quot;Not Found Error&quot;</span>)</span><br><span class="line">notFountError <span class="operator">=</span> (<span class="number">404</span>, <span class="string">&quot;Server Side&quot;</span>, <span class="string">&quot;Not Fount Error&quot;</span>, <span class="string">&quot;Http Error&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">Error:</span></span><br><span class="line"><span class="comment">Cannot assign value of type ‘(Int, String, String, String)’ to type</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li>类型推导 &amp; 可选类型</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> catchphrase: <span class="type">String</span>?</span><br><span class="line">catchphrase <span class="operator">=</span> <span class="string">&quot;Hey guys, what&#x27;s up&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> count1: <span class="type">Int</span> <span class="operator">=</span> catchphrase.count</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">Error:</span></span><br><span class="line"><span class="comment">Value of optional type &#x27;String?&#x27; must be unwrapped to refer to member &#x27;count&#x27; of wrapped base type &#x27;String&#x27;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Fixed:</span></span><br><span class="line"><span class="keyword">let</span> count1: <span class="type">Int</span>? <span class="operator">=</span> catchphrase<span class="operator">?</span>.count</span><br><span class="line">or</span><br><span class="line"><span class="keyword">var</span> count1 <span class="operator">=</span>. catchphrase<span class="operator">?</span>.count</span><br></pre></td></tr></table></figure><ul><li>语法错误，for-in 语句</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> index <span class="number">1</span><span class="operator">...</span><span class="number">5</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">Error:</span></span><br><span class="line"><span class="comment">Expected &#x27;in&#x27; after for-each pattern</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Fixed:</span></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> <span class="number">1</span><span class="operator">...</span><span class="number">5</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>immutable collection 不可变</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> immutableArray: [<span class="type">String</span>] <span class="operator">=</span> [<span class="string">&quot;a1&quot;</span>, <span class="string">&quot;a2&quot;</span>]</span><br><span class="line">immutableArray.insert(<span class="string">&quot;bb&quot;</span>, at: <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">Error:</span></span><br><span class="line"><span class="comment">Cannot use mutating member on immutable value: &#x27;immutableArray&#x27; is a &#x27;let&#x27; constant</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li>类型推导 &amp; 可选类型</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mutatingDic <span class="operator">=</span> [<span class="string">&quot;name&quot;</span>: <span class="string">&quot;yuntianming&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="string">&quot;29&quot;</span>]</span><br><span class="line"><span class="keyword">var</span> yAge: <span class="type">String</span> <span class="operator">=</span> mutatingDic[<span class="string">&quot;age&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">Error:</span></span><br><span class="line"><span class="comment">Value of optional type &#x27;String?&#x27; must be unwrapped to a value of type &#x27;String&#x27;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li>方法只有在单执行语句时，才不需要 <code>return</code> 关键字</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">multipyExp</span>(<span class="params">x</span>: <span class="type">Int</span>,<span class="params">y</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;x <span class="subst">\(x)</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;y <span class="subst">\(y)</span>&quot;</span>)</span><br><span class="line">    x <span class="operator">+</span> y</span><br><span class="line">&#125;</span><br><span class="line">multipyExp(x: <span class="number">11</span>, y: <span class="number">99</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">Error:</span></span><br><span class="line"><span class="comment">Missing return in a function expected to return &#x27;Int&#x27;; did you mean to return the last expression?</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li>函数参数位置问题</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">addx1</span>(<span class="params">x</span> :<span class="type">Int</span>,<span class="params">y</span> :<span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    x<span class="operator">*</span><span class="number">10</span> <span class="operator">+</span> y</span><br><span class="line">&#125;</span><br><span class="line">addx(y: <span class="number">1</span>, x: <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">Error:</span></span><br><span class="line"><span class="comment">Argument &#x27;x&#x27; must precede argument &#x27;y&#x27;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li>Final Class 不可被继承</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">final class Child: Person &#123;&#125;</span><br><span class="line"></span><br><span class="line">class Children: Child&#123;</span><br><span class="line">    override var isHappy: Bool&#123;</span><br><span class="line">        return false</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">Error:</span><br><span class="line">Inheritance from a final class &#x27;Child&#x27;</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><ul><li>构造器参数标注丢失</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ios</span>: <span class="title class_">ModeOfTransportation</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> wheels: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">init</span>(<span class="params">name</span>: <span class="type">String</span>, <span class="params">wheels</span>: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.wheels <span class="operator">=</span> wheels</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(name: name)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">convenience</span> <span class="keyword">init</span>(<span class="params">name</span>: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(name: name, wheels: <span class="number">4</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> lang <span class="operator">=</span> <span class="type">ModeOfTransportation</span>(<span class="string">&quot;python&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(lang.name)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">Error:</span></span><br><span class="line"><span class="comment">Missing argument label &#x27;name:&#x27; in call</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li>空集合字面量生成时，明确类型</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array <span class="operator">=</span> []</span><br><span class="line"></span><br><span class="line"><span class="type">Error</span>:</span><br><span class="line">empty collection literal requires an explicit type</span><br><span class="line"></span><br><span class="line"><span class="type">Fixed</span>:</span><br><span class="line"><span class="keyword">let</span> array: [<span class="type">Int</span>] <span class="operator">=</span> []</span><br><span class="line"><span class="keyword">var</span> arrayStr: [<span class="type">String</span>] <span class="operator">=</span> []</span><br></pre></td></tr></table></figure><ul><li>Let 定义常量不可变</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age <span class="operator">=</span> <span class="number">10</span></span><br><span class="line">age <span class="operator">=</span> <span class="number">9</span></span><br><span class="line"></span><br><span class="line"><span class="type">Error</span>:</span><br><span class="line">cannot assign to value: &#x27;age&#x27; <span class="keyword">is</span> a &#x27;<span class="keyword">let</span>&#x27; constant</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> lang/swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Swift 核心技术与实现》— 01.语言基础</title>
      <link href="/2022/swift-syntax/"/>
      <url>/2022/swift-syntax/</url>
      
        <content type="html"><![CDATA[<h1 id="《Swift-核心技术与实现》—-01-语言基础"><a href="#《Swift-核心技术与实现》—-01-语言基础" class="headerlink" title="《Swift 核心技术与实现》— 01.语言基础"></a>《Swift 核心技术与实现》— 01.语言基础</h1><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li>第一章：Swift简介</li><li>第二章：基本数据类型</li><li>第三章：运算符</li><li>第四章：流程控制</li></ul><h2 id="第一章：Swift简介"><a href="#第一章：Swift简介" class="headerlink" title="第一章：Swift简介"></a>第一章：Swift简介</h2><h3 id="历史版本-新增特性"><a href="#历史版本-新增特性" class="headerlink" title="历史版本 &amp; 新增特性"></a>历史版本 &amp; 新增特性</h3><p>Swift2</p><ul><li>Error handing \ guard 语法 \ 协议支持扩展</li></ul><p>Swift3</p><ul><li>新的 GCD 、 Core Graphics</li><li>NS 从老的 Foundation 类型去除</li><li>sequence</li><li>权限控制 fileprivate \ open （open &gt; public &gt; fileprivate &gt; private）</li><li>废弃（++ 、- -）</li></ul><p>Swift4</p><ul><li>extension 访问 private</li><li>类型和协议组合类型（and 运算符）</li><li>Associated Type 可以追加 Where 约束语句</li><li>Key Paths</li><li>下标支持泛型</li><li>字符串增强</li></ul><p>Swift5</p><ul><li>新增关键字 some</li><li>ABI 稳定</li><li>Raw strings</li><li>Result</li><li>定义 Python 或 Ruby 等脚本语言互操作</li></ul><h3 id="Swift-vs-Objective-C"><a href="#Swift-vs-Objective-C" class="headerlink" title="Swift vs Objective-C"></a>Swift vs Objective-C</h3><ol><li>编程范式<ol><li>Swift 可以面向协议、面向对象、函数式编程</li><li>Objective-C 面向对象为主；</li></ol></li><li>类型安全<ol><li>Swift 类型安全，编译期做检查；OC 则不然</li></ol></li><li>值的类型增强<ol><li>Swift struct ( Int\Double\Float\String\Array\Dictionary\Set) \ enum \ tuple 都是值类型</li><li>NSString\NSNumber 指针类型（引用类型）</li></ol></li><li>枚举增强<ol><li>Swift 枚举支持：整型、浮点、字符串；拥有属性、方法、泛型、扩展</li></ol></li><li>泛型<ol><li>OC 的泛型仅在编译期</li></ol></li><li>协议和扩展</li><li>函数和闭包<ol><li>Swift 一等公民</li><li>OC 下函数次等公民；需要 Selector 封装；或者 block</li></ol></li></ol><h3 id="编译-SwiftC"><a href="#编译-SwiftC" class="headerlink" title="编译 &amp; SwiftC"></a>编译 &amp; SwiftC</h3><p>C -&gt; Clang -&gt; LLVM IP -&gt; LLVM compiler (x86 \ ARM …)<br>Swift -&gt; Parse -&gt; (AST) -&gt; Sema -&gt; SILGen -&gt; (SIL) -&gt; Analysis -&gt; IRGen -&gt; (IR) -&gt; LLVM -&gt; (*.o)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">swiftc -o *.out *.swift <span class="comment"># 可执行文件</span></span><br><span class="line">swiftc *.swift -dump-ast <span class="comment"># 生成 Swift AST</span></span><br><span class="line">swiftc *.swift -emit-sil <span class="comment"># 生成 SIL Swift IL</span></span><br><span class="line">swiftc *.swift -emit-ir <span class="comment"># 生成 LLVM IR 中间语言</span></span><br></pre></td></tr></table></figure><h3 id="REPL-交互式解释器"><a href="#REPL-交互式解释器" class="headerlink" title="REPL 交互式解释器"></a>REPL 交互式解释器</h3><p><code>$R*</code> 是对应行的返回值<br><code>:quit</code> 退出<br><code>:help</code> 帮助</p><h3 id="Playground"><a href="#Playground" class="headerlink" title="Playground"></a>Playground</h3><h2 id="第二章：基本数据类型"><a href="#第二章：基本数据类型" class="headerlink" title="第二章：基本数据类型"></a>第二章：基本数据类型</h2><h3 id="变量和常量的定义"><a href="#变量和常量的定义" class="headerlink" title="变量和常量的定义"></a>变量和常量的定义</h3><p>Syntax</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a <span class="operator">=</span> <span class="number">10</span> <span class="comment">// 常量</span></span><br><span class="line"><span class="keyword">var</span> a <span class="operator">=</span> <span class="number">10</span>, b <span class="operator">=</span> <span class="number">100</span>; <span class="comment">// 变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s:<span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> 契丹 <span class="operator">=</span> <span class="string">&quot;古中国人&quot;</span></span><br><span class="line"><span class="keyword">var</span> 🐱 <span class="operator">=</span> <span class="string">&quot;cat&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;契丹 是<span class="subst">\(契丹)</span>, 不养<span class="subst">\(🐱)</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x <span class="operator">=</span> <span class="number">0.0</span>, y <span class="operator">=</span> <span class="number">0.2</span>, z <span class="operator">=</span> <span class="number">0.1</span></span><br><span class="line"><span class="keyword">let</span> x1 <span class="operator">=</span> <span class="number">0.0</span>, y1 <span class="operator">=</span> <span class="number">0.2</span>, z1 <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h3><ul><li>数字</li></ul><p>Swift 提供 8、16、32、64 有符号（Int32）和无符号（UInt8）类型<br>Int 类型与当前平台原生字相同长度<br>.min &amp; .max 访问最小和最大值</p><ul><li>浮点数</li></ul><p>Double 64位浮点数，15位数字的精度；推荐<br>Float 32位浮点数，6位数字的精度</p><ul><li>Bool</li></ul><p>Swift 类安全机制会阻止用非布尔类型 替换 Bool</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> i &#123; &#125; <span class="comment">// error</span></span><br><span class="line"><span class="keyword">if</span> i <span class="operator">==</span> <span class="number">1</span> &#123; &#125; <span class="comment">// success</span></span><br></pre></td></tr></table></figure><ul><li>类型别名：更具有业务意义</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typealias</span> <span class="type">AudioSample</span> <span class="operator">=</span> <span class="type">UInt8</span></span><br><span class="line"><span class="keyword">let</span> sample: <span class="type">AudioSample</span> <span class="operator">=</span> <span class="number">21</span></span><br></pre></td></tr></table></figure><h3 id="Tuple"><a href="#Tuple" class="headerlink" title="Tuple"></a>Tuple</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> error <span class="operator">=</span> (<span class="number">1</span>, <span class="string">&quot;error msg&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> error:(<span class="type">Int</span>, <span class="type">String</span>) <span class="operator">=</span> (errorCode: <span class="number">1</span>, errorMsg: <span class="string">&quot;error msg&quot;</span>)</span><br><span class="line"><span class="keyword">func</span> <span class="title function_">witeTo</span>(<span class="params">num1</span>: <span class="type">Int</span>) -&gt; (erroCode: <span class="type">Int</span>, errorMsg: <span class="type">String</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (num1, <span class="string">&quot;errrorxxx&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> (<span class="keyword">_</span>, errorMsg) <span class="operator">=</span> witeTo(num1: <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">witeTo</span>(<span class="params">num1</span>: <span class="type">Int</span>) -&gt; (<span class="type">Int</span>, <span class="type">String</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (num1, <span class="string">&quot;errrorxxx&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result <span class="operator">=</span> witeTo(num1: <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(result.<span class="number">1</span>)</span><br><span class="line"><span class="keyword">let</span> (<span class="keyword">_</span>, msg) <span class="operator">=</span> witeTo(num1: <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>简单实用；不必要使用类</p><h3 id="Optional-类型-原理"><a href="#Optional-类型-原理" class="headerlink" title="Optional 类型&amp;原理"></a>Optional 类型&amp;原理</h3><p>ObjC</p><ul><li>ObjC 里的 nil 是无类型的指针，不存在的指针；</li><li>ObjC 里的数组、字典、集合不允许 nil</li><li>ObjC 所有对象变量都可以为 nil</li><li>ObjC 只能用在对象上；NSNotFound 表示值的缺失</li></ul><p>Swift</p><ul><li>nil 不指针，是 缺失的一种特殊类型</li><li>任何类型可选项都可以设置为 nil</li></ul><p>Optional-If 语句</p><ul><li>不可以直接使用</li><li><code>!</code> 展开才能使用</li></ul><p>Unwrapped 展开方式</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断展开、强制展开、隐式展开、可选链</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> catchPhrase: <span class="type">String</span>?</span><br><span class="line">catchPhrase <span class="operator">=</span> <span class="string">&quot;optional string&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 强制展开 Forced binding</span></span><br><span class="line"><span class="keyword">let</span> op <span class="operator">=</span> catchPhrase<span class="operator">!</span>.count</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断展开 Optional binding</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> actualStr <span class="operator">=</span> cachePhrase &#123;</span><br><span class="line">    <span class="keyword">let</span> count <span class="operator">=</span> actualStr.count</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 隐式展开</span></span><br><span class="line"><span class="keyword">var</span> str: <span class="type">String</span>! <span class="operator">=</span> <span class="string">&quot;xxx&quot;</span></span><br><span class="line"><span class="keyword">let</span> count <span class="operator">=</span> str.count</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可选链 Chaining operator</span></span><br><span class="line"><span class="keyword">var</span> str: <span class="type">String</span>? <span class="operator">=</span> <span class="string">&quot;abc&quot;</span></span><br><span class="line"><span class="keyword">let</span> count <span class="operator">=</span> str<span class="operator">?</span>.count <span class="comment">// count 仍然为 optinal 类型</span></span><br><span class="line"><span class="keyword">let</span> count <span class="operator">=</span> str<span class="operator">?</span>.count <span class="operator">??</span> <span class="number">0</span> <span class="comment">// Coalescing operator</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Optional 其实是标准库里的一个 enum 类型；是用标准库实现语言特性的典型</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Optional</span>&lt;<span class="title class_">Wrapped</span>&gt; : <span class="title class_">ExpressibleByNilLiteral</span> &#123;</span><br><span class="line"><span class="keyword">case</span> none</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">some</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">init</span>(<span class="keyword">_</span> <span class="params">soome</span>: <span class="type">Wrapped</span>)</span><br><span class="line"><span class="meta">@inliable</span> <span class="keyword">public</span> <span class="keyword">var</span> unsafelyUnwrapped: <span class="type">Wrapped</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Optional.none  = nil</span></span><br><span class="line"><span class="comment">// Optional.some = wrapped</span></span><br></pre></td></tr></table></figure><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str <span class="operator">=</span> <span class="string">&quot;some string&quot;</span> <span class="comment">// 字面量</span></span><br><span class="line"><span class="keyword">let</span> multipLineStr <span class="operator">=</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">The white rabbit on his<span class="subst">\</span></span></span><br><span class="line"><span class="subst"><span class="string"></span>Begin at th</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span> <span class="comment">// 多行字面量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 结尾 \ 不会将 \n 计入多行字符串</span></span><br><span class="line"><span class="keyword">let</span> nums <span class="operator">=</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1<span class="subst">\</span></span></span><br><span class="line"><span class="subst"><span class="string"></span>2<span class="subst">\</span></span></span><br><span class="line"><span class="subst"><span class="string"></span>&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// unicode</span></span><br><span class="line"><span class="keyword">let</span> blackHeart <span class="operator">=</span> <span class="string">&quot;<span class="subst">\u&#123;2665&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure><p>扩展字符串分隔符 Row String</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str <span class="operator">=</span> <span class="string">#&quot;1\n2\n&quot;#</span></span><br><span class="line"><span class="comment">// 1\n2\n</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str <span class="operator">=</span> <span class="string">#&quot;1<span class="subst">\#n</span>2\n&quot;#</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2\n</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str <span class="operator">=</span> <span class="string">#&quot;1&quot;\n2\n&quot;#</span></span><br><span class="line"><span class="comment">// 1&quot;\n2\n</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str <span class="operator">=</span> <span class="string">#&quot;1&quot;<span class="subst">\#n</span>2\n&quot;#</span></span><br><span class="line"><span class="comment">// 1&quot;</span></span><br><span class="line"><span class="comment">// 2\n</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str <span class="operator">=</span> <span class="string">##&quot;1&quot;\#n2\n&quot;##</span></span><br><span class="line"><span class="comment">// 1&quot;\#n2\n</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str <span class="operator">=</span> <span class="string">##&quot;1<span class="subst">\##n</span>2<span class="subst">\##n</span>&quot;##</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h3 id="String-的常见操作"><a href="#String-的常见操作" class="headerlink" title="String 的常见操作"></a>String 的常见操作</h3><p>ObjC （NSString, NSMutableString）<br>Swift 编译器优化了字符串使用的资源，实际上拷贝只会在确定需要的时候才会进行</p><p>操作字符</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">for</span> character <span class="keyword">in</span> <span class="string">&quot;Dog&quot;</span> &#123; &#125;</span><br><span class="line"><span class="comment">// Character array</span></span><br><span class="line"><span class="keyword">let</span> catCharacters: [<span class="type">Character</span>] <span class="operator">=</span>[<span class="string">&quot;C&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;t&quot;</span>]</span><br><span class="line"><span class="keyword">let</span> str <span class="operator">=</span> <span class="type">String</span>([<span class="string">&quot;S&quot;</span>, <span class="string">&quot;t&quot;</span>, <span class="string">&quot;r&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拼接</span></span><br><span class="line">str.append(<span class="string">&quot;xxxxx&quot;</span>) <span class="comment">// eq. + , +=</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 插值 类似 NSString.stringWithFormat</span></span><br><span class="line"><span class="keyword">let</span> msg <span class="operator">=</span> <span class="string">&quot;<span class="subst">\(str)</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// row string insert</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">#&quot;\(6+7)&quot;#</span>) <span class="comment">// \(6+7)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">#&quot;<span class="subst">\#(<span class="number">6</span><span class="operator">+</span><span class="number">7</span>)</span>&quot;#</span>) <span class="comment">// 13</span></span><br></pre></td></tr></table></figure><h3 id="索引访问和修改字符串"><a href="#索引访问和修改字符串" class="headerlink" title="索引访问和修改字符串"></a>索引访问和修改字符串</h3><p>每一个 String 值都有相关的索引类型；相当于 Character 在字符串中的位置</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a position of a character or code unit in a string</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="title class_">Index</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>字符串索引</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> title <span class="operator">=</span> <span class="string">&quot;development&quot;</span></span><br><span class="line">title[title.startIndex] <span class="comment">// d</span></span><br><span class="line">title[<span class="number">1</span>] <span class="comment">// [error]</span></span><br><span class="line">title[title.endIndex] <span class="comment">// [error]</span></span><br><span class="line">title[title.index(title.endIndex, offsetBy: <span class="operator">-</span><span class="number">1</span>)] <span class="comment">// t</span></span><br><span class="line"><span class="string">&quot;title&quot;</span>[<span class="string">&quot;title&quot;</span>.startIndex] <span class="comment">// d</span></span><br><span class="line"></span><br><span class="line">title.index(after: title.startIndex)</span><br><span class="line"><span class="keyword">let</span> index <span class="operator">=</span> title.index(title.startIndex, offsetBy: <span class="number">2</span>)</span><br><span class="line">title[index] <span class="comment">// v</span></span><br></pre></td></tr></table></figure><p>插入<br>移除字符：<code>remove(at:)</code>、移除范围：<code>removeSubrange(_:)</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">title.insert(<span class="string">&quot;!&quot;</span>, at: title.endIndex) <span class="comment">// development!</span></span><br><span class="line">title.remove(at: title.index(before: title.endIndex)) <span class="comment">// !</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> range <span class="operator">=</span> title.index(title.endIndex, offsetBy: <span class="operator">-</span><span class="number">4</span>)<span class="operator">..&lt;</span>title.endIndex</span><br><span class="line">title.removeSubrange(range) <span class="comment">// develop</span></span><br></pre></td></tr></table></figure><h3 id="获取字符串-字符串比较"><a href="#获取字符串-字符串比较" class="headerlink" title="获取字符串&amp;字符串比较"></a>获取字符串&amp;字符串比较</h3><p>下标或者 prefix(:_) 获取 Substring 类型；Substring 拥有 String 大部分方法，并可以转成 String 类型<br>子字符串：</p><ul><li>Substring 可以重用一部分内存；不需要花费拷贝内存的代价</li><li>String 和 Substring 遵循 StringProtocol 协议</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> slogen <span class="operator">=</span> <span class="string">&quot;Hello, swift!&quot;</span></span><br><span class="line"><span class="keyword">let</span> index <span class="operator">=</span> slogen.index(of: <span class="string">&quot;,&quot;</span>) <span class="operator">??</span> slogen.endIndex</span><br><span class="line"><span class="type">String</span>(slogen[<span class="operator">..&lt;</span>index]) <span class="comment">// hello</span></span><br></pre></td></tr></table></figure><p>比较</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> welcome <span class="operator">=</span> <span class="string">&quot;hello, world!&quot;</span></span><br><span class="line">welcome <span class="operator">==</span> <span class="string">&quot;hello&quot;</span> <span class="comment">// false</span></span><br><span class="line">slogen.hasPrefix(<span class="string">&quot;He&quot;</span>) <span class="comment">// true</span></span><br><span class="line">slogen.hasSuffix(<span class="string">&quot;swi&quot;</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="第三章：运算符"><a href="#第三章：运算符" class="headerlink" title="第三章：运算符"></a>第三章：运算符</h2><h3 id="赋值和算数运算符"><a href="#赋值和算数运算符" class="headerlink" title="赋值和算数运算符"></a>赋值和算数运算符</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">!</span>b b<span class="operator">!</span></span><br><span class="line">a <span class="operator">+</span> b</span><br><span class="line">a <span class="operator">?</span> b : c</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b <span class="operator">=</span> <span class="number">1</span> <span class="comment">// 没有返回值；防止用于 == 意图</span></span><br><span class="line"><span class="operator">+</span> <span class="operator">-</span> <span class="operator">*</span> <span class="operator">/</span> <span class="operator">%</span> <span class="comment">// 可以检测并阻止溢出</span></span><br><span class="line"></span><br><span class="line">a <span class="operator">%</span> b <span class="operator">==</span> a <span class="operator">%</span> <span class="operator">-</span>b <span class="comment">// - 会忽略</span></span><br></pre></td></tr></table></figure><h3 id="处理算术结果溢出"><a href="#处理算术结果溢出" class="headerlink" title="处理算术结果溢出"></a>处理算术结果溢出</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&amp;+</span> <span class="comment">// 溢出加法</span></span><br><span class="line"><span class="operator">&amp;-</span> <span class="comment">// 溢出减法</span></span><br><span class="line"><span class="operator">&amp;*</span> <span class="comment">// 溢出乘法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> aa: <span class="type">UInt8</span> <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">aa <span class="operator">&amp;-</span> <span class="number">1</span> <span class="comment">// 255</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a: <span class="type">UInt8</span> <span class="operator">=</span> <span class="number">255</span></span><br><span class="line">a <span class="operator">&amp;+</span> <span class="number">1</span> <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a1: <span class="type">Int8</span> <span class="operator">=</span> <span class="number">125</span></span><br><span class="line">a1 <span class="operator">&amp;+</span> <span class="number">11</span> <span class="comment">// -120</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a1: <span class="type">Int8</span> <span class="operator">=</span> <span class="number">127</span></span><br><span class="line">a1 <span class="operator">&amp;*</span> <span class="number">2</span> <span class="comment">// -2</span></span><br></pre></td></tr></table></figure><h3 id="Optional-合并空运算符"><a href="#Optional-合并空运算符" class="headerlink" title="Optional 合并空运算符"></a>Optional 合并空运算符</h3><p>a ?? b 等同于 a !&#x3D;. nil ? a : b</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">addTow</span>(<span class="params">num</span>: <span class="type">Int</span>?, <span class="params">num1</span>: <span class="type">Int</span>?) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (num <span class="operator">??</span> <span class="number">0</span>) <span class="operator">+</span> (num1 <span class="operator">??</span> <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Range-区间运算符"><a href="#Range-区间运算符" class="headerlink" title="Range &amp; 区间运算符"></a>Range &amp; 区间运算符</h3><p>… 闭区间；..&lt; 开区间</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="operator">...</span><span class="number">5</span> <span class="comment">// &#123;lowerBound 1, upperBound 5&#125;</span></span><br><span class="line"><span class="number">1</span><span class="operator">..&lt;</span><span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr <span class="operator">=</span> [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span><span class="operator">..&lt;</span><span class="number">5</span> &#123; <span class="comment">// arr[2...] | arr[..&lt;2]</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;index is <span class="subst">\(i)</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> range <span class="operator">=</span> <span class="operator">..&lt;</span><span class="number">5</span> <span class="comment">// PartialRangeUpTo&lt;Int&gt;</span></span><br><span class="line"><span class="keyword">let</span> range <span class="operator">=</span> <span class="operator">...</span><span class="number">5</span> <span class="comment">// PartialRangeThrough&lt;Int&gt;</span></span><br><span class="line">range.contains(<span class="number">4</span>) <span class="comment">// true</span></span><br><span class="line">range.contains(<span class="number">7</span>) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str <span class="operator">=</span> <span class="string">&quot;cc&quot;</span></span><br><span class="line"><span class="keyword">var</span> range <span class="operator">=</span> str.startIndex<span class="operator">..&lt;</span>str.endIndex</span><br><span class="line"><span class="comment">// &#123;&#123;_rawBits 1&#125;, &#123;_rawBits 131073&#125;&#125;</span></span><br><span class="line">range <span class="operator">=</span> str.index(str.endIndex, offsetBy: <span class="operator">-</span><span class="number">1</span>)<span class="operator">..&lt;</span>str.endIndex</span><br><span class="line"><span class="comment">// &#123;&#123;_rawBits 65793&#125;, &#123;_rawBits 131073&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// reversed</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> (<span class="number">0</span><span class="operator">..&lt;</span><span class="number">10</span>).reversed() &#123; &#125;</span><br></pre></td></tr></table></figure><p>Comparable 区间</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> range <span class="operator">=</span> <span class="string">&quot;a&quot;</span><span class="operator">...</span><span class="string">&quot;z&quot;</span> <span class="comment">// &#123;lowerBound &quot;a&quot;, upperBound &quot;z&quot;&#125;</span></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> <span class="string">&quot;hello!&quot;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="operator">!</span>range.contains(<span class="type">String</span>(char)) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">\(char)</span> 不是字母&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ! 不是字母</span></span><br></pre></td></tr></table></figure><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">~</span> <span class="comment">// 位取反运算符</span></span><br><span class="line"><span class="operator">&amp;</span> <span class="comment">// 位与运算符</span></span><br><span class="line"><span class="operator">|</span> <span class="comment">// 位或运算符</span></span><br><span class="line"><span class="operator">^</span> <span class="comment">// 位异或运算符</span></span><br><span class="line"><span class="operator">&lt;&lt;</span> <span class="comment">// 位左移</span></span><br><span class="line"><span class="operator">&gt;&gt;</span> <span class="comment">// 位右移</span></span><br></pre></td></tr></table></figure><h3 id="运算符优先级和结合性"><a href="#运算符优先级和结合性" class="headerlink" title="运算符优先级和结合性"></a>运算符优先级和结合性</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Struct-Class-自定义运算符"><a href="#Struct-Class-自定义运算符" class="headerlink" title="Struct &amp; Class 自定义运算符"></a>Struct &amp; Class 自定义运算符</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="自定义运算符"><a href="#自定义运算符" class="headerlink" title="自定义运算符"></a>自定义运算符</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><h3 id="循环控制"><a href="#循环控制" class="headerlink" title="循环控制"></a>循环控制</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Switch"><a href="#Switch" class="headerlink" title="Switch"></a>Switch</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Guard-条件判断"><a href="#Guard-条件判断" class="headerlink" title="Guard 条件判断"></a>Guard 条件判断</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="模式和匹配模式"><a href="#模式和匹配模式" class="headerlink" title="模式和匹配模式"></a>模式和匹配模式</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="第四章：流程控制"><a href="#第四章：流程控制" class="headerlink" title="第四章：流程控制"></a>第四章：流程控制</h2>]]></content>
      
      
      
        <tags>
            
            <tag> lang/swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Svelte Cheatsheet</title>
      <link href="/2021/svelte-cheatsheet/"/>
      <url>/2021/svelte-cheatsheet/</url>
      
        <content type="html"><![CDATA[<h1 id="Svelte-Cheatsheet"><a href="#Svelte-Cheatsheet" class="headerlink" title="Svelte Cheatsheet"></a>Svelte Cheatsheet</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">. <span class="comment"># Svelte</span></span><br><span class="line">├── Component Format</span><br><span class="line">├── Template Syntax</span><br><span class="line">│   ├── Tags</span><br><span class="line">│   ├── Attributes and Props</span><br><span class="line">│   ├── Text Expressions</span><br><span class="line">│   ├── Comments</span><br><span class="line">│   ├── Block</span><br><span class="line">│   ├── Element Directives</span><br><span class="line">│   ├── Component Directives</span><br><span class="line">│   ├── &lt;slot /&gt;</span><br><span class="line">│   └── Special Elements</span><br><span class="line">├── Run Time</span><br><span class="line">│   ├── Lifecycle | Context</span><br><span class="line">│   ├── Store</span><br><span class="line">│   ├── Motion | Transition | Animate</span><br><span class="line">│   ├── Custom Element API</span><br><span class="line">│   └── Client-side | Server-side</span><br><span class="line">└── Compile Time</span><br></pre></td></tr></table></figure><ul><li>A Svelte Component for Preview</li></ul><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- <span class="title class_">Steps</span>.<span class="property">svelte</span> --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// logic</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">import</span> <span class="title class_">Step</span> <span class="keyword">from</span> <span class="string">&quot;./Step.svelte&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">function</span> <span class="title function_">onProgressDot</span>(<span class="params"></span>) &#123;&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">function</span> <span class="title function_">handleNotify</span>(<span class="params"></span>) &#123;&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- <span class="title class_">Step</span>.<span class="property">svelte</span> --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Step</span> <span class="attr">current</span>=<span class="string">&quot;1&quot;</span> <span class="attr">direction</span>=<span class="string">&quot;vert&quot;</span> &#123;<span class="attr">onProgressDot</span>&#125; <span class="attr">on:notify</span>=<span class="string">&#123;handleNotify&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;upper&quot;</span> /&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="comment">/* scope */</span></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-class">.upper</span> &#123;&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="comment">/* global styling */</span></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  :<span class="built_in">global</span>(body) &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-tag">div</span> :<span class="built_in">global</span>(strong) &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- <span class="title class_">Step</span>.<span class="property">svelte</span> --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">import</span> &#123; createEventDispatcher &#125; <span class="keyword">from</span> <span class="string">&quot;svelte&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">export</span> <span class="keyword">let</span> current; <span class="comment">// props</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">export</span> <span class="keyword">let</span> direction = <span class="string">&quot;hori&quot;</span>; <span class="comment">// props with default value</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// reactive declaration, ECMA labeled statement</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">$</span>: [statement]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">$</span>: cubecurrent = current ** <span class="number">4</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">$</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> <span class="title function_">square</span> = (<span class="params"></span>) =&gt; current ** <span class="number">2</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;square:&quot;</span>, <span class="title function_">square</span>());</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;cubecurrent:&quot;</span>, cubecurrent);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> dispatch = <span class="title function_">createEventDispatcher</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">let</span> <span class="title function_">onNotify</span> = (<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">dispatch</span>(<span class="string">&quot;notify&quot;</span>, ...params);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">let</span> <span class="title function_">handleClick</span> = (<span class="params"></span>) =&gt; variable++; <span class="comment">// self handler</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">export</span> <span class="keyword">let</span> <span class="title function_">onProgressDot</span> = (<span class="params"></span>) =&gt; &#123;&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- markup | multi markup --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span> &#123;current&#125; <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span> &#123;cubecurrent&#125; <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span> &#123;direction&#125; <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">on:click</span>=<span class="string">&#123;onNotify&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">on:click</span>=<span class="string">&#123;handleClick&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">on:click</span>=<span class="string">&#123;onProgressDot&#125;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="Component-Format"><a href="#Component-Format" class="headerlink" title="Component Format"></a>Component Format</h2><ul><li><script/></li><li><script context="[module-name]"/></li><li><style/></li></ul><h2 id="Template-Syntax"><a href="#Template-Syntax" class="headerlink" title="Template Syntax"></a>Template Syntax</h2><h4 id="Tags"><a href="#Tags" class="headerlink" title="Tags"></a>Tags</h4><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- lowercase indicate html element --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> /&gt;</span></span> or &lt;div&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- upercase indicate <span class="title class_">Component</span> --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">MyComponent</span> <span class="attr">bind:value</span> /&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="Attributes-and-Props"><a href="#Attributes-and-Props" class="headerlink" title="Attributes and Props"></a>Attributes and Props</h4><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;button <span class="attr">on</span>:click=&#123;handleClick&#125; /&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;foo&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;domain://&#123;url&#125;/index.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">disable</span>=<span class="string">&#123;!clickable&#125;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="Text-Expressions"><a href="#Text-Expressions" class="headerlink" title="Text Expressions"></a>Text Expressions</h4><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;element&gt; &#123; expression &#125; &lt;/element&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">element</span> <span class="attr">class</span>=<span class="string">&quot;&#123; expression &#125;&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">element</span> <span class="attr">style</span>=<span class="string">&quot;&#123; expression &#125;&quot;</span>/&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="Comments"><a href="#Comments" class="headerlink" title="Comments"></a>Comments</h4><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">// or /** */</span></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- --&gt;</span><br><span class="line">&lt;!-- svelte-ignore a11y-** --&gt; <span class="comment">// usually for a11y</span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"> <span class="comment">/* */</span> </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="Block-if-each-await-key-html-debug"><a href="#Block-if-each-await-key-html-debug" class="headerlink" title="Block:if\each\await\key\html\debug"></a>Block:if\each\await\key\html\debug</h4><p>- </p>]]></content>
      
      
      
        <tags>
            
            <tag> cheatsheet </tag>
            
            <tag> libs/svelte </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端工程师 Tech Q&amp;A</title>
      <link href="/2022/frontend-engineer-tech-qa/"/>
      <url>/2022/frontend-engineer-tech-qa/</url>
      
        <content type="html"><![CDATA[<h1 id="前端工程师-Tech-Q-A"><a href="#前端工程师-Tech-Q-A" class="headerlink" title="前端工程师 Tech Q&amp;A"></a>前端工程师 Tech Q&amp;A</h1><h2 id="级别标准"><a href="#级别标准" class="headerlink" title="级别标准"></a>级别标准</h2><ul><li>P3：实习开发、功能开发</li><li>P4：主要开发、功能模块独立开发</li><li>P5：项目负责人、核心开发、技术问题总结者、技术分享、人员培养</li><li>P6：团队负责人、问题终结者、跨组沟通&amp;协调资源、团队培养提升</li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote><p>如下所列前端工程师所涉及<strong>领域</strong>；<br>领域（子领域）设置<strong>题目</strong>若干；<br>题中包含<strong>标签</strong>（涉及深度、提问触发词）&amp; <strong>答题点</strong>（必知 <strong>M</strong>ust know、应知 <strong>S</strong>hould to know、可知 <strong>P</strong>osibility）</p></blockquote><ul><li>语言：JavaScript、ECMAScript、TypeScript、HTML、CSS</li><li>框架&amp;环境：浏览器、研发工具、容器、框架通识</li><li>类库&amp;库生态：React、Libs Ecosystem、数据流、SSR &amp; SSG、BFF</li><li>跨端技术：微信小程序、多端统一、Node、Electron、Native、Hybrid</li><li>研发链路：初始化、包管理、规范标准、调试、编译、构建、测试、发布、监控</li><li>性能&amp;安全：性能指标、性能评估、性能优化、源码安全、Web 安全</li><li>工程化：工程体系、微前端、低代码、Bundleless、CI\CD、综合能力</li></ul><h2 id="语言（Lang-DSL）"><a href="#语言（Lang-DSL）" class="headerlink" title="语言（Lang &amp; DSL）"></a>语言（Lang &amp; DSL）</h2><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><ul><li>简单聊聊 JavaScript 这门语言？<ul><li><code>#了解#</code></li></ul><ol><li>「M」在实现层面：分为语言标准（ECMAScript 是语言标准，JavaScript 只是标准的实现）+ 语言宿主环境（对象模型、WebAPI、Node Api、WX）；</li><li>「S」语言标准提供语法、词法、基本类型、表达式、语句等；宿主环境提供内置对象、标准模块；</li><li>「P」语法借鉴 C &amp; Java、数据结构借鉴 Java、原型借鉴 Self、函数用法借鉴 Schema、正则借鉴 Perl ；</li></ol></li><li>JavaScript 中有那些常见的内置对象，由谁提供?<ul><li><code>#了解#</code></li></ul><ol><li>「M」值：NaN、undefined、null、Infinity；函数：eval、parseInt、parseFloat；对象：Object、Function、Boolean、Symbol、Error；数字和日期：Math、Date、Number；字符串：String、RegExp；集合：Array、Map、WeakMap、Set、WeakSet；控制对象：Promise、Generator；反射：Proxy、Reflect；</li><li>[S] 内置对象是在程序执行时存在全局作用域的一些 JS 定义的值、函数、对象；</li></ol></li><li>JavaScript 代码在运行时，有那些常见的执行上下文？<ul><li><code>#熟练#</code></li></ul><ol><li>「M」函数执行上下文；</li><li>[S] 全局执行上下文、eval 执行上下文；</li></ol></li><li>JavaScript 通用模块规范，并描述其基本的区别？<ul><li><code>#熟练#</code> <code>#模块化#</code></li></ul><ol><li>「M」CommonJS、AMD、CMD、UMD、ESM；</li><li>「M」CommonJS 通过 require 引入模块、module.export 输出对象和接口。运行时加载，输出值的拷贝；</li><li>「M」ESM 通过 import 引入模块，export 输出模块；编译期输出接口，输出值的引用；浏览器支持原生 ESM ，但只能在 <code>&lt;script type=&quot;module&quot; /&gt;</code> 内使用；</li><li>[S] AMD 和 CMD 均为异步加载模块，分别由 require.js 和 sea.js 提供实现；AMD 依赖前置，CMD 就近依赖；</li><li>[S] UMD 是对 CommonJS、AMD 的整合；</li></ol></li><li>JavaScript 这门语言是否有反射能力？ES6 为了增强这种能力又推出那些新特性？<ul><li><code>#精通#</code> <code>#编程范式#</code> <code>#元编程#</code> <code>#反射#</code> <code>#Proxy#</code> <code>#Reflect#</code> <code>#数据劫持#</code></li></ul><ol><li>[S] 反射是实现元编程的一种方式；JS 诞生之初就有反射能力；eval、Object.{create|defineProperties|defineProperty}、Function.{apply|bind} 均属于反射的一些实现；</li><li>[S] ES6 Proxy &amp; Reflect 作为反射的两个分支（Self-Modification &amp; Intercession）实现；defineProperty 数据劫持有缺陷；规范语言，对之前 Object &amp; Function 原型链上的方法进行规范化；</li><li>[S] 为 JS 之后更多的反射行为提供良好支撑；</li><li>[P] ES7 推出了 Reflect MetaData 提案，增强了反射覆盖场景；</li></ol></li><li>简单描述闭包及其使用场景？<ul><li><code>#熟练#</code> <code>#语言特性#</code> <code>#模块化#</code></li></ul><ol><li>[M] 指有权限访问另外一个函数作用域中变量的函数；其本质是作用域链的特殊应用；</li><li>[S] 创建私有变量；通过闭包对上下文中变量的引用，防止其被 GC 回收（易引发内存溢出）；</li></ol></li></ul><h3 id="ECMAScript"><a href="#ECMAScript" class="headerlink" title="ECMAScript"></a>ECMAScript</h3><ul><li>ECMAScript2017（ES8） 中新增的 Symbol 有何用处？<ul><li><code>#熟练#</code></li></ul><ol><li>[M] 用来表示一个独一无二的变量防止命名冲突</li></ol></li><li>ECMAScript2015（ES6） 之后的版本有那些新特性？<ul><li><code>#熟练#</code> <code>#语言特性#</code> <code>#ESNext#</code></li></ul><ol><li>[S] ES7：Reflect MetaData（提案）、Array includes、<code>**</code>运算符；</li><li>[S] ES8：async&amp;await、Object values|entries、String padding、Object.getOwnPropertyDescriptors、SharedArrayBuffer；</li><li>[S] ES9：异步迭代、Promise.finally、正则；</li><li>[S] ES10：Array flat、String trim 函数、Symbol Description、catch 绑定、Function toString 支撑转注释、BigInt；</li><li>[M] ES11：Option Chaining(<code>?.</code>)、Nullish Coalescing(<code>??</code>)、Private Fields(<code>#</code>)、Top Level Await、Dynamic Import、globalThis；</li><li>[S] ES12：String replaceAll、Promise.any、<code>??= ||= &amp;&amp;=</code>、WeakRefs、<code>123_456_789</code> 数字分隔符；</li></ol></li><li>ECMAScript Next（ESNext）中的新特性？<ul><li><code>#精通#</code> <code>#ECMA#</code> <code>#ESNext#</code> <code>#前沿#</code> <code>#语言新特性#</code></li></ul><ol><li>[S] Class instance fields、Static class fields、Private instance methods、Private instance fields、Private static methods、Private static fields、Ergonomic brand checks、Import assertions、Class static blocks</li><li>[P] Hashbang grammar、Top-level await、Arbitrary module namespace identifiers、</li></ol></li><li>简单列出目前 ECMAScript 处于 Stage（4 &amp; 3 &amp; 2） 阶段的提案？<ul><li><code>#精通#</code> <code>#ECMA#</code></li></ul><ol><li>[P] Error Cause（首个由中国团队”阿里淘宝”提出并进入 state-4 阶段的提案）</li><li>[P] ESNext：Record、Tuple</li></ol></li></ul><h3 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h3><ul><li>简单描述下 TypeScript 在项目中的作用？<ul><li><code>#了解#</code></li></ul><ol><li>[M] 是 JS 的超集，可以提前体验 ES Next 提案中的语法糖和特性</li><li>[M] 为 JS 添加类型支撑、JS 的语言超集、利于团队协作；极其强大的类型系统</li></ol></li><li>简单描述下 TypeScript 中常用的工具类型？<ul><li><code>#了解#</code></li></ul><ol><li>[S] <code>Partial&lt;T&gt;</code> <code>Required&lt;T&gt;</code> <code>Readonly&lt;T&gt;</code> <code>Pick&lt;T, K&gt;</code> <code>Omit&lt;T, K&gt;</code></li></ol></li><li>简单描述下 tsconfig.json 中常用的配置项？<ul><li><code>#熟练#</code></li></ul><ol><li>[M] <code>compilerOptions.targer</code> <code>module</code> <code>lib</code> <code>outDir</code> <code>types</code> <code>paths</code> <code>sourceMap</code> <code>include</code> <code>exclude</code></li></ol></li><li>TypeScript 是名义类型还是结构类型？<ul><li><code>#熟练#</code></li></ul><ol><li>[S] 结构类型</li></ol></li><li>简单描述下 TypeScript 中 Interface 和 Type 的区别？<ul><li><code>#熟练#</code></li></ul><ol><li>[M] 均支持拓展（extends），interface 使用 <code>extends</code> 而 type 使用 <code>&amp;</code> 类型合并；支持互相拓展；</li><li>[S] type 支持类型别名，联合类型，元组；interface 支持声明合并；在使用过程中尽可能先使用 interface；</li></ol></li></ul><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><ul><li>简单列出项目中 HTML 常用的 Meta 标签？<ul><li><code>#了解#</code> <code>#浏览器#</code> <code>#HTML#</code></li></ul><ol><li>[M] <code>&lt;meta charset=&quot;utf-8&quot; /&gt;</code></li><li>[S] SEO 优化 <code>&lt;meta name=“description&quot; contents=“xx,xx”/&gt;</code></li><li>[S] SEO 优化 <code>&lt;meta name=“keywords&quot; contents=“xx,xx”/&gt;</code></li><li></li></ol></li><li>简单列出项目中 HTML 常用的 Link 标签？<ul><li><code>#了解#</code> <code>#浏览器#</code> <code>#HTML#</code></li></ul><ol start="2"><li>[M] <code>&lt;link rel=&quot;shortcut icon&quot; type=&quot;image/x-icon&quot; href=&quot;..&quot;&gt;</code></li><li>[M] CSS 外链 <code>&lt;link rel=&quot;stylesheet&quot; href=&quot;...&quot;&gt;</code></li><li>[S] 域名 DNS 预请求 <code>&lt;link rel=&quot;dns-prefetch&quot; href=&quot;...&quot; /&gt;</code></li></ol></li><li>简单描述下 DOM 和 BOM 对象？<ul><li><code>#了解#</code> <code>#浏览器#</code> <code>#宿主对象#</code></li></ul><ol><li>[M] DOM 是文档对象模型，把文档当做为一个对象，定义和处理文档内容的方法和接口；比如 <code>document</code></li><li>[M] BOM 对浏览器对象模型，将浏览器作为一个对象，定义和处理与浏览器交互的方法和接口；比如 <code>window</code> <code>location</code> <code>navigator</code> <code>screen</code></li></ol></li><li>简单描述下事件委托，及其优势和运用场景？<ul><li><code>#熟练#</code> <code>#浏览器原理#</code> <code>#事件#</code></li></ul><ol><li>[M] 利用浏览器事件冒泡机制；在父节点定义监听事件，由父节点监听函数统一处理多个子元素冒泡传过来的事件；</li><li>[S] 减少内存消耗，实现事件的动态绑定；常常运用在各种 UI 事件绑定类库和数据埋点；</li></ol></li></ul><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><ul><li><p>常用单位以及其区别？</p><ul><li><code>#了解#</code></li></ul><p>[M] px、em、rem、%、vw、vh</p></li></ul><ol start="2"><li>[M] px 为屏幕的像素点，em 是父元素的 font-size（默认 16px），vw 为视窗宽度的 1%，vh 为视窗高度的 1%；</li></ol><ul><li>常用的 CSS 预处理库？</li><li><code>#了解#</code></li></ul><ol><li>[M] Less、Sass</li><li>[P] PostCSS、Stylus</li></ol><ul><li>Less &amp; Sass(SCSS) 的区别和各自的优缺点？</li><li><code>#了解#</code></li></ul><ol><li>[M] 区别：在与变量的声明、实现方式（语言不同，Less 基于 JS，Sass 基于 Ruby，当然也有 node-sass 的实现）</li><li>[S] Less 兼容性好，但是不支持循环判断等；Sass 用户基础大，支持函数对象循环判断等，但是依赖于 Ruby 安装容易报错；</li></ol><ul><li>常用的 CSS 架构、规范？</li><li><code>#熟练#</code></li></ul><ol><li>[S] BEM、CSS Modules</li></ol><ul><li>常用的 CSS in JS？</li><li><code>#熟练#</code></li></ul><ol><li>[S] styled-components、TailwindCSS</li></ol><ul><li>通用的浏览器 CSS 差异标准化方案？</li><li><code>#熟练#</code> <code>#兼容性#</code> <code>#初始化#</code></li></ul><ol><li>[S] 引入 normalize.css 或者 reset.css</li></ol><hr><h2 id="框架-环境（Frame-VM）"><a href="#框架-环境（Frame-VM）" class="headerlink" title="框架&amp;环境（Frame &amp; VM）"></a>框架&amp;环境（Frame &amp; VM）</h2><h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h3><ul><li>浏览器事件触发时，其传播的阶段？<ul><li><code>#了解#</code></li></ul><ol><li>[M] Capturing（捕获） &gt; Target（目标触发） &gt; Bubbling（冒泡）</li></ol></li><li>Cookie、localStorage 以及 sessionStorage 之间的区别？<ul><li><code>#了解#</code></li></ul><ol><li>[M] Cookie：保存在客户端的数据，记录你在网页的一些行为数据。 sessionStorage：保存在客户端的数据，生命周期是同源同窗口，只要该窗口没有关闭就一直可用共享。 localStorage：保存在客户端的数据，一直有效；</li><li>[S] Cookie size &lt;&#x3D; 4Kb；Storage size &lt;&#x3D; 5Mb；</li></ol></li><li>浏览器出于安全提出了同源策略，何种情况下会引发跨域以及通用解决办法？<ul><li><code>#了解#</code></li></ul><ol><li>[M] 域名、子域名、端口号、协议不同均不属于一个域；</li><li>[S] jsonp、documents.domain + iframe、CORS、iframe + postMessage、websocket；</li><li>[S] 处于一级域名下的应用可以设置 document.domain 在相同父域，可以获取 cookie；</li></ol></li><li>简单说明 JSONP 的原理，及其局限性？<ul><li><code>#了解#</code></li></ul><ol><li>[M] 利用了<code>&lt;script&gt;</code>标签没有跨域限制，可以发起 get 请求；</li><li>[S] 兼容性较好，但仅限于 Get 请求；</li></ol></li><li>简单描述下浏览器的渲染机制？<ul><li><code>#熟练#</code></li></ul><ol><li>[S] 处理 HTML 文档构建 DOM 树、处理 CSS 文档构建 CSSOM 树、DOM 与 CSSOM 合并为渲染树；</li></ol></li><li>简单描述下浏览器的缓存机制？<ul><li><code>#熟练#</code></li></ul><ol><li>[S] 浏览器缓存分为强缓存和协商缓存；</li><li>[P] 强缓存直接从浏览器中获取资源，通过请求头 <code>Cache-Control</code> 控制；协商缓存先访问服务缓存是否过期，在决定是否使用本地资源，通过请求头控制；</li></ol></li></ul><h3 id="研发工具"><a href="#研发工具" class="headerlink" title="研发工具"></a>研发工具</h3><ul><li>如何将项目的格式化进行统一？<ul><li><code>#熟练#</code></li></ul><ol><li>[S] 使用 .editorconfig 定义代码格式化风格；或者提交 .vscode settings.json 约束项目；</li></ol></li><li>常用的 VS Code Editor 配置？<ul><li><code>#熟练#</code></li></ul><ol><li>[S] .vscode 文件下通常使用 extensions.json 声明项目依赖插件；launch.json 配置 Debug 相关的配置；settings.json 用来覆盖本地用户的基本配置（文件隐藏、文件编码、格式化风格）</li></ol></li></ul><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><hr><h2 id="类库-生态（Libs-Ecosystem）"><a href="#类库-生态（Libs-Ecosystem）" class="headerlink" title="类库&amp;生态（Libs &amp; Ecosystem）"></a>类库&amp;生态（Libs &amp; Ecosystem）</h2><h3 id="React"><a href="#React" class="headerlink" title="React"></a>React</h3><ul><li>React 在 16.x 具体推出那些新特性？<ul><li><code>#熟练#</code></li></ul><ol><li>[M] (16.1) render 返回新增支持字符串和数组类型、Error Boundaries、React Dom Portal、Fiber、React.Fragment</li><li>[M] (16.3) createContext、createRef、forwardRef、生命周期函数更新</li><li>[M] (16.6) React.memo、React.lazy、React.Suspense、static getDerivedStateFromError、</li><li>[M] (16.7) React Hooks（useState、useEffect、useMemo、useCallBack、useContext）</li><li>[M] (16.8) React Concurrent Rendering</li></ol></li><li>React 在 17.x 推出的新特性？<ul><li><code>#熟练#</code></li></ul></li><li>React 在目前的 18.x 推出的新特性？<ul><li><code>#熟练#</code></li></ul></li><li>简单说明下为何两个不同版本的 React 不能运行在一个全局上下文？<ul><li><code>#熟练#</code></li></ul></li></ul><h3 id="Ecosystem"><a href="#Ecosystem" class="headerlink" title="Ecosystem"></a>Ecosystem</h3><ul><li>React 运行时生态类库？<ul><li><code>#熟练#</code> <code>#Ecosystem#</code> <code>#初始化#</code></li></ul><ol><li>[M] Official：react、react-dom、react-update、react-refresh、react-reconciler</li><li>[M] State &amp; Flow：@reduxjs&#x2F;toolkit、redux、redux-saga、mobx、iflux2 &amp; plume2、dva</li><li>[M] Hooks：ahooks、react-use、react-query</li><li>[M] UI：antd、rc-*(antd core)、antd-mobile、antd-pro</li><li>[M] Styles：styled-components、classnames</li><li>[M] Router：react-router、react-router-dom、redux-router</li><li>[S] Framework：umi</li><li>[S] CLI &amp; Layer：vite、create-react-app</li><li>[S] Analytics：react-ga、@sentry&#x2F;react</li><li>[S] Draggable：react-dnd、react-draggable</li><li>[S] Charts：echarts、AntV</li><li>[P] SSR &amp; SSG：next.js、gatsby</li><li>[P] I18n：react-intl</li><li>[P] Async Load：react-loadable、react-script</li><li>[P] Long List：react-virtualized、react-windows、react-scroll、react-infinite-scroller</li><li>[P] Docs：storybook、huge</li></ol></li><li>Taro 生态类库？<ol><li>Official：@tarojs&#x2F; taro、@tarojs&#x2F; runtime、@tarojs&#x2F; react、@tarojs&#x2F; components</li><li>[M] Tracing：umtrack-alipay、umtrack-wx</li><li>[M] CLI：@tarojs&#x2F; cli、@tarojs&#x2F; mini-runner、@tarojs&#x2F; plugin-inject、@tarojs&#x2F; webpack-runner</li></ol></li><li>Electron 生态类库？<ol><li>[M] Official：electron、electron-log</li><li>[M] Release &amp; Deploy：electron-builder、electron-packager、electron-updater、electron-reload、electron-notarize</li><li>[M] Development：electron-debug</li><li>[S] Compiler：electron-rebuild、node-gyp</li><li>[M] System：getmac、systeminformation、ip</li><li>[S] Devices：usb、escpos</li><li>[S] Version Manage：semver</li></ol></li><li>React Native 生态类库？<ol><li>[M] Official：react、react-native</li><li>[M] Navigator：react-navigation、native-navigation</li><li>[M] Data Storage：realm、sqlite3、react-native-storage</li><li>[M] Scrollable：react-native-scrollable-tab-view、</li><li>[M] Devices：react-native-camera</li><li>[M] Logs：</li><li>[M] UI：ant-design-mobile</li><li>[M] Performance：sentry、</li><li>[M] Debugging：chrome-dev-tools、flipper</li><li>[M] Testing：enzyme、detox、jest</li><li>[S] Notification：jpush</li></ol></li><li>CSS 类库（CSS Tools）？<ol><li>[S] Resets：normalize.css、reset.css、reset-css</li><li>[S] Animate：animate.css</li><li>[S] Charts：charts.css</li><li>[S] Productor：ant.design、semi.design</li></ol></li><li>前端项目运行时生态类库？<ol><li>[S] Validator：joi、async-validator、yup</li><li>[S] Testing：mocha、jest、cypress、enzyme</li><li>[S] Assertion：chai</li></ol></li><li>前端项目开发时生态类库？<ol><li>[M] Request：axios、isomorphic-fetch</li><li>[M] Polyfill：core-js</li><li>[S] Data：immutable、immer、deepmerge</li><li>[M] Date：moment、day.js</li><li>[S] Testing：jest、mocha、jasmine</li><li>[S] Assertion：chai、assert</li><li>[S] Utils：lodash、underscore</li><li>[S] E2E：cypress、enzyme</li><li>[S] Command：commander</li></ol></li><li>前端项目编译时生态类库？<ol><li>[S] Compiler：babel、tsc、esbuild</li><li>[S] Bundled：webpack、rollup、parser</li><li>[S] Unbundled：snowpack、vite</li><li>[S] Mangler &amp; Compressor：terser、javascript-obfuscator、uglify-js、babel-minify</li><li>[S] CLI &amp; Boilerplate：create-react-app、vite</li></ol></li></ul><h3 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h3><ul><li>简单描述下单向数据流（flux）？<ul><li><code>#熟练#</code></li></ul></li><li>如何简单实现一个不可变数据类型？<ul><li><code>#熟练#</code></li></ul><ol><li>[M] 采用 ES6 Proxy &amp; Reflect 代理 get | set | apply 行为，以及 DeepCopy</li></ol></li></ul><h3 id="SSR-SSG"><a href="#SSR-SSG" class="headerlink" title="SSR &amp; SSG"></a>SSR &amp; SSG</h3><ul><li>CSR、SSR、BSR 以及 SSG 之间的区别与优劣？<ul><li><code>#了解#</code> <code>#SEO#</code> <code>#前后端同构#</code> <code>#白屏#</code> <code>#性能优化#</code></li></ul><ol><li>[M] CSR（Client Side Rendering）客户端渲染；</li><li>[M] SSR（Server Side Rendering）服务端渲染；</li><li>[M] SSG（Static Site Generation）静态站点生成；</li></ol></li><li>有那些常用的 SSR &amp; SSG 框架，如何简单实现 SSR？<ul><li><code>#熟练#</code></li></ul><ol><li>[S] Next.js、Gatsby</li></ol></li></ul><h3 id="Node-BFF"><a href="#Node-BFF" class="headerlink" title="Node BFF"></a>Node BFF</h3><ul><li>简单描述下对 Egg 的理解？<ul><li><code>#了解#</code></li></ul><ol><li>[M] Egg 是已 Koa 为内核，遵循约定大于配置的 Web 框架；所有功能基于插件形式完成拓展；</li></ol></li><li>简单描述下 Koa 洋葱模型的实现原理？<ul><li><code>#熟练#</code></li></ul></li><li>简单描述下 Egg Loader 的加载顺序？<ul><li><code>#熟练#</code></li></ul><ol><li>[M] framework &gt; middleware &gt; plugin &gt; app（router &gt; service &gt; controller）</li></ol></li><li>NestJS 中 IoC 的实现机制？<ul><li><code>#熟练#</code></li></ul><ol><li>[M] 基于 reflect-metadata 的提供的 definedMetadata | getMetadata &amp; Decorator 的能力对类、类的成员、类的方法、类方法参数进行的注释；并在编译器提取了对应 meta 信息并实例化 ；</li></ol></li></ul><hr><h2 id="跨端技术"><a href="#跨端技术" class="headerlink" title="跨端技术"></a>跨端技术</h2><h3 id="微信小程序"><a href="#微信小程序" class="headerlink" title="微信小程序"></a>微信小程序</h3><ul><li>简述一下常用的生命周期<ul><li><code>#了解#</code></li></ul><ol><li>[M] onLoad：页面加载，调一次；onShow：页面显示，每次打开页面都调用；onReady：初次渲染完成，调一次；onHide：页面隐藏，当 navigateTo 或底部 tab 切换时调用；onUnload：页面卸载，当 redirectTo 或 navigateBack 时调用；</li></ol></li><li>简单描述下小程序的工作原理？<ul><li><code>#熟练#</code></li></ul><ol><li>[S] 小程序分为两个部分 webview 和 appService，webview 用来展现 UI，appService 用来处理业务逻辑、数据及接口调用，它们在两个进程中运行，通过系统层 JSBridge 实现通信，完成 UI 渲染、事件处理。</li></ol></li><li>小程序双线程架构原理？<ul><li><code>#精通#</code></li></ul><ol><li>[S] 小程序应用是基于双线程模型的，渲染层通过 Webview 作为渲染载体；逻辑层则通过 JsCore 来作为 JS 运行时；</li></ol></li></ul><h3 id="多端统一"><a href="#多端统一" class="headerlink" title="多端统一"></a>多端统一</h3><ul><li>简单描述下 Taro3.0 原理？<ul><li><code>#熟练#</code></li></ul><ol><li>[S] Taro3.0 从编译型转向了运行时架构</li><li>[S] 在运行时模拟实现了 DOM、BOM API，使得前端架构可以运行在小程序运行时环境中</li></ol></li></ul><h3 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h3><ul><li>require 的模块加载机制？<ul><li><code>#熟练#</code></li></ul><ol><li>[M] 先计算模块路径；如果模块在缓存里面，取出缓存；加载模块的输出模块的 exports 属性即可</li></ol></li><li>线上如何排查问题？<ul><li><code>#熟练#</code></li></ul><ol><li>[M] Sentry 监控；</li><li>[S] 全链路式日志，需要借助 apm 工具，opentracing，zipkin 等；</li><li>[S] 阿里云 alinode；</li></ol></li></ul><h3 id="Electron"><a href="#Electron" class="headerlink" title="Electron"></a>Electron</h3><ul><li>简单描述下对 Electron 的理解？<ul><li><code>#了解#</code></li></ul><ol><li>[S] Electron 是一个可以使用 Web 技术（JS、HTML、CSS）来创建跨平台原生桌面应用的框架。借助 Node API 可以使用纯 JS 来调用丰富的原生 API。</li></ol></li><li>简单描述下 Electron 的进程模型和以及各自的职责？<ul><li><code>#了解#</code></li></ul><ol><li>[S] Main Process 主进程：进程间通信（IpcMain、webContent）、窗口管理、Node Add-on 暴露、全局事务（应用生命周期、session）；</li><li>[S] Renderer Process 渲染进程：负责 web 页面容器构建渲染、业务处理；</li></ol></li><li>解释下 Electron 构建时为何需要 Rebuild？<ul><li><code>#熟练#</code></li></ul><ol><li>[P] Electron 内置了 V8 和 Node，而部分 Node 能力是通过 C++ Add-on 实现的；在构建 Electron 应用时，需要针对这些 Add-on 按 Node 版本、Electron 版本、OS Platform、CPU Arch 重新进行编译；</li></ol></li></ul><h3 id="Native"><a href="#Native" class="headerlink" title="Native"></a>Native</h3><h3 id="Hybrid-Web-APP"><a href="#Hybrid-Web-APP" class="headerlink" title="Hybrid Web APP"></a>Hybrid Web APP</h3><ul><li>如何解决移动端 Web 点击时间的延迟？<ul><li><code>#了解#</code></li></ul><ol><li>[M] <code>&lt;meta /&gt;</code> 标签禁用网页缩放、FastClick</li></ol></li></ul><hr><h2 id="研发链路（Lint-Compile-Builder-Package）"><a href="#研发链路（Lint-Compile-Builder-Package）" class="headerlink" title="研发链路（Lint &amp; Compile &amp; Builder &amp; Package）"></a>研发链路（Lint &amp; Compile &amp; Builder &amp; Package）</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><ul><li>如何重装 Node 环境（以 Mac 环境为例）？<ol><li>[P] 借助 npkill 对本地 node_modules 进行清理</li></ol></li></ul><h3 id="包管理"><a href="#包管理" class="headerlink" title="包管理"></a>包管理</h3><ul><li>简单列出一些常用的 CLI 工具或者 Boilerplate？<ul><li><code>#熟练#</code></li></ul><ol><li>[S] create-react-app、vite</li></ol></li><li>简单列出常用的包管理工具？<ul><li><code>#熟练#</code></li></ul><ol><li>[M] npm（.npmrc、.npmignore、package.json、package-lock.json）、yarn（.yarnrc、yarn.lock）、pnpm（pnpm-lock.yaml）、tnpm；</li><li>[S] nvm、npx（npm 5.2+ 内置；相当于提供两个 bin）</li></ol></li><li>简单列出常用的 NPM 命令？<ul><li><code>#熟练#</code> <code>#工程化#</code> <code>#脚手架#</code> <code>#命令行#</code></li></ul><ol><li>[M] <code>npm i|install|uninstall</code> <code>npm run</code> <code>npm help</code> <code>npm init</code> <code>npm publish|unpublish</code> <code>npm start|restart</code> <code>npm info</code> <code>npm list</code> <code>npm view|version</code></li><li>[S] <code>npx</code> <code>npm config</code> <code>npm link</code> <code>npm rebuild</code> <code>npm clean</code> <code>npm run-script</code> <code>npm whoami</code> <code>npm login|logout</code> <code>npm docs</code> <code>npm adduser</code></li><li>[S] run-scripts hook <code>pre &amp; post</code></li></ol></li><li>简单描述下 NPM 安装依赖的大致过程？<ul><li><code>#熟练#</code></li></ul><ol><li>[S] 检查配置（项目 .npmrc、全局用户 .npmrc）;</li><li>[S] 确定依赖版本，构建依赖树；package.json 优先 package-lock.json；</li><li>[S] 下载包资源；首先查询本地是否存在缓存版本，如没有则下载并添加本地缓存，并将包解压到项目 node_modules 下；</li><li>[S] 生成 lockfile 文件（npm 5.x+）；</li></ol></li><li>简单描述下 NPX 的大致流程？<ul><li><code>#熟练#</code> <code>#脚手架#</code> <code>#命令行#</code></li></ul><ol><li>[M] <code>npx</code> 命令是 <code>npm i xx --global &amp; .bin/xx</code> 的快捷方式</li></ol></li><li>NPM Package Version 遵循了什么协议，并简单说明该协议？<ul><li><code>#熟练#</code></li></ul><ol><li>[M] 遵循了 SemVer2.0 协议规范；x.y.z-{pre-release}；</li><li>[S] <code>&#123;major&#125;.&#123;minor&#125;.&#123;patch&#125;</code> Major 表示不兼容的修改，Minor 表示向下兼容的新增特性，Patch 表示向下兼容的问题修复；</li><li>[P] NPM 命令在不满足 SemVer2.0 规范的 Package.json 下无法执行；</li></ol></li><li>公共类库如何处理即将弃用的功能（API、组件、模块、依赖）？<ul><li><code>#熟练#</code> <code>#组件化#</code> <code>#开源项目#</code></li></ul><ol><li>[M] 更新说明文档以及类型描述文件让使用者知道这个 Break Change；</li><li>[S] 在某个阶段的 Minor 版本持续进行 Warning 级别提示（一般跨域一整个 Major），然后在下个 Major 版本移除；</li></ol></li><li>封装一个类库时应该遵循哪条基本原则？<ul><li><code>#熟练#</code> <code>#开源项目#</code></li></ul><ol><li>DRY</li></ol></li></ul><h3 id="规范标准"><a href="#规范标准" class="headerlink" title="规范标准"></a>规范标准</h3><ul><li>JavaScript 基本编码规范<ul><li><code>#熟练#</code> <code>#代码洁癖#</code> <code>#强迫症#</code></li></ul><ol><li>[M] <code>=== !==</code> 代替 <code>== !=</code>；不要在对象原型（<code>Array.prototype|Date.prototype</code>）上添加自定义方法；for | if 语句使用大括号；代码中的地址时间等使用常量替代；不使用 <code>var</code> 声明变量；</li><li>[M] 使用大驼峰法对组件&amp;类命名，使用小驼峰法来对变量&amp;函数名命名</li></ol></li></ul><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><ul><li>H5 页面的调试手段？<ul><li><code>#了解#</code></li></ul><ol><li>[M] 微信开发者工具</li><li>[S] vsconsole</li></ol></li></ul><h3 id="编译-构建"><a href="#编译-构建" class="headerlink" title="编译&amp;构建"></a>编译&amp;构建</h3><ul><li>前端项目常用构建工具<ul><li><code>#了解#</code></li></ul><ol><li>[M] Webpack、Babel；</li><li>[S] Vite、Parcel、Rollup、TSC；</li><li>[P] EsBuild、Snowpack；</li></ol></li><li>Webpack 基本原理以及构建流程<ul><li><code>#熟练#</code> <code>#实现原理#</code></li></ul><ol><li>[M] Webpack 是一个静态模块打包工具；讲所需要的模块组合成一个或多个 bundles 用与浏览器、Node 或者 Electron 使用；</li><li>[S] 代码字符串 &gt; AST &gt; Transform &gt; AST(Low) &gt; 代码字符串；</li></ol></li><li>简单描述下 Vite 的特性原理，为何快？<ul><li><code>#熟练#</code> <code>#实现原理#</code></li></ul><ol><li>[S] Vite 在开发时采用 Esbuild 作为 模块构建器</li></ol></li></ul><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ul><li>常用的测试框架？<ul><li><code>#了解#</code></li></ul><ol><li>[M] UT：Jest、Mocha</li><li>[S] E2E：Selenium、Cypress、Puppeteer</li></ol></li></ul><h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><ul><li>前端项目如何构建一个标准包？<ul><li><code>#了解#</code></li></ul><ol><li>[S] 在配置的依赖均倒置，运行时通过宿主来提供环境注入（global 对象、script 提供 config）；</li></ol></li></ul><h3 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h3><ul><li>简单列出常用的前端数据监控的类库？<ul><li><code>#了解#</code></li></ul><ol><li>[S] @sentry&#x2F;react、fundebug、ARMS、umeng</li></ol></li><li>简单描述下前端数据采集及其基本原理？<ul><li><code>#了解#</code></li></ul><ol><li>[S] 数据采集通常分为：环境信息、性能信息、异常信息、业务信息（交互数据、业务异常）</li><li>[S] 事件委托</li></ol></li></ul><hr><h2 id="性能-安全（Performance-Security）"><a href="#性能-安全（Performance-Security）" class="headerlink" title="性能&amp;安全（Performance &amp; Security）"></a>性能&amp;安全（Performance &amp; Security）</h2><h3 id="性能指标"><a href="#性能指标" class="headerlink" title="性能指标"></a>性能指标</h3><ul><li>简单列出常用的前端 Web 应用的性能指标？<ul><li><code>#熟练#</code></li></ul><ol><li>[S] First Contentful Paint(FCP) 首次内容绘制、Largest Contentful Paint (LCP) 最大内容绘制、First Input Delay(FID) 首次输入延迟；</li><li>[P] First Paint(FP) 首次绘制、First Meaningful Paint(FMP) 首次有效绘制、Cumulative Layout Shift(CLS) 累积布局偏移、Time to Interactive(TTI) 可交互时间、DOMContentLoaded(DCL)、Load(L)；</li></ol></li><li>简单描述下性能指标的采集原理（exp. FCP、LCP、FID）？<ul><li><code>#精通#</code> <code>#性能优化#</code> <code>#实现原理#</code></li></ul><ol><li>[S] 通过 Performance Observer API 采集；</li><li>[S] 性能监测相关 API：Paint Timing、Event Timing、Navigation Timing、Paint Timing；</li></ol></li></ul><h3 id="性能评估"><a href="#性能评估" class="headerlink" title="性能评估"></a>性能评估</h3><ul><li>简单列出常用的 Web 应用性能评估（采集）工具？<ul><li><code>#了解#</code></li></ul><ol><li>[M] Chrome DevTools、React DevTools</li><li>[P] Lighthouse、WebPageTest、Relyzer</li></ol></li><li>如果使用 React 开发的页面响应慢，有那些检测手段？<ul><li><code>#了解#</code></li></ul><ol><li>[M] console.time、timeEnd 埋点</li><li>[M] 借助 React DevTools 可以查看每个组件的渲染和重绘耗时</li></ol></li></ul><h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><ul><li>常用的性能优化手段？<ul><li><code>#熟练#</code></li></ul><ol><li>[M] 代码压缩：Code Splitting、Tree-Shaking、Gzip</li><li>[M] 修改加载策略</li><li>[M] 执行自定义渲染</li><li>[S] 体验优化（加载动画、骨架图）</li><li>[S] DNS 预获取</li></ol></li><li>常见的 JS 代码压缩工具及其简单原理？<ul><li><code>#熟练#</code> <code>#性能优化#</code> <code>#页面优化#</code> <code>#构建优化#</code></li></ul><ol><li>[M] uglifyjs、terser</li></ol></li><li>简单描述下 Tree-Shaking 及其原理和使用建议？<ul><li><code>#熟练#</code> <code>#性能优化#</code> <code>#页面优化#</code></li></ul></li><li>常见的 JS 延迟加载方式？<ul><li><code>#熟练#</code></li></ul><ol><li>[M] <code>&lt;script defer/&gt;</code> defer 属性、<code>&lt;script async /&gt;</code> async 属性、动态创建 DOM、使用 setTimeout 延迟、JS 写在 DOM 文档底部</li></ol></li><li>微信小程序常用的优化手段？<ul><li><code>#熟练#</code></li></ul><ol><li>[M] 代码包大小优化分包，独立包，分包预下载；</li><li>[M] 首页渲染优化，预加载，骨架图避免白屏；</li><li>[M] 渲染优化，setData 增量更新，延迟加载，避免一个原子操作大量计算阻塞 ui；</li></ol></li><li>如何优化一个前端巨石应用（）；<ul><li><code>#熟练#</code> <code>#前端架构#</code> <code>#性能优化#</code></li><li>[M] Code Splitting、Lazy Loader；</li><li>[S] 微前端架构；</li></ul></li></ul><h3 id="源码安全"><a href="#源码安全" class="headerlink" title="源码安全"></a>源码安全</h3><ul><li>保护前端 JS 的源码的常见手段？<ul><li><code>#熟练#</code></li></ul><ol><li>[M] 代码压缩（uglifyjs）；</li><li>[M] 生产环境不得上传 SourceMap；</li><li>[S] 代码混淆 （Terser）；</li></ol></li><li>CSRF &#x2F; XSRF（跨站请求伪造）<ul><li><code>#熟练#</code></li></ul><ol><li>[S] HTTP 协议中使用 Referer 属性来确定请求来源进行过滤（禁止外域）</li><li>[S] 请求地址添加 token ，使黑客无法伪造用户请求</li><li>[S] HTTP 头自定义属性验证（类似上一条）</li><li>[S] 敏感操作显示验证方式：添加验证码、密码等</li></ol></li></ul><h3 id="Web-安全"><a href="#Web-安全" class="headerlink" title="Web 安全"></a>Web 安全</h3><hr><h2 id="工程化"><a href="#工程化" class="headerlink" title="工程化"></a>工程化</h2><h3 id="工程体系"><a href="#工程体系" class="headerlink" title="工程体系"></a>工程体系</h3><ul><li>前后端分离的本质？<ul><li><code>#熟练#</code></li></ul><ol><li>[M] 职责分明，将服务端业务逻辑和前端视觉进行分离，互设边界；</li><li>[M] 前端项目越来越复杂，需要规范流程和引入标准的工程体系。</li></ol></li></ul><h3 id="微前端"><a href="#微前端" class="headerlink" title="微前端"></a>微前端</h3><ul><li>业界常用的微前端框架？<ul><li><code>#了解#</code> <code>#前端框架#</code></li></ul><ol><li>[M] single-spa、蚂蚁 qiankun.js</li><li>[S] 京东 micro-app、字节 garfish</li><li>[P] modern.js、magix、飞冰 icestark、WidgetJS、ara framework、luigi、emp</li></ol></li><li>简单描述下 Qiankun 的工作原理？<ul><li><code>#熟练#</code></li></ul><ol><li>[M] single-spa、蚂蚁的 qiankun.js</li></ol></li><li>Qiankun 的子应用配置，为何需要构建 UMD 包？<ul><li><code>#熟练#</code></li></ul><ol><li>[M] 子应用 webpack entry 提供 <code>target:umd</code> 以及</li><li>[S] 子应用</li></ol></li><li>微前端框架常用的 CSS 隔离方式？<ul><li><code>#熟练#</code></li></ul><ol><li>[P] 自定义标签，以及标签 name 配合选择器</li></ol></li></ul><h3 id="低代码"><a href="#低代码" class="headerlink" title="低代码"></a>低代码</h3><ul><li>简单描述下对 JSON-Schema 协议的理解？</li><li>如何处理表单的关联逻辑？</li></ul><h3 id="Bundleless"><a href="#Bundleless" class="headerlink" title="Bundleless"></a>Bundleless</h3><h3 id="CI-CD"><a href="#CI-CD" class="headerlink" title="CI\CD"></a>CI\CD</h3><ul><li>简单列出前端常用的构建平台？<ul><li><code>#了解#</code></li></ul><ol><li>[M] Jenkins、Travis CI</li></ol></li></ul><h3 id="综合能力"><a href="#综合能力" class="headerlink" title="综合能力"></a>综合能力</h3>]]></content>
      
      
      
        <tags>
            
            <tag> article </tag>
            
            <tag> frontend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Regular Expression Cheatsheet</title>
      <link href="/2021/regular-expression-cheatsheet/"/>
      <url>/2021/regular-expression-cheatsheet/</url>
      
        <content type="html"><![CDATA[<h1 id="Regular-Expression-Cheatsheet"><a href="#Regular-Expression-Cheatsheet" class="headerlink" title="Regular Expression Cheatsheet"></a>Regular Expression Cheatsheet</h1><h2 id="Character-classes"><a href="#Character-classes" class="headerlink" title="Character classes"></a>Character classes</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.  any character except newline</span><br><span class="line">\w\d\s  word, digit, whitespace</span><br><span class="line">\W\D\Snot word, digit, whitespace</span><br><span class="line">[abc]any of a, b, or c</span><br><span class="line">[^abc]not a, b, or c</span><br><span class="line">[a-g]character between a &amp; g</span><br></pre></td></tr></table></figure><h2 id="Anchors"><a href="#Anchors" class="headerlink" title="Anchors"></a>Anchors</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">^abc$ <span class="comment">//start/end of the string</span></span><br><span class="line">\b\B <span class="comment">//word, not-word boundary</span></span><br></pre></td></tr></table></figure><h2 id="Escaped-characters"><a href="#Escaped-characters" class="headerlink" title="Escaped characters"></a>Escaped characters</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\.\*\\  <span class="comment">// escaped special characters</span></span><br><span class="line">\t\n\r  <span class="comment">// tab, linefeed, carriage return</span></span><br></pre></td></tr></table></figure><h2 id="Groups-Lookaround"><a href="#Groups-Lookaround" class="headerlink" title="Groups &amp; Lookaround"></a>Groups &amp; Lookaround</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(abc)capture group</span><br><span class="line">\1 backreference to group #1</span><br><span class="line">(?:abc)non-capturing group</span><br><span class="line">(?=abc)positive lookahead</span><br><span class="line">(?!abc)negative lookahead</span><br></pre></td></tr></table></figure><h2 id="Quantifiers-Alternation"><a href="#Quantifiers-Alternation" class="headerlink" title="Quantifiers &amp; Alternation"></a>Quantifiers &amp; Alternation</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a*a+a?0 or more, 1 or more, 0 or 1</span><br><span class="line">a&#123;5&#125;a&#123;2,&#125;exactly five, two or more</span><br><span class="line">a&#123;1,3&#125;between one &amp; three</span><br><span class="line">a+?a&#123;2,&#125;?match as few as possible</span><br><span class="line">ab|cdmatch ab or cd</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> lang/regexp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MacOS 装机 v1.0</title>
      <link href="/2021/mac-install/"/>
      <url>/2021/mac-install/</url>
      
        <content type="html"><![CDATA[<h1 id="MacOS-装机-v1-0"><a href="#MacOS-装机-v1-0" class="headerlink" title="MacOS 装机 v1.0"></a>MacOS 装机 v1.0</h1><blockquote><p>「Level ｜ Type ｜ Origin」：建议程度｜类型｜安装源</p></blockquote><ul><li>Level（建议程度）<ul><li>M（Must） 必须</li><li>S（Shall） 要</li><li>R（Recommend） 推荐</li></ul></li><li>Type（类型）<ul><li>Env（Lang、CLI、Global、REPL、Compiler、Tool、PM）</li><li>APP（Desktop、GUI Client、IDE、Product）</li><li>VM（Runtime、VM、Container）</li><li>Extension（Plugin、Configuration）</li></ul></li><li>Origin（安装源）<ul><li>App Store</li><li>Github</li><li>Official Website</li><li>Homebrew（System PM）</li><li>Docker Hub</li><li>Package Manager（MVN、NPM、Inner Registry）</li></ul></li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol><li>通用环境</li><li>场景开发（Frontend、Backend、iOS、Android、Service）</li><li>其他（WebApp、Extension、App）</li></ol><h2 id="通用环境"><a href="#通用环境" class="headerlink" title="通用环境"></a>通用环境</h2><ul><li>Brew「M ｜ Env ｜ Github or Run Shell Scripts」</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># install homebrew</span></span><br><span class="line">/bin/bash -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># if network error(403), download shell script</span></span><br><span class="line">sh install.sh</span><br><span class="line">/bin/bash -c install.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># brew 切中科大镜像（required git）</span></span><br><span class="line"><span class="built_in">cd</span> <span class="string">&quot;<span class="subst">$(brew --repo)</span>&quot;</span></span><br><span class="line">git remote set-url origin git://mirrors.ustc.edu.cn/brew.git</span><br><span class="line"><span class="built_in">cd</span> <span class="string">&quot;<span class="subst">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core&quot;</span></span><br><span class="line">git remote set-url origin git://mirrors.ustc.edu.cn/homebrew-core.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># download cache folder(can remove all)</span></span><br><span class="line"><span class="built_in">ls</span> ~/Library/Caches/Homebrew/downloads</span><br></pre></td></tr></table></figure><ul><li>Git「M ｜ CLI ｜ Brew or Xcode」</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global alias.lg <span class="string">&quot;log --color --graph --pretty=format:&#x27;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;\%an&gt;%Creset&#x27; --abbrev-commit --&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">brew install git <span class="comment"># or install xcode(include git)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># configuration</span></span><br><span class="line">git config --global user.name <span class="string">&quot;***&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;***&quot;</span></span><br><span class="line"></span><br><span class="line">git config --global alias.lg \&quot;<span class="built_in">log</span> --color --graph --pretty=format:\&#x27;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;\%an&gt;%Creset<span class="string">&#x27; --abbrev-commit --&quot;</span></span><br></pre></td></tr></table></figure><ul><li>Chrome「M ｜ Desktop ｜ Brew or <a href="https://google.cn/chrome%E3%80%8D">https://google.cn/chrome」</a></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">brew install --cask google-chrome</span><br><span class="line">brew install --cask google-chrome —appdir=/Applications Chrome</span><br><span class="line"></span><br><span class="line"><span class="comment"># sign in and sync you setting &amp; extension &amp; bookmark</span></span><br></pre></td></tr></table></figure><ul><li>Visual Studio Code「S ｜ IDE ｜ Brew or <a href="https://code.visualstudio.com」/">https://code.visualstudio.com」</a></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">brew install --cask visual-studio-code</span><br><span class="line"></span><br><span class="line"><span class="comment"># ⇧ + ⌘ + p &gt; shell command: install &#x27;code....</span></span><br><span class="line">code --version</span><br><span class="line"></span><br><span class="line"><span class="comment"># sign in and sync you setting &amp; extension</span></span><br></pre></td></tr></table></figure><ul><li>Docker「S ｜ Env ｜ Brew」</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># gui + cli</span></span><br><span class="line">brew install --cask docker</span><br></pre></td></tr></table></figure><ul><li>iTerm2「R ｜ IDE ｜ Brew」</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">brew install --cask iterm2</span><br><span class="line"></span><br><span class="line"><span class="comment"># extensions</span></span><br></pre></td></tr></table></figure><ul><li>Oh My Zsh「R ｜ CLI ｜ Github or Run Shell」</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure><ul><li>ClashX「R ｜ CLI ｜ Github」</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">brew install --cask clashx</span><br><span class="line"></span><br><span class="line"><span class="comment"># inject your subscribe &amp; token</span></span><br></pre></td></tr></table></figure><h3 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h3><ul><li>Command Line「S ｜ CLI ｜ Brew」</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ssh &amp; ssl</span></span><br><span class="line">brew install telnet</span><br><span class="line">brew install ca-certificates</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">compress</span></span><br><span class="line">brew install --cask rar # may be blocked, allow anyway</span><br><span class="line">brew install unzip</span><br><span class="line">brew install zstd</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">network</span></span><br><span class="line">brew install htop # top replacement</span><br><span class="line">brew install procs # ps replacement</span><br><span class="line">brew install dog # dig replacement</span><br><span class="line">brew install curl</span><br><span class="line">brew install httpie # curl replacement</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">folder</span></span><br><span class="line">brew install cloc # code analysis</span><br><span class="line">brew install exa # ls replacement</span><br><span class="line">brew install rename</span><br><span class="line">brew install tree</span><br><span class="line">brew install broot # tree replacement, overview</span><br><span class="line">brew install zoxide # cd replacement,</span><br><span class="line">brew install bat # cat replacement, line number &amp; highlight</span><br><span class="line">brew install fx # json viewer, line number &amp; highlight</span><br><span class="line">brew install hexyl # hex viewer</span><br><span class="line">brew install diff-so-fancy # diff-highlight</span><br><span class="line">brew install fd # find replacement</span><br><span class="line">brew install ripgrep # grep replacement</span><br><span class="line">brew install mcfly # ctrl-r replacement</span><br><span class="line">brew install choose # cut replacement</span><br><span class="line">brew install duf # du replacement</span><br><span class="line">brew install ncdu # du replacement</span><br></pre></td></tr></table></figure><ul><li><p>Xnip「S ｜ Global Tools ｜ App Store」</p></li><li><p>Alfred「S ｜ GUI Client ｜ App Store」</p></li><li><p>Postman「R ｜ GUI Client ｜ App Store or Brew」</p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew install --cask postman</span><br><span class="line"><span class="comment"># sign in and sync your settings</span></span><br></pre></td></tr></table></figure><ul><li>Sublime Merge「R ｜ GUI Client ｜ Brew」</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install --cask sublime-merge</span><br></pre></td></tr></table></figure><ul><li>DevToys「R ｜ GUI Client ｜ Github &amp; Brew」</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install --cask devtoys</span><br></pre></td></tr></table></figure><ul><li>SnippetsLab「R ｜ GUI Client ｜ App Store」</li><li>Terminus「R ｜ GUI Client ｜ App Store」</li><li>Git Streaks「R ｜ GUI Client ｜ App Store」</li><li>SwitchHosts「R ｜ Desktop ｜ GitHub」</li><li>OSS Browser「R ｜ GUI Client ｜ GitHub」</li><li>Apifox「R ｜ GUI Client ｜<a href="https://apifox.cn」/">https://apifox.cn」</a></li></ul><h2 id="场景开发"><a href="#场景开发" class="headerlink" title="场景开发"></a>场景开发</h2><h3 id="Frontend（Web、小程序、Hybrid）"><a href="#Frontend（Web、小程序、Hybrid）" class="headerlink" title="Frontend（Web、小程序、Hybrid）"></a>Frontend（Web、小程序、Hybrid）</h3><ul><li>NVM「M ｜ PM ｜ Brew」</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># nvm</span></span><br><span class="line">brew install nvm</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> ~/.nvm</span><br><span class="line">vi ~/.zshrc <span class="comment"># add</span></span><br><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">&quot;<span class="variable">$HOME</span>/.nvm&quot;</span></span><br><span class="line">    [ -s <span class="string">&quot;<span class="subst">$(brew --prefix)</span>/opt/nvm/nvm.sh&quot;</span> ] &amp;&amp; \. <span class="string">&quot;<span class="subst">$(brew --prefix)</span>/opt/nvm/nvm.sh&quot;</span> <span class="comment"># This loads nvm</span></span><br><span class="line">    [ -s <span class="string">&quot;<span class="subst">$(brew --prefix)</span>/opt/nvm/etc/bash_completion.d/nvm&quot;</span> ] &amp;&amp; \. <span class="string">&quot;<span class="subst">$(brew --prefix)</span>/opt/nvm/etc/bash_completion.d/nvm&quot;</span> <span class="comment"># add this to ~/.zshrc or .bashrc</span></span><br></pre></td></tr></table></figure><ul><li>Node「M ｜ Env ｜ NVM」</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># node LTS</span></span><br><span class="line">nvm install 12 <span class="comment"># 12.22.12</span></span><br><span class="line">nvm install 14 <span class="comment"># 14.19.3</span></span><br><span class="line">nvm install 16 <span class="comment"># 16.15.0</span></span><br><span class="line">nvm install 18 <span class="comment"># latest</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># nvm set default(new terminal session keeping)</span></span><br><span class="line">nvm <span class="built_in">alias</span> default ** <span class="comment"># lts version, install first</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># npmrc &amp; registry</span></span><br><span class="line">npm login --registry=https://registry.npmjs.com</span><br><span class="line">npm login --registry=https://registry.npmmirror.com</span><br><span class="line">npm <span class="built_in">set</span> registry https://registry.npmmirror.com <span class="comment"># taobao源</span></span><br><span class="line">npm adduser</span><br><span class="line"></span><br><span class="line"><span class="comment"># use npx change registry</span></span><br><span class="line">npx nrm use taobao</span><br><span class="line">npx nrm use npm</span><br><span class="line"></span><br><span class="line"><span class="comment"># deno</span></span><br><span class="line">brew install deno</span><br><span class="line"></span><br><span class="line"><span class="comment"># other pm</span></span><br><span class="line">brew install pnpm</span><br><span class="line">brew install yarn</span><br></pre></td></tr></table></figure><ul><li>TypeScript「S ｜ Lang ｜ Brew」</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install typescript</span><br></pre></td></tr></table></figure><h4 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h4><ul><li>Taro「R ｜ Lang ｜ Brew」</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g @tarojs/cli <span class="comment"># use npx @tarojs/cli to replace</span></span><br></pre></td></tr></table></figure><h4 id="桌面客户端"><a href="#桌面客户端" class="headerlink" title="桌面客户端"></a>桌面客户端</h4><ul><li>Electron「R ｜ Lang ｜ Brew」</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm i electron-rebuild -g <span class="comment"># use npx to replace</span></span><br><span class="line">npm i node-gyp -g <span class="comment"># use npx to replace</span></span><br><span class="line"></span><br><span class="line">brew install cmake <span class="comment"># cross platform</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mirror, better to write in your project .npmrc</span></span><br><span class="line">npm config <span class="built_in">set</span> electron_mirror https://mirrors.huaweicloud.com/electron/</span><br></pre></td></tr></table></figure><h3 id="Backend（VM、WebServer、DB、Middleware）"><a href="#Backend（VM、WebServer、DB、Middleware）" class="headerlink" title="Backend（VM、WebServer、DB、Middleware）"></a>Backend（VM、WebServer、DB、Middleware）</h3><ul><li>Java「M ｜ Lang ｜ Brew」</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">brew install jenv</span><br><span class="line"></span><br><span class="line"><span class="comment"># zulu OpenJDK</span></span><br><span class="line">brew tap homebrew/cask-versions</span><br><span class="line">brew install --cask zulu11</span><br><span class="line"></span><br><span class="line"><span class="comment"># pm(versino manage)</span></span><br><span class="line">brew install maven</span><br><span class="line"></span><br><span class="line"><span class="comment"># mvn registry maven.aliyun.com</span></span><br></pre></td></tr></table></figure><ul><li>Python「S ｜ Lang ｜ Brew」</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">brew search python</span><br><span class="line">brew list | grep python <span class="comment">#  python@3.7 python@3.8 python@3.9</span></span><br><span class="line"></span><br><span class="line">brew switch python 3.9</span><br></pre></td></tr></table></figure><ul><li>Rust「R ｜ Lang ｜ rustup.rs or Brew」</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># offical</span></span><br><span class="line">curl https://sh.rustup.rs -sSf | sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">brew install rust</span><br><span class="line">brew install cargo-c</span><br></pre></td></tr></table></figure><h3 id="Android-iOS"><a href="#Android-iOS" class="headerlink" title="Android &amp; iOS"></a>Android &amp; iOS</h3><ul><li>Android Studio「M ｜ CLI ｜<a href="https://developer.android.com/studio%E3%80%8D">https://developer.android.com/studio」</a></li><li>Android SDK &amp; AVD「M ｜ CLI ｜ Brew」</li><li>Android Platform Tools</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install --cask android-platform-tools</span><br></pre></td></tr></table></figure><ul><li>Kotlin「S ｜ Lang ｜ Brew」</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install kotlin</span><br></pre></td></tr></table></figure><ul><li><p>Xcode「M ｜ Env ｜ App Store」</p></li><li><p>CocoaPods「M ｜ CLI ｜ Brew」</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install cocoapods</span><br></pre></td></tr></table></figure><ul><li>React Native「R ｜ Lang ｜ NPM」</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">brew install watchman</span><br><span class="line"></span><br><span class="line"><span class="comment"># android</span></span><br><span class="line">brew tap homebrew/cask-versions</span><br><span class="line">brew install --cask zulu11</span><br><span class="line"></span><br><span class="line"><span class="comment"># init</span></span><br><span class="line">npx react-native init AwesomeProject</span><br></pre></td></tr></table></figure><ul><li>Dart &amp; Flutter「R ｜ Lang ｜ NPM」</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dart</span></span><br><span class="line">brew tap dart-lang/dart</span><br><span class="line">brew install dart</span><br><span class="line"></span><br><span class="line"><span class="comment"># flutter(include dart)</span></span><br><span class="line">brew install --cask flutter</span><br><span class="line"></span><br><span class="line"><span class="comment"># view https://dartpad.dev, online playground</span></span><br></pre></td></tr></table></figure><ul><li><p>Genymotion「S ｜ CLI ｜<a href="https://www.genymotion.com」/">https://www.genymotion.com」</a></p></li><li><p>Debugging「S ｜ CLI ｜ Brew」</p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Charles</span></span><br><span class="line">brew install --cask charles</span><br><span class="line"><span class="comment"># Flipper(https://fbflipper.com)</span></span><br><span class="line">brew install --cask flipper</span><br></pre></td></tr></table></figure><h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><blockquote><p>使用 Docker 来管理常用服务（应用、中间件）可以保证环境的纯净，以及移植性</p></blockquote><ul><li>Docker Images「R ｜ Env ｜ Docker」</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mongo</span></span><br><span class="line">docker pull mongo</span><br><span class="line">docker pull mongo-express # web-based</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mysql</span></span><br><span class="line">docker pull mysql:latest # 8.x</span><br><span class="line">docker pull mysql:5.7</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">redis</span></span><br><span class="line">docker pull redis</span><br><span class="line">docker pull bitnami/redis</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">sqlite3</span></span><br><span class="line">docker pull nouchka/sqlite3</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">memcached</span></span><br><span class="line">docker pull memcached</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">zookeeper</span></span><br><span class="line">docker pull zookeeper</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">kafka</span></span><br><span class="line">docker pull bitnami/kafka</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">jenkins</span></span><br><span class="line">docker pull jenkins</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">sentry</span></span><br><span class="line">docker pull sentry</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">tomcat</span></span><br><span class="line">docker pull tomcat</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">server</span></span><br><span class="line">brew install nginx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">apache</span></span><br><span class="line">docker pull httpd</span><br></pre></td></tr></table></figure><ul><li>GUI Client「R ｜ GUI Client ｜ Brew」</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Sequel Ace(<span class="keyword">for</span> mysql)</span></span><br><span class="line">brew install --cask sequel-ace</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">MongoDB Compress(mongo)</span></span><br><span class="line">brew install --cask mongodb-compass-isolated-edition</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">MongoDB Realm Studio(<span class="keyword">for</span> realm)</span></span><br><span class="line">brew install --cask mongodb-realm-studio</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">SQLite Broswer</span></span><br><span class="line">brew install --cask db-browser-for-sqlite</span><br></pre></td></tr></table></figure><ul><li>Medis「R ｜ GUI Client ｜ App Store」</li></ul><h2 id="其他（WebApp、Extension、App）"><a href="#其他（WebApp、Extension、App）" class="headerlink" title="其他（WebApp、Extension、App）"></a>其他（WebApp、Extension、App）</h2><h3 id="WebApp"><a href="#WebApp" class="headerlink" title="WebApp"></a>WebApp</h3><ul><li>Excalidraw「S ｜ Tools ｜<a href="https://excalidraw.com」/">https://excalidraw.com」</a></li><li>ProcessOn「S ｜ Tools ｜<a href="https://processon.com」/">https://processon.com」</a></li><li>Miro「S ｜ Tools ｜<a href="https://miro.com」/">https://miro.com」</a></li><li>小画桌协同白板「R ｜ Tools ｜<a href="https://xiaohuazhuo.com」/">https://xiaohuazhuo.com」</a></li></ul><h3 id="Extension"><a href="#Extension" class="headerlink" title="Extension"></a>Extension</h3><ul><li><p>EditThisCookie「S ｜ Chrome Ext ｜ Chrome WebStore」</p></li><li><p>PrettyPrint「S ｜ Chrome Ext ｜ Chrome WebStore」</p></li><li><p>Octotree「S ｜ Chrome Ext ｜ Chrome WebStore」</p></li><li><p>Gitlab tree「S ｜ Chrome Ext ｜ Chrome WebStore」</p></li><li><p>SingleFile「S ｜ Chrome Ext ｜ Chrome WebStore」</p></li><li><p>Vimium「S ｜ Chrome Ext ｜ Chrome WebStore」</p></li><li><p>Logs Explorer「R ｜ Docker Ext ｜ Docker Marketplace」</p></li><li><p>Debugger for Chrome「R ｜ Code Ext ｜ Code」</p></li><li><p>EditorConfig for VS Code「R ｜ Code Ext ｜ Code」</p></li><li><p>ENV「R ｜ Code Ext ｜ Code」</p></li><li><p>Git History「R ｜ Code Ext ｜ Code」</p></li><li><p>GitHub Copilot「R ｜ Code Ext ｜ Code」</p></li><li><p>MarkdownLint「R ｜ Code Ext ｜ Code」</p></li><li><p>Material Icon Theme「R ｜ Code Ext ｜ Code」</p></li><li><p>Prettier「R ｜ Code Ext ｜ Code」</p></li><li><p>SVG Viewer「R ｜ Code Ext ｜ Code」</p></li><li><p>TODO Highlight「R ｜ Code Ext ｜ Code」</p></li><li><p>Path Intellisense「R ｜ Code Ext ｜ Code」</p></li></ul><h3 id="App"><a href="#App" class="headerlink" title="App"></a>App</h3><h4 id="通讯"><a href="#通讯" class="headerlink" title="通讯"></a>通讯</h4><ul><li>WeChat「S ｜ Desktop ｜ App Store」</li><li>DingTalk「R ｜ Desktop ｜ App Store」</li><li>WeCom「R ｜ Desktop ｜ App Store」</li></ul><h4 id="字典-文档-记录"><a href="#字典-文档-记录" class="headerlink" title="字典 &amp; 文档 &amp; 记录"></a>字典 &amp; 文档 &amp; 记录</h4><ul><li>Eudic「S ｜ Desktop ｜ App Store」</li><li>Bear「S ｜ Desktop ｜<a href="https://bear.app」/">https://bear.app」</a></li><li>aDrive「R ｜ Desktop ｜<a href="https://aliyundrive.com」/">https://aliyundrive.com」</a></li><li>MindNode「R ｜ Desktop ｜ App Store」</li></ul><h4 id="电脑磁盘整理"><a href="#电脑磁盘整理" class="headerlink" title="电脑磁盘整理"></a>电脑磁盘整理</h4><ul><li>CleanMyMac X「S ｜ Desktop ｜<a href="https://macpaw.com」/">https://macpaw.com」</a></li></ul><h3 id="Brew-Bundle"><a href="#Brew-Bundle" class="headerlink" title="Brew Bundle"></a>Brew Bundle</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">Using dart-lang/dart</span><br><span class="line">Using homebrew/bundle</span><br><span class="line">Using homebrew/cask</span><br><span class="line">Using homebrew/core</span><br><span class="line">Using homebrew/services</span><br><span class="line">Using broot</span><br><span class="line">Using cloc</span><br><span class="line">Using cmake</span><br><span class="line">Using cocoapods</span><br><span class="line">Using curl</span><br><span class="line">Using exa</span><br><span class="line">Using ideviceinstaller</span><br><span class="line">Using ios-deploy</span><br><span class="line">Using jenv</span><br><span class="line">Using kotlin</span><br><span class="line">Using nvm</span><br><span class="line">Using rename</span><br><span class="line">Using rust</span><br><span class="line">Using telnet</span><br><span class="line">Using tree</span><br><span class="line">Using unzip</span><br><span class="line">Using zoxide</span><br><span class="line">Using dart-lang/dart/dart</span><br><span class="line">Using android-platform-tools</span><br><span class="line">Using charles</span><br><span class="line">Using clashx</span><br><span class="line">Using db-browser-for-sqlite</span><br><span class="line">Using devtoys</span><br><span class="line">Using docker</span><br><span class="line">Using flipper</span><br><span class="line">Using google-chrome</span><br><span class="line">Using iterm2</span><br><span class="line">Using mongodb-compass</span><br><span class="line">Using mongodb-realm-studio</span><br><span class="line">Using postman</span><br><span class="line">Using rar</span><br><span class="line">Using redis-pro</span><br><span class="line">Using sequel-ace</span><br><span class="line">Using sublime-merge</span><br><span class="line">Using visual-studio-code</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> os </tag>
            
            <tag> article </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unix 哲学</title>
      <link href="/2021/unix-philosophy/"/>
      <url>/2021/unix-philosophy/</url>
      
        <content type="html"><![CDATA[<h1 id="Unix-哲学"><a href="#Unix-哲学" class="headerlink" title="Unix 哲学"></a>Unix 哲学</h1><blockquote><p>拿不准就穷举 — Ken Thompson（Unix \ Go 作者之一）</p></blockquote><ul><li>模块原则(Modularity): 写简单的程序，并用好的接口连接它们</li><li>清晰原则(Clarity): 清楚透明的算法比“高明”的算法更好</li><li>组装原则(Composition): 写能够跟其他程序一起工作的程序</li><li>隔离原则(Separation): 分离接口（使用引擎的方法）和引擎</li><li>简单原则(Simplicity): 尽量简化算法，不到必要的时候不要增加复杂度</li><li>简约原则(Parsimony): 只要在必要的时候才写大型程序，通常小程序已经足够了</li><li>透明原则(Transparency): 写容易测试和纠错的代码</li><li>健壮原则(Robustness): 这是简单和简约的副产物</li><li>表达原则(Representation): 用数据结构表达逻辑，而不是用过程表达逻辑</li><li>传统原则(Least) Surprise: 用最常识的方法设计借口</li><li>安静原则(Silence): 如果程序没什么特别事情要表达，应该保持安静！</li><li>经济原则(Economy): 程序员的时间比机器的时间更加宝贵</li><li>生成原则(Generation): 尽量写代码来生成代码，而不是手工输入代码</li><li>修复原则(Repair): 当程序出现异常，应该明确的抛出异常，而且约早越好！</li><li>优化原则(Optimization): 先让程序工作，在考虑优化的事情</li><li>多样性原则(Diversity): 一个问题有很多好的解决方案，没有最好的解决方案！</li><li>拓展性原则(Extensible): 设计程序时应该考虑到未来的拓展，因为未来比你想象来的早</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> article </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git Cli CheatSheet</title>
      <link href="/2020/git-cli-cheatsheet/"/>
      <url>/2020/git-cli-cheatsheet/</url>
      
        <content type="html"><![CDATA[<h1 id="Git-Cli-CheatSheet"><a href="#Git-Cli-CheatSheet" class="headerlink" title="Git Cli CheatSheet"></a>Git Cli CheatSheet</h1><p>一、新建代码库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在当前目录新建一个Git代码库</span></span><br><span class="line">$ git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个目录，将其初始化为Git代码库</span></span><br><span class="line">$ git init [project-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载一个项目和它的整个代码历史</span></span><br><span class="line">$ git <span class="built_in">clone</span> [url]</span><br></pre></td></tr></table></figure><p>二、配置<br>Git的设置文件为.gitconfig</p><blockquote><p>它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）<br>全局配置: <code>~/.gitconfig</code> ，项目配置: <code>$/.git/config</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示当前的Git配置</span></span><br><span class="line">$ git config --list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑Git配置文件</span></span><br><span class="line">$ git config -e [--global]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置提交代码时的用户信息</span></span><br><span class="line">$ git config [--global] user.name <span class="string">&quot;[name]&quot;</span></span><br><span class="line">$ git config [--global] user.email <span class="string">&quot;[email address]&quot;</span></span><br></pre></td></tr></table></figure><p>三、增加&#x2F;删除文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加指定文件到暂存区</span></span><br><span class="line">$ git add [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加指定目录到暂存区，包括子目录</span></span><br><span class="line">$ git add [<span class="built_in">dir</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加当前目录的所有文件到暂存区</span></span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加每个变化前，都会要求确认</span></span><br><span class="line"><span class="comment"># 对于同一个文件的多处变化，可以实现分次提交</span></span><br><span class="line">$ git add -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除工作区文件，并且将这次删除放入暂存区</span></span><br><span class="line">$ git <span class="built_in">rm</span> [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class="line">$ git <span class="built_in">rm</span> --cached [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改名文件，并且将这个改名放入暂存区</span></span><br><span class="line">$ git <span class="built_in">mv</span> [file-original] [file-renamed]</span><br></pre></td></tr></table></figure><p>四、代码提交</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提交暂存区到仓库区</span></span><br><span class="line">$ git commit -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交暂存区的指定文件到仓库区</span></span><br><span class="line">$ git commit [file1] [file2] ... -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交工作区自上次commit之后的变化，直接到仓库区</span></span><br><span class="line">$ git commit -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交时显示所有diff信息</span></span><br><span class="line">$ git commit -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用一次新的commit，替代上一次提交</span></span><br><span class="line"><span class="comment"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span><br><span class="line">$ git commit --amend -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重做上一次commit，并包括指定文件的新变化</span></span><br><span class="line">$ git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure><p>五、分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出所有本地分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出所有远程分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -r</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出所有本地分支和远程分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -a</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建一个分支，但依然停留在当前分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch [branch-name]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建一个分支，并切换到该分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout -b [branch]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建一个分支，指向指定commit</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch [branch] [commit]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch --track [branch] [remote-branch]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到指定分支，并更新工作区</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout [branch-name]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到上一个分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout -</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">建立追踪关系，在现有分支与指定的远程分支之间</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch --set-upstream [branch] [remote-branch]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">合并指定分支到当前分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git merge [branch]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">选择一个commit，合并进当前分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git cherry-pick [commit]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -d [branch-name]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除远程分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push origin --delete [branch-name]</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -dr [remote/branch]</span></span><br></pre></td></tr></table></figure><p>六、标签</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有tag</span></span><br><span class="line">$ git tag</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个tag在当前commit</span></span><br><span class="line">$ git tag [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个tag在指定commit</span></span><br><span class="line">$ git tag [tag] [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除本地tag</span></span><br><span class="line">$ git tag -d [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程tag</span></span><br><span class="line">$ git push origin :refs/tags/[tagName]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看tag信息</span></span><br><span class="line">$ git show [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交指定tag</span></span><br><span class="line">$ git push [remote] [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交所有tag</span></span><br><span class="line">$ git push [remote] --tags</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，指向某个tag</span></span><br><span class="line">$ git checkout -b [branch] [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从远程分支老到本地并创建本地新分支</span></span><br><span class="line">$ git checkout -b [[branch]] origin/[[branch]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交本地分支到远程（创建新远程分支）</span></span><br><span class="line">$ git push --set-upstream origin [[branch]]</span><br></pre></td></tr></table></figure><p>七、查看信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示有变更的文件</span></span><br><span class="line">$ git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的版本历史</span></span><br><span class="line">$ git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示commit历史，以及每次commit发生变更的文件</span></span><br><span class="line">$ git <span class="built_in">log</span> --<span class="built_in">stat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索提交历史，根据关键词</span></span><br><span class="line">$ git <span class="built_in">log</span> -S [keyword]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个commit之后的所有变动，每个commit占据一行</span></span><br><span class="line">$ git <span class="built_in">log</span> [tag] HEAD --pretty=format:%s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件</span></span><br><span class="line">$ git <span class="built_in">log</span> [tag] HEAD --grep feature</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个文件的版本历史，包括文件改名</span></span><br><span class="line">$ git <span class="built_in">log</span> --follow [file]</span><br><span class="line">$ git whatchanged [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件相关的每一次diff</span></span><br><span class="line">$ git <span class="built_in">log</span> -p [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示过去5次提交</span></span><br><span class="line">$ git <span class="built_in">log</span> -5 --pretty --oneline</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有提交过的用户，按提交次数排序</span></span><br><span class="line">$ git shortlog -sn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件是什么人在什么时间修改过</span></span><br><span class="line">$ git blame [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和工作区的差异</span></span><br><span class="line">$ git diff</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和上一个commit的差异</span></span><br><span class="line">$ git diff --cached [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示工作区与当前分支最新commit之间的差异</span></span><br><span class="line">$ git diff HEAD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示两次提交之间的差异</span></span><br><span class="line">$ git diff [first-branch]...[second-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示今天你写了多少行代码</span></span><br><span class="line">$ git diff --shortstat <span class="string">&quot;@&#123;0 day ago&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交的元数据和内容变化</span></span><br><span class="line">$ git show [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交发生变化的文件</span></span><br><span class="line">$ git show --name-only [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交时，某个文件的内容</span></span><br><span class="line">$ git show [commit]:[filename]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的最近几次提交</span></span><br><span class="line">$ git reflog</span><br></pre></td></tr></table></figure><p>八、远程同步</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载远程仓库的所有变动</span></span><br><span class="line">$ git fetch [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有远程仓库</span></span><br><span class="line">$ git remote -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个远程仓库的信息</span></span><br><span class="line">$ git remote show [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加一个新的远程仓库，并命名</span></span><br><span class="line">$ git remote add [shortname] [url]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取回远程仓库的变化，并与本地分支合并</span></span><br><span class="line">$ git pull [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传本地指定分支到远程仓库</span></span><br><span class="line">$ git push [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class="line">$ git push [remote] --force</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送所有分支到远程仓库</span></span><br><span class="line">$ git push [remote] --all</span><br></pre></td></tr></table></figure><p>九、撤销</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 恢复暂存区的指定文件到工作区</span></span><br><span class="line">$ git checkout [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复某个commit的指定文件到暂存区和工作区</span></span><br><span class="line">$ git checkout [commit] [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复暂存区的所有文件到工作区</span></span><br><span class="line">$ git checkout .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span><br><span class="line">$ git reset [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区与工作区，与上一次commit保持一致</span></span><br><span class="line">$ git reset --hard</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></span><br><span class="line">$ git reset [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></span><br><span class="line">$ git reset --hard [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span><br><span class="line">$ git reset --keep [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个commit，用来撤销指定commit</span></span><br><span class="line"><span class="comment"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></span><br><span class="line">$ git revert [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暂时将未提交的变化移除，稍后再移入</span></span><br><span class="line">$ git stash</span><br><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure><p>十、其他</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成一个可供发布的压缩包</span></span><br><span class="line">$ git archive</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> cheatsheet </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Command Line for Linux</title>
      <link href="/2020/command-line-for-linux/"/>
      <url>/2020/command-line-for-linux/</url>
      
        <content type="html"><![CDATA[<h1 id="Command-Line-for-Linux"><a href="#Command-Line-for-Linux" class="headerlink" title="Command Line for Linux"></a>Command Line for Linux</h1><blockquote><p>常用命令行</p></blockquote><h2 id="Folder-operation"><a href="#Folder-operation" class="headerlink" title="Folder operation"></a>Folder operation</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> <span class="comment">#创建一个目录</span></span><br><span class="line"><span class="built_in">rmdir</span> <span class="comment"># 删除一个目录</span></span><br><span class="line">mvdir <span class="comment"># 移动或重命名一个目录</span></span><br><span class="line"><span class="built_in">cd</span> <span class="comment"># 改变当前目录</span></span><br><span class="line"><span class="built_in">pwd</span> <span class="comment"># 显示当前目录的路径名</span></span><br><span class="line"><span class="built_in">ls</span> <span class="comment"># 显示当前目录的内容</span></span><br><span class="line">dircmp <span class="comment"># 比较两个目录的内容</span></span><br></pre></td></tr></table></figure><h2 id="File-Operation"><a href="#File-Operation" class="headerlink" title="File Operation"></a>File Operation</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> <span class="comment"># 显示或链接文件</span></span><br><span class="line">pg <span class="comment"># 分页格式化显示文件内容</span></span><br><span class="line">more <span class="comment"># 分屏显示文件内容</span></span><br><span class="line"><span class="built_in">od</span> <span class="comment"># 显示非文本文件的内容</span></span><br><span class="line"><span class="built_in">cp</span> <span class="comment"># 复制文件或目录</span></span><br><span class="line"><span class="built_in">rm</span> <span class="comment"># 删除文件或目录</span></span><br><span class="line"><span class="built_in">mv</span> <span class="comment"># 改变文件或所在目录</span></span><br><span class="line"><span class="built_in">ln</span> <span class="comment"># 联接文件</span></span><br><span class="line">find <span class="comment"># 使用匹配表达式查找文件</span></span><br><span class="line">file <span class="comment"># 显示文件类型</span></span><br><span class="line">open <span class="comment"># 使用默认的程序打开文件</span></span><br></pre></td></tr></table></figure><h2 id="Selection-Operation"><a href="#Selection-Operation" class="headerlink" title="Selection Operation"></a>Selection Operation</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">head</span> <span class="comment"># 显示文件的最初几行</span></span><br><span class="line"><span class="built_in">tail</span> <span class="comment"># 显示文件的最后几行</span></span><br><span class="line"><span class="built_in">cut</span> <span class="comment"># 显示文件每行中的某些域</span></span><br><span class="line">colrm <span class="comment"># 从标准输入中删除若干列</span></span><br><span class="line"><span class="built_in">paste</span> <span class="comment"># 横向连接文件</span></span><br><span class="line">diff <span class="comment"># 比较并显示两个文件的差异</span></span><br><span class="line">sed <span class="comment"># 非交互方式流编辑器</span></span><br><span class="line">grep <span class="comment"># 在文件中按模式查找</span></span><br><span class="line">awk <span class="comment"># 在文件中查找并处理模式</span></span><br><span class="line"><span class="built_in">sort</span> <span class="comment"># 排序或归并文件</span></span><br><span class="line"><span class="built_in">uniq</span> <span class="comment"># 去掉文件中的重复行</span></span><br><span class="line"><span class="built_in">comm</span> <span class="comment"># 显示两有序文件的公共和非公共行</span></span><br><span class="line"><span class="built_in">wc</span> <span class="comment"># 统计文件的字符数、词数和行数</span></span><br><span class="line"><span class="built_in">nl</span> <span class="comment"># 给文件加上行号</span></span><br></pre></td></tr></table></figure><h2 id="Auth-Operation"><a href="#Auth-Operation" class="headerlink" title="Auth Operation"></a>Auth Operation</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">passwd <span class="comment">#修改用户密码</span></span><br><span class="line"><span class="built_in">chmod</span> <span class="comment">#改变文件或目录权限</span></span><br><span class="line"><span class="built_in">umask</span> <span class="comment">#定义创建文件的权限掩码</span></span><br><span class="line"><span class="built_in">chown</span> <span class="comment">#改变文件或目录的属主</span></span><br><span class="line"><span class="built_in">chgrp</span> <span class="comment">#改变文件或目录的所属组</span></span><br><span class="line">xlock <span class="comment">#给终端上锁</span></span><br></pre></td></tr></table></figure><h2 id="Programmer-Operation"><a href="#Programmer-Operation" class="headerlink" title="Programmer Operation"></a>Programmer Operation</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">make <span class="comment">#维护可执行程序的最新版本</span></span><br><span class="line"><span class="built_in">touch</span> <span class="comment">#更新文件的访问和修改时间</span></span><br><span class="line">dbx <span class="comment">#命令行界面调试工具</span></span><br><span class="line">xde <span class="comment">#图形用户界面调试工具</span></span><br></pre></td></tr></table></figure><h2 id="Process-Operation"><a href="#Process-Operation" class="headerlink" title="Process Operation"></a>Process Operation</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ps <span class="comment">#显示进程当前状态</span></span><br><span class="line"><span class="built_in">kill</span> <span class="comment">#终止进程</span></span><br><span class="line"><span class="built_in">nice</span> <span class="comment">#改变待执行命令的优先级</span></span><br><span class="line">renice <span class="comment">#改变已运行进程的优先级</span></span><br></pre></td></tr></table></figure><h2 id="Timing-Operation"><a href="#Timing-Operation" class="headerlink" title="Timing Operation"></a>Timing Operation</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">date</span> <span class="comment">#显示系统的当前日期和时间</span></span><br><span class="line">cal <span class="comment">#显示日历</span></span><br><span class="line">time <span class="comment">#统计程序的执行命令</span></span><br></pre></td></tr></table></figure><h2 id="Network-Socket-Operation"><a href="#Network-Socket-Operation" class="headerlink" title="Network &amp; Socket Operation"></a>Network &amp; Socket Operation</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">telnet <span class="comment">#远程登录</span></span><br><span class="line">rlogin <span class="comment">#远程登录</span></span><br><span class="line">rsh <span class="comment">#在远程主机执行指定命令</span></span><br><span class="line">ftp <span class="comment">#在本地主机与远程主机之间传输文件</span></span><br><span class="line">rcp <span class="comment">#在本地主机与远程主机之间复制文件</span></span><br><span class="line">ping <span class="comment">#给一个网络主机发送回应请求</span></span><br><span class="line">mail <span class="comment">#阅读和发送电子邮件</span></span><br><span class="line">write <span class="comment">#给另一用户发送报文</span></span><br><span class="line">mesg <span class="comment">#允许或拒绝接受报文</span></span><br></pre></td></tr></table></figure><h2 id="Korn-Shell-Operation"><a href="#Korn-Shell-Operation" class="headerlink" title="Korn Shell Operation"></a>Korn Shell Operation</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">history</span> <span class="comment">#列出最近执行过得几条命令及编号</span></span><br><span class="line">r <span class="comment">#重复执行最近执行过的某条命令</span></span><br><span class="line"><span class="built_in">alias</span> <span class="comment">#给某个命令定义别名</span></span><br><span class="line"><span class="built_in">unalias</span> <span class="comment">#取消对某个别名的定义</span></span><br></pre></td></tr></table></figure><h2 id="Other-Operation"><a href="#Other-Operation" class="headerlink" title="Other Operation"></a>Other Operation</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">uname</span> <span class="comment">#显示操作系统的有关信息</span></span><br><span class="line">clear <span class="comment">#清楚屏幕或窗口内容</span></span><br><span class="line"><span class="built_in">env</span> <span class="comment">#显示当前所有设置过的环境变量</span></span><br><span class="line"><span class="built_in">who</span> <span class="comment">#列出当前登录的所有用户</span></span><br><span class="line"><span class="built_in">whoami</span> <span class="comment">#显示当前正在进行操作的用户名</span></span><br><span class="line"><span class="built_in">tty</span> <span class="comment">#显示冲段或伪终端的名称</span></span><br><span class="line"><span class="built_in">stty</span> <span class="comment">#显示或充值控制键定义</span></span><br><span class="line"><span class="built_in">du</span> <span class="comment">#查询磁盘使用情况</span></span><br><span class="line"><span class="built_in">df</span> <span class="comment">#显示文件系统的总空间和可用空间</span></span><br><span class="line">w <span class="comment">#显示当前系统活动的总信息</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> os </tag>
            
            <tag> cheatsheet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Command Line for macOS</title>
      <link href="/2020/command-line-for-macos/"/>
      <url>/2020/command-line-for-macos/</url>
      
        <content type="html"><![CDATA[<h1 id="Command-Line-for-macOS"><a href="#Command-Line-for-macOS" class="headerlink" title="Command Line for macOS"></a>Command Line for macOS</h1><blockquote><p>常用命令行</p></blockquote><h2 id="Folder-Operation"><a href="#Folder-Operation" class="headerlink" title="Folder Operation"></a>Folder Operation</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> <span class="comment">#创建一个目录</span></span><br><span class="line"><span class="built_in">rmdir</span> <span class="comment"># 删除一个目录</span></span><br><span class="line">mvdir <span class="comment"># 移动或重命名一个目录</span></span><br><span class="line"><span class="built_in">cd</span> <span class="comment"># 改变当前目录</span></span><br><span class="line"><span class="built_in">pwd</span> <span class="comment"># 显示当前目录的路径名</span></span><br><span class="line"><span class="built_in">ls</span> <span class="comment"># 显示当前目录的内容</span></span><br><span class="line">dircmp <span class="comment"># 比较两个目录的内容</span></span><br></pre></td></tr></table></figure><h2 id="File-Operation"><a href="#File-Operation" class="headerlink" title="File Operation"></a>File Operation</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> <span class="comment"># 显示或链接文件</span></span><br><span class="line">pg <span class="comment"># 分页格式化显示文件内容</span></span><br><span class="line">more <span class="comment"># 分屏显示文件内容</span></span><br><span class="line"><span class="built_in">od</span> <span class="comment"># 显示非文本文件的内容</span></span><br><span class="line"><span class="built_in">cp</span> <span class="comment"># 复制文件或目录</span></span><br><span class="line"><span class="built_in">rm</span> <span class="comment"># 删除文件或目录</span></span><br><span class="line"><span class="built_in">mv</span> <span class="comment"># 改变文件或所在目录</span></span><br><span class="line"><span class="built_in">ln</span> <span class="comment"># 联接文件</span></span><br><span class="line">find <span class="comment"># 使用匹配表达式查找文件</span></span><br><span class="line">file <span class="comment"># 显示文件类型</span></span><br><span class="line">open <span class="comment"># 使用默认的程序打开文件</span></span><br></pre></td></tr></table></figure><h2 id="Selection-Operation"><a href="#Selection-Operation" class="headerlink" title="Selection Operation"></a>Selection Operation</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">head</span> <span class="comment"># 显示文件的最初几行</span></span><br><span class="line"><span class="built_in">tail</span> <span class="comment"># 显示文件的最后几行</span></span><br><span class="line"><span class="built_in">cut</span> <span class="comment"># 显示文件每行中的某些域</span></span><br><span class="line">colrm <span class="comment"># 从标准输入中删除若干列</span></span><br><span class="line"><span class="built_in">paste</span> <span class="comment"># 横向连接文件</span></span><br><span class="line">diff <span class="comment"># 比较并显示两个文件的差异</span></span><br><span class="line">sed <span class="comment"># 非交互方式流编辑器</span></span><br><span class="line">grep <span class="comment"># 在文件中按模式查找</span></span><br><span class="line">awk <span class="comment"># 在文件中查找并处理模式</span></span><br><span class="line"><span class="built_in">sort</span> <span class="comment"># 排序或归并文件</span></span><br><span class="line"><span class="built_in">uniq</span> <span class="comment"># 去掉文件中的重复行</span></span><br><span class="line"><span class="built_in">comm</span> <span class="comment"># 显示两有序文件的公共和非公共行</span></span><br><span class="line"><span class="built_in">wc</span> <span class="comment"># 统计文件的字符数、词数和行数</span></span><br><span class="line"><span class="built_in">nl</span> <span class="comment"># 给文件加上行号</span></span><br></pre></td></tr></table></figure><h2 id="Auth-Operation"><a href="#Auth-Operation" class="headerlink" title="Auth Operation"></a>Auth Operation</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">passwd <span class="comment">#修改用户密码</span></span><br><span class="line"><span class="built_in">chmod</span> <span class="comment">#改变文件或目录权限</span></span><br><span class="line"><span class="built_in">umask</span> <span class="comment">#定义创建文件的权限掩码</span></span><br><span class="line"><span class="built_in">chown</span> <span class="comment">#改变文件或目录的属主</span></span><br><span class="line"><span class="built_in">chgrp</span> <span class="comment">#改变文件或目录的所属组</span></span><br><span class="line">xlock <span class="comment">#给终端上锁</span></span><br></pre></td></tr></table></figure><h2 id="Programmer-Operation"><a href="#Programmer-Operation" class="headerlink" title="Programmer Operation"></a>Programmer Operation</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">make <span class="comment">#维护可执行程序的最新版本</span></span><br><span class="line"><span class="built_in">touch</span> <span class="comment">#更新文件的访问和修改时间</span></span><br><span class="line">dbx <span class="comment">#命令行界面调试工具</span></span><br><span class="line">xde <span class="comment">#图形用户界面调试工具</span></span><br></pre></td></tr></table></figure><h2 id="Process-Operation"><a href="#Process-Operation" class="headerlink" title="Process Operation"></a>Process Operation</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ps <span class="comment">#显示进程当前状态</span></span><br><span class="line"><span class="built_in">kill</span> <span class="comment">#终止进程</span></span><br><span class="line"><span class="built_in">nice</span> <span class="comment">#改变待执行命令的优先级</span></span><br><span class="line">renice <span class="comment">#改变已运行进程的优先级</span></span><br></pre></td></tr></table></figure><h2 id="Timing-Operation"><a href="#Timing-Operation" class="headerlink" title="Timing Operation"></a>Timing Operation</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">date</span> <span class="comment">#显示系统的当前日期和时间</span></span><br><span class="line">cal <span class="comment">#显示日历</span></span><br><span class="line">time <span class="comment">#统计程序的执行命令</span></span><br></pre></td></tr></table></figure><h2 id="Network-Socket-Operation"><a href="#Network-Socket-Operation" class="headerlink" title="Network &amp; Socket Operation"></a>Network &amp; Socket Operation</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">telnet <span class="comment">#远程登录</span></span><br><span class="line">rlogin <span class="comment">#远程登录</span></span><br><span class="line">rsh <span class="comment">#在远程主机执行指定命令</span></span><br><span class="line">ftp <span class="comment">#在本地主机与远程主机之间传输文件</span></span><br><span class="line">rcp <span class="comment">#在本地主机与远程主机之间复制文件</span></span><br><span class="line">ping <span class="comment">#给一个网络主机发送回应请求</span></span><br><span class="line">mail <span class="comment">#阅读和发送电子邮件</span></span><br><span class="line">write <span class="comment">#给另一用户发送报文</span></span><br><span class="line">mesg <span class="comment">#允许或拒绝接受报文</span></span><br></pre></td></tr></table></figure><h2 id="Korn-Shell-Operation"><a href="#Korn-Shell-Operation" class="headerlink" title="Korn Shell Operation"></a>Korn Shell Operation</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">history</span> <span class="comment">#列出最近执行过得几条命令及编号</span></span><br><span class="line">r <span class="comment">#重复执行最近执行过的某条命令</span></span><br><span class="line"><span class="built_in">alias</span> <span class="comment">#给某个命令定义别名</span></span><br><span class="line"><span class="built_in">unalias</span> <span class="comment">#取消对某个别名的定义</span></span><br></pre></td></tr></table></figure><h2 id="Other-Operation"><a href="#Other-Operation" class="headerlink" title="Other Operation"></a>Other Operation</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">uname</span> <span class="comment">#显示操作系统的有关信息</span></span><br><span class="line">clear <span class="comment">#清楚屏幕或窗口内容</span></span><br><span class="line"><span class="built_in">env</span> <span class="comment">#显示当前所有设置过的环境变量</span></span><br><span class="line"><span class="built_in">who</span> <span class="comment">#列出当前登录的所有用户</span></span><br><span class="line"><span class="built_in">whoami</span> <span class="comment">#显示当前正在进行操作的用户名</span></span><br><span class="line"><span class="built_in">tty</span> <span class="comment">#显示冲段或伪终端的名称</span></span><br><span class="line"><span class="built_in">stty</span> <span class="comment">#显示或充值控制键定义</span></span><br><span class="line"><span class="built_in">du</span> <span class="comment">#查询磁盘使用情况</span></span><br><span class="line"><span class="built_in">df</span> <span class="comment">#显示文件系统的总空间和可用空间</span></span><br><span class="line">w <span class="comment">#显示当前系统活动的总信息</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> os </tag>
            
            <tag> cheatsheet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode Keyboard Shortcuts</title>
      <link href="/2019/vscode-keyboard-shortcuts/"/>
      <url>/2019/vscode-keyboard-shortcuts/</url>
      
        <content type="html"><![CDATA[<h1 id="VSCode-常用快捷键"><a href="#VSCode-常用快捷键" class="headerlink" title="VSCode 常用快捷键"></a>VSCode 常用快捷键</h1><p><code>command + p</code> &gt; <code>shell command</code> 开始 <code>code</code> 命令行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 多行转一行(折叠：改变代码结构)</span></span><br><span class="line">Ctrl + J</span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化代码</span></span><br><span class="line">Shift + Option + F <span class="comment"># mac</span></span><br><span class="line">Shift + Alt + F <span class="comment"># win</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 代码折叠</span></span><br><span class="line">Command+ Option + [ <span class="comment"># 折叠</span></span><br><span class="line">Command+ Option + ] <span class="comment"># 展开</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 向上/向下 复制行</span></span><br><span class="line">Shift + Option + Up / Down</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拆分编辑框</span></span><br><span class="line">Command + \ or 2,3,4</span><br><span class="line">Command + 1,2,3,4 <span class="comment"># 聚焦</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 单词选中</span></span><br><span class="line">Command + D</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开关闭侧边栏</span></span><br><span class="line">Command + B</span><br><span class="line"></span><br><span class="line"><span class="comment"># 跳转到特定行</span></span><br><span class="line">Ctrl + g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件中符号跳转</span></span><br><span class="line">Shift + Option + O</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除上一个单词</span></span><br><span class="line">Option + Delete</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选中词</span></span><br><span class="line">Option + Shift + Left / Right</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除行</span></span><br><span class="line">Command + X</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加多个光标</span></span><br><span class="line">Command + Option + Up / Down</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重命名（replace）</span></span><br><span class="line">F2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 块选择</span></span><br><span class="line">Shift + Option + (鼠标)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 命令面板</span></span><br><span class="line"><span class="comment"># 1. 打开文件</span></span><br><span class="line"><span class="comment"># 2. 查看快捷键 输入 &gt;</span></span><br><span class="line">Command + P</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vscode </tag>
            
            <tag> cheatsheet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Charles macOS 抓包实践</title>
      <link href="/2019/charles-macos/"/>
      <url>/2019/charles-macos/</url>
      
        <content type="html"><![CDATA[<h1 id="Charles-macOS-抓包实践"><a href="#Charles-macOS-抓包实践" class="headerlink" title="Charles macOS 抓包实践"></a>Charles macOS 抓包实践</h1><blockquote><p>Tag：Proxy、macOS、iOS、WeChat Client、微信公众号文章</p></blockquote><p><a href="https://blog.csdn.net/Cyangdaowei/article/details/119362002">MAC版:Charles根证书(Charles Root Certificates)的安装_Cyangdaowei的博客-CSDN博客_mac安装Charles证书</a></p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li>Charles</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install --cask charles</span><br></pre></td></tr></table></figure><ul><li>信用证书</li><li>桌面端应用（浏览器或者客户端）</li><li>移动端设备 &amp; 应用</li></ul><h2 id="Mac-应用设置步骤"><a href="#Mac-应用设置步骤" class="headerlink" title="Mac 应用设置步骤"></a>Mac 应用设置步骤</h2><ul><li><ol><li>证书下载</li></ol><ul><li>Charles &gt; Help &gt; SSL Proxying &gt; Install Charles Root Certificate</li></ul></li><li><ol start="2"><li>添加证书</li></ol></li><li><ol start="3"><li>Mac 证书信任设置（默认不受信任，请求无法拦截）</li></ol><ul><li>打开证书，在 Trust 一列（使用此证书时），设置为始终信任</li></ul></li><li><ol start="4"><li>Charles 设置 SSL Proxying</li></ol><ul><li>Charles &gt; Proxy &gt; SSL Proxying Settings</li><li>Enable SSL Proxying</li><li>Include add a location (host &#x3D; <code>*</code> port &#x3D; <code>443</code>)</li></ul></li></ul><h2 id="iOS-设备设置步骤"><a href="#iOS-设备设置步骤" class="headerlink" title="iOS 设备设置步骤"></a>iOS 设备设置步骤</h2><p>在 <strong>Mac 应用设置步骤的第 3步后</strong>，加入下步骤</p><ul><li>Charles 证书安装到移动设备上<ul><li>Charles &gt; Help &gt; SSL Proxying &gt; Install Charles Root Certificate on a Mobile Device or Remote Browser</li></ul></li><li>移动设备信任 Charles 证书</li></ul><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ol><li>使用 Charles 抓取 微信桌面客户端中公众号历史文章列表；</li><li>通过 Charles 代理，查看手机微信公众号历史文章列表；</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> os </tag>
            
            <tag> charles </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ECMAScript Next</title>
      <link href="/2018/es-next/"/>
      <url>/2018/es-next/</url>
      
        <content type="html"><![CDATA[<h1 id="ECMAScript-Next"><a href="#ECMAScript-Next" class="headerlink" title="ECMAScript Next"></a>ECMAScript Next</h1><h2 id="ECMAScript-2016-ES7"><a href="#ECMAScript-2016-ES7" class="headerlink" title="ECMAScript 2016(ES7)"></a>ECMAScript 2016(ES7)</h2><ul><li>Array.prototype.includes()</li><li>** 运算符</li><li>等效于 Math.pow()</li></ul><h2 id="ECMAScript-2017-ES8"><a href="#ECMAScript-2017-ES8" class="headerlink" title="ECMAScript 2017(ES8)"></a>ECMAScript 2017(ES8)</h2><ul><li>async&#x2F;await</li><li>Object.values()</li><li>Object.entries()</li><li>String padding</li><li>String.prototype.padStart</li><li>String.prototype.padEnd</li><li>Function Args Semi Close</li><li>函数参数列表允许逗号结尾；方便 git 协同</li><li>Object.getOwnPropertyDescriptors()</li><li>SharedArrayBuffer 对象</li><li>Atomics 对象</li></ul><h2 id="ECMAScript-2018-ES9"><a href="#ECMAScript-2018-ES9" class="headerlink" title="ECMAScript 2018(ES9)"></a>ECMAScript 2018(ES9)</h2><ul><li>异步迭代</li><li>Promise.finally()</li><li>Rest&#x2F;Spread 属性</li><li>正则表达式命名捕获组</li><li>正则表达式反向断言</li><li>正则表达式dotAll模式</li><li>正则表达式 Unicode 转义</li><li>非转义序列的模板字符串</li></ul><h2 id="ECMAScript-2019-ES10"><a href="#ECMAScript-2019-ES10" class="headerlink" title="ECMAScript 2019(ES10)"></a>ECMAScript 2019(ES10)</h2><ul><li>行分隔符（U + 2028）和段分隔符（U + 2029）符号现在允许在字符串文字中，与JSON匹配</li><li>JSON.stringify</li><li>Array.prototype.flat()</li><li>Array.prototype.flatMap()</li><li>新增了String的trimStart()方法和trimEnd()方法</li><li>Object.fromEntries()</li><li>Symbol.prototype.description</li><li>String.prototype.matchAll</li><li>matchAll可以更好的用于分组</li><li>Function.prototype.toString()现在返回精确字符，包括空格和注释</li><li>修改 catch 绑定</li><li>新的基本数据类型BigInt</li></ul><h2 id="ECMAScript-2020-ES11"><a href="#ECMAScript-2020-ES11" class="headerlink" title="ECMAScript 2020(ES11)"></a>ECMAScript 2020(ES11)</h2><ul><li>Optional Chaining</li><li>Nullish Coalescing</li><li>Private Fields</li><li>Static Fields</li><li>Top Level Await</li><li>Promise.allSettled</li><li>Dynamic Import</li><li>MatchAll</li><li>globalThis</li><li>BigInt</li></ul><h2 id="ECMAScript-2021-ES12"><a href="#ECMAScript-2021-ES12" class="headerlink" title="ECMAScript 2021(ES12)"></a>ECMAScript 2021(ES12)</h2><ul><li>String.prototype.replaceAll</li><li>Private Method &amp; Private Accessors</li><li>Promise.any &amp; AggregateError</li><li>WeakRefs</li><li>逻辑赋值操作符</li><li>||&#x3D;、&amp;&amp;&#x3D;、??&#x3D;</li><li>数字分隔符</li></ul><h2 id="ECMAScript-2022-ES13"><a href="#ECMAScript-2022-ES13" class="headerlink" title="ECMAScript 2022(ES13)"></a>ECMAScript 2022(ES13)</h2><ul><li>New members of classes<ul><li>Properties (public slots)</li><li>Private slots</li><li>Static initialization blocks</li></ul></li><li>Private slot checks</li><li><code>#privateSlot</code> in obj</li><li>Top-level await in modules</li><li>error.cause</li><li>new Error(‘something went wrong’, { cause: otherError })</li><li>Array.propertye.at()</li><li>RegExp match indices</li><li>Object.hasOwn(obj, propKey)</li></ul><h2 id="ECMAScript-2023-ES14"><a href="#ECMAScript-2023-ES14" class="headerlink" title="ECMAScript 2023(ES14)"></a>ECMAScript 2023(ES14)</h2>]]></content>
      
      
      
        <tags>
            
            <tag> lang/js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 设计模式</title>
      <link href="/2018/js-design-patterns/"/>
      <url>/2018/js-design-patterns/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-设计模式"><a href="#JavaScript-设计模式" class="headerlink" title="JavaScript 设计模式"></a>JavaScript 设计模式</h1><ul><li>JavaScript设计模式<ul><li>基础知识<ul><li>面对对象的JS<ul><li>动态语言类型和鸭子类型</li><li>多态</li><li>封装</li><li>原型模式和y原型继承</li></ul></li><li>this\call\apply<ul><li>this</li><li>call\apply</li></ul></li><li>闭包和高阶函数<ul><li>闭包</li><li>高阶函数</li></ul></li></ul></li><li>设计原则<ul><li>单一职责原则</li><li>最少知识原则</li><li>开放-关闭原则</li></ul></li><li>设计模式<ul><li>单例模式<ul><li>编程技巧<ul><li>接口和面向接口编程</li><li>代码重构</li></ul></li></ul></li><li>策略模式</li><li>代理模式</li><li>迭代器模式</li><li>发布-订阅模式</li><li>命令模式</li><li>组合模式</li><li>模板方法模式</li><li>享元模式</li><li>职责链模式</li><li>中介者模式</li><li>装饰者模式</li><li>状态模式</li><li>适配器模式</li></ul></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> lang/js </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
